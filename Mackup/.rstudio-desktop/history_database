1604588301828:install.packages(c("remotes","pROC","naivebayes"))
1604588323696:remotes::install_github("jtextor/bayesianNetworks")
1604588326487:install.packages("dplyr") #Comment out if already installed
1604588350292:install.packages("dagitty") #Comment out if already installed
1604588353661:install.packages("Hmisc")
1604588392347:install.packages("bnlearn")
1604588538570:library( bayesianNetworks )
1604588538605:library(dplyr)
1604588538606:library(dagitty)
1604588538606:library(Hmisc)
1604588538607:library(bnlearn)
1604589272335:install.packages(c("remotes","pROC","naivebayes"))
1604589283031:remotes::install_github("jtextor/bayesianNetworks")
1604589287799:install.packages("dplyr") #Comment out if already installed
1604589301029:install.packages("dagitty") #Comment out if already installed
1604589302966:install.packages("bnlearn")
1604589357664:library( bayesianNetworks )
1604589357686:library(dplyr)
1604589358038:library(dagitty)
1604589358039:library(Hmisc)
1604589358066:library(bnlearn)
1604589416892:```{r}
1604589424032:---
1604589424033:title: "R Notebook"
1604589424033:output: html_notebook
1604589424034:---
1604589424034:This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code.
1604589424034:Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Cmd+Shift+Enter*.
1604589429523:plot(cars)
1604589457196:install.packages("dplyr") #Comment out if already installed
1604589464143:install.packages("dplyr")
1604589550418:library( bayesianNetworks )
1604589550429:library(dplyr)
1604589550773:library(dagitty)
1604589550815:library(Hmisc)
1604589552419:library(bnlearn)
1604589645686:install.packages("dagitty") #Comment out if already installed
1604589674869:library( bayesianNetworks )
1604589674869:library(dplyr)
1604589674869:library(dagitty)
1604589675157:library(Hmisc)
1604589675158:library(bnlearn)
1604589725034:all_df <- read.csv("data/all_processed.csv",header=TRUE, sep = ',')#,check.names=FALSE)
1604589725064:all_df
1604589803820:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt")
1604589806792:all_df <- read.csv("data/all_processed.csv",header=TRUE, sep = ',')#,check.names=FALSE)
1604589810212:all_df
1604589817670:View(all_df)
1604589817959:View(all_df)
1604589888987:# subselect for variables
1604589888988:# 3,4,9,16,10,12,14,15,44,51,58)
1604589888989:data <- select(all_df, "age","sex","cp","fbs","trestbps","chol","cigs","years","ca","thal","num")
1604589889005:data <- tail(data, -3)
1604589889006:# remove rows with missing data
1604589889006:data <- data[rowSums(is.na(data)) == 0,]
1604589891978:View(data)
1604590359047:g <- dagitty('
1604590359048:dag {
1604590359048:age.numeric [pos="0.262,-1.314"]
1604590359048:ca [pos="-1.351,0.555"]
1604590359048:chol.numeric [pos="-0.728,0.191"]
1604590359049:cigs.numeric [pos="-1.247,-0.466"]
1604590359049:cp [pos="0.348,-0.221"]
1604590359049:fbs [pos="-0.121,0.178"]
1604590359049:num [pos="-0.667,1.153"]
1604590359049:sex [pos="-1.310,-1.357"]
1604590359050:thal [pos="-0.962,0.539"]
1604590359050:trestbps.numeric [pos="-1.247,0.178"]
1604590359050:years.numeric [pos="-0.270,-0.496"]
1604590359050:age.numeric -> cigs.numeric
1604590359050:age.numeric -> years.numeric
1604590359051:age.numeric -> trestbps.numeric
1604590359051:age.numeric -> num
1604590359051:age.numeric -> ca
1604590359051:age.numeric -> chol.numeric
1604590359051:ca -> num
1604590359052:chol.numeric -> num
1604590359052:chol.numeric <-> trestbps.numeric
1604590359052:cigs.numeric -> chol.numeric
1604590359052:cigs.numeric -> cp
1604590359052:cigs.numeric -> fbs
1604590359053:cigs.numeric -> trestbps.numeric
1604590359053:cigs.numeric <-> years.numeric
1604590359053:cp -> num
1604590359053:fbs -> num
1604590359054:sex -> cigs.numeric
1604590359054:sex -> cp
1604590359054:sex -> thal
1604590359054:thal -> cp
1604590359054:sex -> years.numeric
1604590359055:thal -> num
1604590359055:trestbps.numeric -> ca
1604590359055:trestbps.numeric -> cp
1604590359055:trestbps.numeric -> thal
1604590359056:years.numeric -> chol.numeric
1604590359056:years.numeric -> fbs
1604590359056:years.numeric -> trestbps.numeric
1604590359056:}
1604590359057:')
1604590375991:plot(g)
1604590508993:g <- dagitty('
1604590508993:dag {
1604590508993:age.numeric [pos="1,-1.314"]
1604590508994:ca [pos="-1.351,0.555"]
1604590508994:chol.numeric [pos="-0.728,0.191"]
1604590508994:cigs.numeric [pos="-1.247,-0.466"]
1604590508994:cp [pos="0.348,-0.221"]
1604590508994:fbs [pos="-0.121,0.178"]
1604590508995:num [pos="-0.667,1.153"]
1604590508995:sex [pos="-1.310,-1.357"]
1604590508995:thal [pos="-0.962,0.539"]
1604590508995:trestbps.numeric [pos="-1.247,0.178"]
1604590508995:years.numeric [pos="-0.270,-0.496"]
1604590508996:age.numeric -> cigs.numeric
1604590508996:age.numeric -> years.numeric
1604590508996:age.numeric -> trestbps.numeric
1604590508996:age.numeric -> num
1604590508996:age.numeric -> ca
1604590508996:age.numeric -> chol.numeric
1604590508997:ca -> num
1604590508997:chol.numeric -> num
1604590508997:chol.numeric <-> trestbps.numeric
1604590508997:cigs.numeric -> chol.numeric
1604590508997:cigs.numeric -> cp
1604590508998:cigs.numeric -> fbs
1604590508998:cigs.numeric -> trestbps.numeric
1604590508998:cigs.numeric <-> years.numeric
1604590508998:cp -> num
1604590508998:fbs -> num
1604590508999:sex -> cigs.numeric
1604590508999:sex -> cp
1604590508999:sex -> thal
1604590508999:thal -> cp
1604590508999:sex -> years.numeric
1604590509000:thal -> num
1604590509000:trestbps.numeric -> ca
1604590509000:trestbps.numeric -> cp
1604590509000:trestbps.numeric -> thal
1604590509000:years.numeric -> chol.numeric
1604590509001:years.numeric -> fbs
1604590509001:years.numeric -> trestbps.numeric
1604590509001:}
1604590509001:')
1604590509004:plot(g)
1604590520985:# build DAG
1604590520986:g <- dagitty('
1604590520986:dag {
1604590520986:age.numeric [pos="10,-1.314"]
1604590520986:ca [pos="-1.351,0.555"]
1604590520986:chol.numeric [pos="-0.728,0.191"]
1604590520987:cigs.numeric [pos="-1.247,-0.466"]
1604590520987:cp [pos="0.348,-0.221"]
1604590520987:fbs [pos="-0.121,0.178"]
1604590520987:num [pos="-0.667,1.153"]
1604590520987:sex [pos="-1.310,-1.357"]
1604590520988:thal [pos="-0.962,0.539"]
1604590520988:trestbps.numeric [pos="-1.247,0.178"]
1604590520988:years.numeric [pos="-0.270,-0.496"]
1604590520988:age.numeric -> cigs.numeric
1604590520988:age.numeric -> years.numeric
1604590520989:age.numeric -> trestbps.numeric
1604590520989:age.numeric -> num
1604590520989:age.numeric -> ca
1604590520989:age.numeric -> chol.numeric
1604590520989:ca -> num
1604590520989:chol.numeric -> num
1604590520990:chol.numeric <-> trestbps.numeric
1604590520990:cigs.numeric -> chol.numeric
1604590520990:cigs.numeric -> cp
1604590520990:cigs.numeric -> fbs
1604590520990:cigs.numeric -> trestbps.numeric
1604590520991:cigs.numeric <-> years.numeric
1604590520991:cp -> num
1604590520991:fbs -> num
1604590520991:sex -> cigs.numeric
1604590520991:sex -> cp
1604590520992:sex -> thal
1604590520992:thal -> cp
1604590520992:sex -> years.numeric
1604590520992:thal -> num
1604590520992:trestbps.numeric -> ca
1604590520993:trestbps.numeric -> cp
1604590520993:trestbps.numeric -> thal
1604590520993:years.numeric -> chol.numeric
1604590520993:years.numeric -> fbs
1604590520993:years.numeric -> trestbps.numeric
1604590520994:}
1604590520994:')
1604590520996:plot(g)
1604590532392:g <- dagitty('
1604590532392:dag {
1604590532393:age.numeric [pos="0.262,-1.314"]
1604590532393:ca [pos="-1.351,0.555"]
1604590532393:chol.numeric [pos="-0.728,0.191"]
1604590532393:cigs.numeric [pos="-1.247,-0.466"]
1604590532393:cp [pos="0.348,-0.221"]
1604590532394:fbs [pos="-0.121,0.178"]
1604590532394:num [pos="-0.667,1.153"]
1604590532394:sex [pos="-1.310,-1.357"]
1604590532394:thal [pos="-0.962,0.539"]
1604590532394:trestbps.numeric [pos="-1.247,0.178"]
1604590532395:years.numeric [pos="-0.270,-0.496"]
1604590532395:age.numeric -> cigs.numeric
1604590532395:age.numeric -> years.numeric
1604590532395:age.numeric -> trestbps.numeric
1604590532396:age.numeric -> num
1604590532396:age.numeric -> ca
1604590532396:age.numeric -> chol.numeric
1604590532396:ca -> num
1604590532396:chol.numeric -> num
1604590532397:chol.numeric <-> trestbps.numeric
1604590532397:cigs.numeric -> chol.numeric
1604590532397:cigs.numeric -> cp
1604590532397:cigs.numeric -> fbs
1604590532397:cigs.numeric -> trestbps.numeric
1604590532397:cigs.numeric <-> years.numeric
1604590532398:cp -> num
1604590532398:fbs -> num
1604590532398:sex -> cigs.numeric
1604590532398:sex -> cp
1604590532398:sex -> thal
1604590532399:thal -> cp
1604590532399:sex -> years.numeric
1604590532399:thal -> num
1604590532399:trestbps.numeric -> ca
1604590532399:trestbps.numeric -> cp
1604590532400:trestbps.numeric -> thal
1604590532400:years.numeric -> chol.numeric
1604590532400:years.numeric -> fbs
1604590532400:years.numeric -> trestbps.numeric
1604590532400:}
1604590532401:')
1604590532403:plot(g)
1604590589406:paths(g, "sex", "fbs")
1604590688702:paths(g, "sex", "years.numeric")
1604590712262:paths(g, "sex", "years.numeric", all)
1604590869157:g <- dagitty('
1604590869157:dag {
1604590869157:age.numeric [pos="0.262,-1.314"]
1604590869157:ca [pos="-1.351,0.555"]
1604590869158:chol.numeric [pos="-0.728,0.191"]
1604590869158:cigs.numeric [pos="-1.247,-0.466"]
1604590869158:cp [pos="0.348,-0.221"]
1604590869158:fbs [pos="-0.121,0.178"]
1604590869158:num [pos="-0.667,1.153"]
1604590869158:sex [pos="-1.310,-1.357"]
1604590869159:thal [pos="-0.962,0.539"]
1604590869159:trestbps.numeric [pos="-1.247,0.178"]
1604590869159:years.numeric [pos="-0.270,-0.496"]
1604590869159:age.numeric -> cigs.numeric
1604590869159:age.numeric -> years.numeric
1604590869160:age.numeric -> trestbps.numeric
1604590869160:age.numeric -> num
1604590869160:age.numeric -> ca
1604590869160:age.numeric -> chol.numeric
1604590869160:ca -> num
1604590869160:chol.numeric -> num
1604590869161:chol.numeric <-> trestbps.numeric
1604590869161:cigs.numeric -> chol.numeric
1604590869161:cigs.numeric -> cp
1604590869161:cigs.numeric -> fbs
1604590869161:cigs.numeric -> trestbps.numeric
1604590869162:cigs.numeric <-> years.numeric
1604590869162:cp -> num
1604590869162:fbs -> num
1604590869162:sex -> cigs.numeric
1604590869162:sex -> cp
1604590869163:sex -> thal
1604590869163:thal -> cp
1604590869163:sex -> years.numeric
1604590869163:thal -> num
1604590869163:trestbps.numeric -> ca
1604590869163:trestbps.numeric -> cp
1604590869164:trestbps.numeric -> thal
1604590869164:years.numeric -> chol.numeric
1604590869164:years.numeric -> fbs
1604590869164:years.numeric -> trestbps.numeric
1604590869164:“highlight causal paths” = TRUE
1604590869165:}
1604590869165:')
1604590869172:plot(g)
1604591399746:g <- dagitty('
1604591399747:dag {
1604591399747:#age.numeric [pos="0.262,-1.314"]
1604591399747:#ca [pos="-1.351,0.555"]
1604591399747:#chol.numeric [pos="-0.728,0.191"]
1604591399748:#cigs.numeric [pos="-1.247,-0.466"]
1604591399748:#cp [pos="0.348,-0.221"]
1604591399748:#fbs [pos="-0.121,0.178"]
1604591399748:#num [pos="-0.667,1.153"]
1604591399748:#sex [pos="-1.310,-1.357"]
1604591399749:#thal [pos="-0.962,0.539"]
1604591399749:#trestbps.numeric [pos="-1.247,0.178"]
1604591399749:#years.numeric [pos="-0.270,-0.496"]
1604591399749:age.numeric -> cigs.numeric
1604591399749:age.numeric -> years.numeric
1604591399749:age.numeric -> trestbps.numeric
1604591399750:age.numeric -> num
1604591399750:age.numeric -> ca
1604591399750:age.numeric -> chol.numeric
1604591399750:ca -> num
1604591399750:chol.numeric -> num
1604591399751:chol.numeric <-> trestbps.numeric
1604591399751:cigs.numeric -> chol.numeric
1604591399751:cigs.numeric -> cp
1604591399751:cigs.numeric -> fbs
1604591399751:cigs.numeric -> trestbps.numeric
1604591399752:cigs.numeric <-> years.numeric
1604591399752:cp -> num
1604591399752:fbs -> num
1604591399752:sex -> cigs.numeric
1604591399752:sex -> cp
1604591399752:sex -> thal
1604591399753:thal -> cp
1604591399753:sex -> years.numeric
1604591399753:thal -> num
1604591399753:trestbps.numeric -> ca
1604591399753:trestbps.numeric -> cp
1604591399754:trestbps.numeric -> thal
1604591399754:years.numeric -> chol.numeric
1604591399754:years.numeric -> fbs
1604591399754:years.numeric -> trestbps.numeric
1604591399754:}
1604591399755:')
1604591399758:plot(g)
1604591425914:g <- dagitty('
1604591425914:dag {
1604591425914:age.numeric -> cigs.numeric
1604591425915:age.numeric -> years.numeric
1604591425915:age.numeric -> trestbps.numeric
1604591425915:age.numeric -> num
1604591425915:age.numeric -> ca
1604591425915:age.numeric -> chol.numeric
1604591425916:ca -> num
1604591425916:chol.numeric -> num
1604591425916:chol.numeric <-> trestbps.numeric
1604591425916:cigs.numeric -> chol.numeric
1604591425916:cigs.numeric -> cp
1604591425916:cigs.numeric -> fbs
1604591425917:cigs.numeric -> trestbps.numeric
1604591425917:cigs.numeric <-> years.numeric
1604591425917:cp -> num
1604591425917:fbs -> num
1604591425917:sex -> cigs.numeric
1604591425918:sex -> cp
1604591425918:sex -> thal
1604591425918:thal -> cp
1604591425918:sex -> years.numeric
1604591425918:thal -> num
1604591425919:trestbps.numeric -> ca
1604591425919:trestbps.numeric -> cp
1604591425919:trestbps.numeric -> thal
1604591425919:years.numeric -> chol.numeric
1604591425919:years.numeric -> fbs
1604591425920:years.numeric -> trestbps.numeric
1604591425920:}
1604591425920:')
1604591425922:plot(g)
1604591442340:g <- dagitty('
1604591442340:dag {
1604591442341:age.numeric [pos="0.262,-1.314"]
1604591442341:ca [pos="-1.351,0.555"]
1604591442341:chol.numeric [pos="-0.728,0.191"]
1604591442341:cigs.numeric [pos="-1.247,-0.466"]
1604591442341:cp [pos="0.348,-0.221"]
1604591442342:fbs [pos="-0.121,0.178"]
1604591442342:num [pos="-0.667,1.153"]
1604591442342:sex [pos="-1.310,-1.357"]
1604591442342:thal [pos="-0.962,0.539"]
1604591442342:trestbps.numeric [pos="-1.247,0.178"]
1604591442343:years.numeric [pos="-0.270,-0.496"]
1604591442343:age.numeric -> cigs.numeric
1604591442343:age.numeric -> years.numeric
1604591442343:age.numeric -> trestbps.numeric
1604591442343:age.numeric -> num
1604591442344:age.numeric -> ca
1604591442344:age.numeric -> chol.numeric
1604591442344:ca -> num
1604591442344:chol.numeric -> num
1604591442344:chol.numeric <-> trestbps.numeric
1604591442345:cigs.numeric -> chol.numeric
1604591442345:cigs.numeric -> cp
1604591442345:cigs.numeric -> fbs
1604591442345:cigs.numeric -> trestbps.numeric
1604591442345:cigs.numeric <-> years.numeric
1604591442346:cp -> num
1604591442346:fbs -> num
1604591442346:sex -> cigs.numeric
1604591442346:sex -> cp
1604591442346:sex -> thal
1604591442347:thal -> cp
1604591442347:sex -> years.numeric
1604591442347:thal -> num
1604591442347:trestbps.numeric -> ca
1604591442348:trestbps.numeric -> cp
1604591442348:trestbps.numeric -> thal
1604591442348:years.numeric -> chol.numeric
1604591442348:years.numeric -> fbs
1604591442348:years.numeric -> trestbps.numeric
1604591442349:}
1604591442349:')
1604591442351:plot(g)
1604591452104:impliedConditionalIndependencies(g)
1604591659133:net <- model2network(toString(g,"bnlearn"))
1604591659137:fit <- bn.fit( net, as.data.frame(scale(data)) )
1604591659139:fit
1604591672968:net <- model2network(toString(g,"bnlearn"))
1604591690747:fit <- bn.fit( net, as.data.frame(scale(data)) )
1604591766934:g <- dagitty('
1604591766934:dag {
1604591766935:age.numeric [pos="0.262,-1.314"]
1604591766935:ca [pos="-1.351,0.555"]
1604591766935:chol.numeric [pos="-0.728,0.191"]
1604591766935:cigs.numeric [pos="-1.247,-0.466"]
1604591766935:cp [pos="0.348,-0.221"]
1604591766936:fbs [pos="-0.121,0.178"]
1604591766936:num [pos="-0.667,1.153"]
1604591766936:sex [pos="-1.310,-1.357"]
1604591766936:thal [pos="-0.962,0.539"]
1604591766936:trestbps.numeric [pos="-1.247,0.178"]
1604591766937:years.numeric [pos="-0.270,-0.496"]
1604591766937:age.numeric -> cigs.numeric
1604591766937:age.numeric -> years.numeric
1604591766937:age.numeric -> trestbps.numeric
1604591766937:age.numeric -> num.numeric
1604591766937:age.numeric -> ca.numeric
1604591766938:age.numeric -> chol.numeric
1604591766938:ca.numeric-> num.numeric
1604591766938:chol.numeric -> num.numeric
1604591766938:chol.numeric <-> trestbps.numeric
1604591766939:cigs.numeric -> chol.numeric
1604591766939:cigs.numeric -> cp.numeric
1604591766939:cigs.numeric -> fbs.numeric
1604591766939:cigs.numeric -> trestbps.numeric
1604591766939:cigs.numeric <-> years.numeric
1604591766939:cp.numeric -> num.numeric
1604591766940:fbs.numeric -> num.numeric
1604591766940:sex.numeric -> cigs.numeric
1604591766940:sex.numeric -> cp.numeric
1604591766940:sex.numeric -> thal.numeric
1604591766940:thal.numeric -> cp.numeric
1604591766941:sex.numeric -> years.numeric
1604591766941:thal.numeric -> num.numeric
1604591766941:trestbps.numeric -> ca.numeric
1604591766941:trestbps.numeric -> cp.numeric
1604591766941:trestbps.numeric -> thal.numeric
1604591766942:years.numeric -> chol.numeric
1604591766942:years.numeric -> fbs.numeric
1604591766942:years.numeric -> trestbps.numeric
1604591766942:}
1604591766943:')
1604591774877:plot(g)
1604591791257:g <- dagitty('
1604591791257:dag {
1604591791257:age.numeric [pos="0.262,-1.314"]
1604591791258:ca.numeric [pos="-1.351,0.555"]
1604591791258:chol.numeric [pos="-0.728,0.191"]
1604591791258:cigs.numeric [pos="-1.247,-0.466"]
1604591791258:cp.numeric [pos="0.348,-0.221"]
1604591791258:fbs.numeric [pos="-0.121,0.178"]
1604591791258:num.numeric [pos="-0.667,1.153"]
1604591791259:sex.numeric [pos="-1.310,-1.357"]
1604591791259:thal.numeric [pos="-0.962,0.539"]
1604591791259:trestbps.numeric [pos="-1.247,0.178"]
1604591791259:years.numeric [pos="-0.270,-0.496"]
1604591791259:age.numeric -> cigs.numeric
1604591791260:age.numeric -> years.numeric
1604591791260:age.numeric -> trestbps.numeric
1604591791260:age.numeric -> num.numeric
1604591791260:age.numeric -> ca.numeric
1604591791260:age.numeric -> chol.numeric
1604591791261:ca.numeric-> num.numeric
1604591791261:chol.numeric -> num.numeric
1604591791261:chol.numeric <-> trestbps.numeric
1604591791261:cigs.numeric -> chol.numeric
1604591791261:cigs.numeric -> cp.numeric
1604591791262:cigs.numeric -> fbs.numeric
1604591791262:cigs.numeric -> trestbps.numeric
1604591791262:cigs.numeric <-> years.numeric
1604591791262:cp.numeric -> num.numeric
1604591791262:fbs.numeric -> num.numeric
1604591791263:sex.numeric -> cigs.numeric
1604591791263:sex.numeric -> cp.numeric
1604591791263:sex.numeric -> thal.numeric
1604591791263:thal.numeric -> cp.numeric
1604591791264:sex.numeric -> years.numeric
1604591791264:thal.numeric -> num.numeric
1604591791264:trestbps.numeric -> ca.numeric
1604591791264:trestbps.numeric -> cp.numeric
1604591791264:trestbps.numeric -> thal.numeric
1604591791265:years.numeric -> chol.numeric
1604591791265:years.numeric -> fbs.numeric
1604591791265:years.numeric -> trestbps.numeric
1604591791265:}
1604591791265:')
1604591791268:plot(g)
1604591795644:net <- model2network(toString(g,"bnlearn"))
1604591797960:fit <- bn.fit( net, as.data.frame(scale(data)) )
1604591942889:smp_size = floor(0.75 *  nrow(data))
1604591942889:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604591942890:train <-  data[train_ind,]
1604591942890:test <- data[-train_ind,]
1604592090695:fit <- bn.fit(net, as.data.frame(train))
1604592111564:View(train)
1604592210777:library(dplyr)
1604592210777:library(dagitty)
1604592210777:library(Hmisc)
1604592210778:library(caTools)
1604592218609:library(dplyr)
1604592218609:library(dagitty)
1604592218609:library(Hmisc)
1604592222364:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt")
1604592222364:d <- read.csv("dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604592222370:head(d)
1604592231373:View(d)
1604592247094:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1604592251053:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1604592251059:nrow(prep)
1604592251059:nrow(subset)
1604592263405:amountBins <- 3
1604592263406:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1604592263407:continuousVars <- unlist(continuousVars)
1604592263407:for(i in 1:length(continuousVars)){
1604592263407:varname <- continuousVars[i]
1604592263408:intervalValues.varname <- list()
1604592263408:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1604592263408:for(j in 1:length(intervals.varname)){
1604592263409:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1604592263409:intervals.fst <- intervals.t[1]
1604592263409:intervals.snd <- intervals.t[2]
1604592263409:nc.1 <- nchar(intervals.fst)
1604592263410:nc.2 <- nchar(intervals.snd)
1604592263410:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1604592263410:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1604592263411:}
1604592263411:intervalValues.varname <- unique(unlist(intervalValues.varname))
1604592263412:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1604592263412:intervalValues.varname[1] = intervalValues.varname[1]-1
1604592263412:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1604592263413:colname.D <-  paste(varname, ".discrete",sep="")
1604592263413:colname.N <- paste(varname, ".numeric", sep = "")
1604592263414:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1604592263414:prep[colname.N] <- as.numeric( prep[[colname.D]])
1604592263415:}
1604592263447:#### make target variable binary #####
1604592263447:## 0 --> 0 & 1,2,3 --> 1 #######
1604592263447:num.binary <- prep$num
1604592263448:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604592271980:#Make DAG
1604592271980:g <- dagitty('
1604592271980:dag {
1604592271981:age.numeric [pos="0.262,-1.314"]
1604592271981:ca [pos="-1.351,0.555"]
1604592271981:chol.numeric [pos="-0.728,0.191"]
1604592271981:cigs.numeric [pos="-1.247,-0.466"]
1604592271981:cp [pos="0.348,-0.221"]
1604592271982:fbs [pos="-0.121,0.178"]
1604592271982:num [pos="-0.667,1.153"]
1604592271982:sex [pos="-1.310,-1.357"]
1604592271982:thal [pos="-0.962,0.539"]
1604592271982:trestbps.numeric [pos="-1.247,0.178"]
1604592271983:years.numeric [pos="-0.270,-0.496"]
1604592271983:age.numeric -> cigs.numeric
1604592271983:age.numeric -> years.numeric
1604592271983:age.numeric -> trestbps.numeric
1604592271983:age.numeric -> num
1604592271984:age.numeric -> ca
1604592271984:age.numeric -> chol.numeric
1604592271984:ca -> num
1604592271984:chol.numeric -> num
1604592271984:chol.numeric <-> trestbps.numeric
1604592271985:cigs.numeric -> chol.numeric
1604592271985:cigs.numeric -> cp
1604592271985:cigs.numeric -> fbs
1604592271985:cigs.numeric -> trestbps.numeric
1604592271985:cigs.numeric <-> years.numeric
1604592271986:cp -> num
1604592271986:fbs -> num
1604592271986:sex -> cigs.numeric
1604592271986:sex -> cp
1604592271986:sex -> thal
1604592271987:thal -> cp
1604592271987:sex -> years.numeric
1604592271987:thal -> num
1604592271987:trestbps.numeric -> ca
1604592271988:trestbps.numeric -> cp
1604592271988:trestbps.numeric -> thal
1604592271988:years.numeric -> chol.numeric
1604592271988:years.numeric -> fbs
1604592271988:years.numeric -> trestbps.numeric
1604592271989:}
1604592271989:')
1604592271991:#Make DAG
1604592271992:g.binary <- dagitty('
1604592271992:dag {
1604592271992:age.numeric [pos="0.262,-1.314"]
1604592271992:ca [pos="-1.351,0.555"]
1604592271992:chol.numeric [pos="-0.728,0.191"]
1604592271992:cigs.numeric [pos="-1.247,-0.466"]
1604592271993:cp [pos="0.348,-0.221"]
1604592271993:fbs [pos="-0.121,0.178"]
1604592271993:num.binary [pos="-0.667,1.153"]
1604592271993:sex [pos="-1.310,-1.357"]
1604592271993:thal [pos="-0.962,0.539"]
1604592271993:trestbps.numeric [pos="-1.247,0.178"]
1604592271994:years.numeric [pos="-0.270,-0.496"]
1604592271994:age.numeric -> cigs.numeric
1604592271994:age.numeric -> years.numeric
1604592271994:age.numeric -> trestbps.numeric
1604592271994:age.numeric -> num.binary
1604592271995:age.numeric -> ca
1604592271995:age.numeric -> chol.numeric
1604592271995:ca -> num.binary
1604592271995:chol.numeric -> num.binary
1604592271995:chol.numeric <-> trestbps.numeric
1604592271995:cigs.numeric -> chol.numeric
1604592271996:cigs.numeric -> cp
1604592271996:cigs.numeric -> fbs
1604592271996:cigs.numeric -> trestbps.numeric
1604592271996:cigs.numeric <-> years.numeric
1604592271996:cp -> num.binary
1604592271997:fbs -> num.binary
1604592271997:sex -> cigs.numeric
1604592271997:sex -> cp
1604592271997:sex -> thal
1604592271997:thal -> cp
1604592271997:sex -> years.numeric
1604592271998:thal -> num.binary
1604592271998:trestbps.numeric -> ca
1604592271998:trestbps.numeric -> cp
1604592271998:trestbps.numeric -> thal
1604592271998:years.numeric -> chol.numeric
1604592271998:years.numeric -> fbs
1604592271999:years.numeric -> trestbps.numeric
1604592271999:}
1604592271999:')
1604592283588:localTests(g,prep,type="cis.chisq", max.conditioning.variables=5)
1604592321161:View(prep)
1604592346859:localTests(g,data,type="cis.chisq", max.conditioning.variables=5)
1604592490054:localTests(g,data,type="cis.chisq", max.conditioning.variables=5)
1604592643102:g <- dagitty('
1604592643102:dag {
1604592643103:age [pos="0.262,-1.314"]
1604592643103:ca [pos="-1.351,0.555"]
1604592643103:chol [pos="-0.728,0.191"]
1604592643103:cigs [pos="-1.247,-0.466"]
1604592643103:cp [pos="0.348,-0.221"]
1604592643103:fbs [pos="-0.121,0.178"]
1604592643104:num [pos="-0.667,1.153"]
1604592643104:sex [pos="-1.310,-1.357"]
1604592643104:thal [pos="-0.962,0.539"]
1604592643104:trestbps [pos="-1.247,0.178"]
1604592643104:years [pos="-0.270,-0.496"]
1604592643105:age -> cigs
1604592643105:age -> years
1604592643105:age -> trestbps
1604592643105:age -> num
1604592643105:age -> ca
1604592643106:age -> chol
1604592643106:ca -> num
1604592643106:chol -> num
1604592643106:chol <-> trestbps
1604592643106:cigs -> chol
1604592643107:cigs -> cp
1604592643107:cigs -> fbs
1604592643107:cigs -> trestbps
1604592643107:cigs <-> years
1604592643107:cp -> num
1604592643108:fbs -> num
1604592643108:sex -> cigs
1604592643108:sex -> cp
1604592643108:sex -> thal
1604592643108:thal -> cp
1604592643109:sex -> years
1604592643109:thal -> num
1604592643109:trestbps -> ca
1604592643109:trestbps -> cp
1604592643110:trestbps -> thal
1604592643110:years -> chol
1604592643110:years -> fbs
1604592643110:years-> trestbps
1604592643111:}
1604592643111:')
1604592647648:plot(g)
1604592651898:localTests(g,data,type="cis.chisq", max.conditioning.variables=5)
1604592725904:localTests(g,prep,type="cis.chisq", max.conditioning.variables=5)
1604592820609:fit <- bn.fit(net, as.data.frame(train))
1604592841355:fit <- bn.fit(net, as.data.frame(train))
1604592851210:set.seed(13)
1604592851211:#Select only variables we need (numeric)
1604592851211:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1604592851217:# split the data
1604592851217:smp_size = floor(0.75 *  nrow(data))
1604592851217:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604592851218:train <-  data[train_ind,]
1604592851218:test <- data[-train_ind,]
1604592851219:train_neg = sum(train$num.binary==0)
1604592851219:train_pos = sum(train$num.binary==1)
1604592851219:test_neg = sum(test$num.binary==0)
1604592851219:test_pos = sum(test$num.binary==1)
1604592851219:train_ratio = train_pos/train_neg
1604592851220:test_ratio = test_pos/test_neg
1604592856278:library(naivebayes)
1604592859961:fit <- bn.fit(net, as.data.frame(train))
1604592870652:g <- dagitty('
1604592870652:dag {
1604592870653:age.numeric [pos="0.262,-1.314"]
1604592870653:ca [pos="-1.351,0.555"]
1604592870653:chol.numeric [pos="-0.728,0.191"]
1604592870653:cigs.numeric [pos="-1.247,-0.466"]
1604592870653:cp [pos="0.348,-0.221"]
1604592870654:fbs [pos="-0.121,0.178"]
1604592870654:num [pos="-0.667,1.153"]
1604592870654:sex [pos="-1.310,-1.357"]
1604592870654:thal [pos="-0.962,0.539"]
1604592870654:trestbps.numeric [pos="-1.247,0.178"]
1604592870654:years.numeric [pos="-0.270,-0.496"]
1604592870655:age.numeric -> cigs.numeric
1604592870655:age.numeric -> years.numeric
1604592870655:age.numeric -> trestbps.numeric
1604592870655:age.numeric -> num
1604592870655:age.numeric -> ca
1604592870656:age.numeric -> chol.numeric
1604592870656:ca -> num
1604592870656:chol.numeric -> num
1604592870656:chol.numeric <-> trestbps.numeric
1604592870656:cigs.numeric -> chol.numeric
1604592870657:cigs.numeric -> cp
1604592870657:cigs.numeric -> fbs
1604592870657:cigs.numeric -> trestbps.numeric
1604592870657:cigs.numeric <-> years.numeric
1604592870657:cp -> num
1604592870658:fbs -> num
1604592870658:sex -> cigs.numeric
1604592870658:sex -> cp
1604592870658:sex -> thal
1604592870658:thal -> cp
1604592870659:sex -> years.numeric
1604592870659:thal -> num
1604592870659:trestbps.numeric -> ca
1604592870659:trestbps.numeric -> cp
1604592870660:trestbps.numeric -> thal
1604592870660:years.numeric -> chol.numeric
1604592870660:years.numeric -> fbs
1604592870660:years.numeric -> trestbps.numeric
1604592870661:}
1604592870661:')
1604592874902:fit <- bn.fit(net, as.data.frame(train))
1604592929222:net <- model2network(toString(g,"bnlearn"))
1604592933404:fit <- bn.fit(net, as.data.frame(train))
1604592936127:result <- predict(fit,node="num", data=test)
1604592939008:test$num
1604592978859:library( bayesianNetworks )
1604592978860:library(dplyr)
1604592978860:library(dagitty)
1604592978860:library(Hmisc)
1604592978861:library(bnlearn)
1604592978861:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt")
1604592978862:# load csv
1604592978862:all_df <- read.csv("data/all_processed.csv",header=TRUE, sep = ',')#,check.names=FALSE)
1604592978875:# subselect for variables
1604592978875:# 3,4,9,16,10,12,14,15,44,51,58)
1604592978875:data <- select(all_df, "age","sex","cp","fbs","trestbps","chol","cigs","years","ca","thal","num")
1604592978881:data <- tail(data, -3)
1604592978882:# remove rows with missing data
1604592978882:data <- data[rowSums(is.na(data)) == 0,]
1604592978883:# split data test training set
1604592978883:# split the data
1604592978883:smp_size = floor(0.75 *  nrow(data))
1604592978883:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604592978883:train <-  data[train_ind,]
1604592978884:test <- data[-train_ind,]
1604592978884:# build DAG
1604592978884:g <- dagitty('
1604592978885:dag {
1604592978885:age [pos="0.262,-1.314"]
1604592978885:ca [pos="-1.351,0.555"]
1604592978885:chol [pos="-0.728,0.191"]
1604592978885:cigs [pos="-1.247,-0.466"]
1604592978885:cp [pos="0.348,-0.221"]
1604592978886:fbs [pos="-0.121,0.178"]
1604592978886:num [pos="-0.667,1.153"]
1604592978886:sex [pos="-1.310,-1.357"]
1604592978886:thal [pos="-0.962,0.539"]
1604592978886:trestbps [pos="-1.247,0.178"]
1604592978886:years [pos="-0.270,-0.496"]
1604592978887:age -> cigs
1604592978887:age -> years
1604592978887:age -> trestbps
1604592978887:age -> num
1604592978887:age -> ca
1604592978887:age -> chol
1604592978888:ca -> num
1604592978888:chol -> num
1604592978888:chol <-> trestbps
1604592978888:cigs -> chol
1604592978888:cigs -> cp
1604592978888:cigs -> fbs
1604592978889:cigs -> trestbps
1604592978889:cigs <-> years
1604592978889:cp -> num
1604592978889:fbs -> num
1604592978889:sex -> cigs
1604592978890:sex -> cp
1604592978890:sex -> thal
1604592978890:thal -> cp
1604592978890:sex -> years
1604592978890:thal -> num
1604592978890:trestbps -> ca
1604592978891:trestbps -> cp
1604592978891:trestbps -> thal
1604592978891:years -> chol
1604592978891:years -> fbs
1604592978891:years-> trestbps
1604592978891:}
1604592978892:')
1604592978893:plot(g)
1604592978938:localTests(g,data,type="cis.chisq", max.conditioning.variables=5)
1604592985200:impliedConditionalIndependencies(g)
1604592985216:net <- model2network(toString(g,"bnlearn"))
1604592985218:fit <- bn.fit( net, as.data.frame(scale(data)) )
1604596951911:View(prep)
1604597300502:data_scaled <- scale(data)
1604597386540:View(data)
1604597431070:class(data)
1604597446800:class(data)
1604597467658:typeof(data)
1604597470673:typeof(data)
1604597483555:typeof(data[1,1])
1604597493129:data[1,1]
1604597500895:data[1,2]
1604597504602:typeof(data[1,2])
1604597532323:# load csv
1604597532324:all_df <- read.csv("data/all_processed.csv",header=TRUE, sep = ',',colClasses=rep("double",4))#,check.names=FALSE)
1604597590056:all_df <- read.csv("data/all_processed.csv",header=TRUE, sep = ',',colClasses=rep("double",4))#,check.names=FALSE)
1604597650877:# load csv
1604597650877:all_df <- read.csv("data/all_processed.csv",header=TRUE, sep = ',',stringsAsFactors=FALSE)#colClasses=rep("double",4))#,check.names=FALSE)
1604597654776:View(all_df)
1604597722005:data <- select(all_df, "age","sex","cp","fbs","trestbps","chol","cigs","years","ca","thal","num")
1604597727685:View(data)
1604597746058:data <- data[rowSums(is.na(data)) == 0,]
1604597754341:data <- as.numeric(data)
1604597878024:# load csv
1604597878025:all_df <- read.csv("data/all_processed.csv",header=TRUE, sep = ',',colClasses=rep("double",4),stringsAsFactors=FALSE)#colClasses=rep("double",4))#,check.names=FALSE)
1604597887654:# load csv
1604597887654:all_df <- read.csv("data/all_processed.csv",header=TRUE, sep = ',', colClasses=rep("double",4), stringsAsFactors=FALSE)#colClasses=rep("double",4))#,check.names=FALSE)
1604597914540:View(d)
1604597926444:# load csv
1604597926444:all_df <- read.csv("data/all_processed.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604600017823:all_df <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1604600039739:data <- select(all_df, "age","sex","cp","fbs","trestbps","chol","cigs","years","ca","thal","num")
1604600039745:#data <- tail(data, -3)
1604600039745:# remove rows with missing data
1604600039745:data <- data[rowSums(is.na(data)) == 0,]
1604600051077:typeof(data[1,2])
1604600053866:data[1,2]
1604600062036:data[1,1]
1604600064444:typeof(data[1,1])
1604600077179:# scale data
1604600077179:data_scaled <- scale(data)
1604600093701:View(data_scaled)
1604600108545:net <- model2network(toString(g,"bnlearn"))
1604600110905:fit <- bn.fit( net, as.data.frame(scale(data)) )
1604600115475:fit
1604600183275:smp_size = floor(0.75 *  nrow(data))
1604600183276:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604600183276:train <-  data[train_ind,]
1604600183277:test <- data[-train_ind,]
1604600187227:net <- model2network(toString(g,"bnlearn"))
1604600187230:fit <- bn.fit( net, as.data.frame(scale(train)) )
1604600187232:fit
1604600187235:result <- predict(fit,node="num", data=as.data.frame(scale(test)))
1604600187236:test$num
1604600489503:result
1604600575044:len(result)
1604600591584:length(result)
1604600606187:lenght(test["num"])
1604600618740:test$num
1604600620630:test$num
1604600623397:test$num
1604600625159:test$num
1604600626952:test$num
1604600635298:lenght(test$num)
1604600651618:View(prep)
1604600652577:View(test)
1604600693801:lenght(select(test, "num"))
1604600701518:select(test, "num")
1604600735964:result
1604600770235:select(scale(test), "num")
1604600811252:smp_size = floor(0.75 *  nrow(data_scaled))
1604600811253:train_ind <- sample(seq_len(nrow(data_scaled)), size = smp_size)
1604600811253:train <-  data_scaled[train_ind,]
1604600811254:test <- data_scaled[-train_ind,]
1604600819691:localTests(g,data_scaled,type="cis.chisq", max.conditioning.variables=5)
1604600834809:g <- dagitty('
1604600834810:dag {
1604600834810:age [pos="0.262,-1.314"]
1604600834810:ca [pos="-1.351,0.555"]
1604600834810:chol [pos="-0.728,0.191"]
1604600834811:cigs [pos="-1.247,-0.466"]
1604600834811:cp [pos="0.348,-0.221"]
1604600834811:fbs [pos="-0.121,0.178"]
1604600834811:num [pos="-0.667,1.153"]
1604600834811:sex [pos="-1.310,-1.357"]
1604600834812:thal [pos="-0.962,0.539"]
1604600834812:trestbps [pos="-1.247,0.178"]
1604600834812:years [pos="-0.270,-0.496"]
1604600834812:age -> cigs
1604600834812:age -> years
1604600834812:age -> trestbps
1604600834813:age -> num
1604600834813:age -> ca
1604600834813:age -> chol
1604600834813:ca -> num
1604600834813:chol -> num
1604600834814:chol <-> trestbps
1604600834814:cigs -> chol
1604600834814:cigs -> cp
1604600834814:cigs -> fbs
1604600834814:cigs -> trestbps
1604600834815:cigs <-> years
1604600834815:cp -> num
1604600834815:fbs -> num
1604600834815:sex -> cigs
1604600834815:sex -> cp
1604600834816:sex -> thal
1604600834816:thal -> cp
1604600834816:sex -> years
1604600834816:thal -> num
1604600834817:trestbps -> ca
1604600834817:trestbps -> cp
1604600834817:trestbps -> thal
1604600834817:years -> chol
1604600834817:years -> fbs
1604600834818:years-> trestbps
1604600834818:}
1604600834818:')
1604600834820:plot(g)
1604600851438:net <- model2network(toString(g,"bnlearn"))
1604600853804:fit <- bn.fit( net, as.data.frame(train) )
1604600856930:result <- predict(fit,node="num", data=as.data.frame(test))
1604600860257:result
1604600870833:select(test, "num")
1604600886401:View(test)
1604600966570:test$num
1604600973006:test
1604600995349:oftype(test)
1604601031939:typeof(test)
1604601061234:data.frame(test)
1604601066519:n <- data.frame(test)
1604601070546:View(n)
1604601070857:View(n)
1604601094917:smp_size = floor(0.75 *  nrow(data_scaled))
1604601094917:train_ind <- sample(seq_len(nrow(data_scaled)), size = smp_size)
1604601094918:train <-  data.frame(data_scaled[train_ind,])
1604601094918:test <- data.frame(data_scaled[-train_ind,])
1604601103554:net <- model2network(toString(g,"bnlearn"))
1604601103557:fit <- bn.fit( net, as.data.frame(train) )
1604601103558:fit
1604601103562:result <- predict(fit,node="num", data=as.data.frame(test))
1604601110237:length(result)
1604601117502:lenght(select(test, "num"))
1604601129112:test$num
1604601147177:test_label = test$num
1604601155581:pred_label = result
1604601168310:diff = test_label-pred_label
1604601190015:diff
1604601298103:results_df = set.name(data.frame(results), c=("predicted"))
1604601311705:results_df = setNames(data.frame(results), c=("predicted"))
1604601328123:results_df = setNames(data.frame(results), c("predicted"))
1604601334224:results_df = setNames(data.frame(result), c("predicted"))
1604601338473:View(results_df)
1604601386242:select(test, "num")
1604601394681:results_df = setNames(data.frame(result), select(test, "num"), c("predicted", "true"))
1604601410250:results_df = setNames((data.frame(result), select(test, "num")), c("predicted", "true"))
1604601460439:results_df = setNames(data.frame(result), c("predicted"))
1604601462473:results_df$true=select(test, "num")
1604601535467:results_df$diff=(results_df$true-results_df$result)
1604601550628:results_df$true-results_df$result
1604601555717:results_df$true
1604601558214:results_df$result
1604601566224:results_df$result
1604601577926:results_df$diff=(results_df$true-results_df$predicted)
1604601692066:# visualize results
1604601692067:library(ggplot2)
1604601718033:ggplot(results_df$diff, aes(x=weight)) + geom_histogram()
1604601760108:ggplot(results_df$diff) + geom_histogram()
1604601928661:# visualize results
1604601928661:hist(results_df$diff)
1604602008335:train_scaled <-  data.frame(data_scaled[train_ind,])
1604602008336:test_scaled <- data.frame(data_scaled[-train_ind,])
1604602039655:train <-  data.frame(data[train_ind,])
1604602039656:test <- data.frame(data[-train_ind,])
1604602171213:fit <- bn.fit( net, train_scaled)
1604602171214:result_scaled <- predict(fit,node="num", data=test_scaled)
1604602171214:# get accuracy of model
1604602171215:results_df_scaled = setNames(result_scaled, c("predicted"))
1604602171215:results_df_scaled$true=select(test_scaled, "num")
1604602171217:results_df_scaled$diff=(results_df_scaled$true-results_df_scaled$predicted)
1604602178031:fit <- bn.fit( net, train_scaled)
1604602180665:result_scaled <- predict(fit,node="num", data=test_scaled)
1604602183231:results_df_scaled = setNames(result_scaled, c("predicted"))
1604602186807:results_df_scaled$true=select(test_scaled, "num")
1604602253545:results_df_scaled$diff=(results_df_scaled$true-results_df_scaled$predicted)
1604602276405:hist(results_df$diff)
1604602285672:# visualize results
1604602285672:hist(results_df_scalde$diff)
1604602293167:# visualize results
1604602293167:hist(results_df_scaled$diff)
1604602321561:# visualize results
1604602321561:hist(results_df_scaled$diff.num)
1604602330203:ed
1604602334388:# visualize results
1604602334388:hist(results_df_scaled$diff)
1604602341048:results_df_scaled$diff
1604602352002:View(train_scaled)
1604602356335:View(results_df_scaled)
1604602409607:fit <- bn.fit( net, as.data.frame(train) )
1604602412286:result_scaled <- predict(fit,node="num", data=as.data.frame(test))
1604602416941:results_df_scaled = setNames(data.frame(result_scaled), c("predicted"))
1604602433781:View(results_df_scaled)
1604602439352:results_df_scaled$true=select(test_scaled, "num")
1604602445045:results_df_scaled$diff=(results_df_scaled$true-results_df_scaled$predicted)
1604602479764:smp_size = floor(0.75 *  nrow(data_scaled))
1604602479764:train_ind <- sample(seq_len(nrow(data_scaled)), size = smp_size)
1604602479765:train_scaled <-  (data_scaled[train_ind,])
1604602479765:test_scaled <- (data_scaled[-train_ind,])
1604602479765:train <-  (data[train_ind,])
1604602479766:test <- (data[-train_ind,])
1604602486222:fit <- bn.fit( net, as.data.frame(train) )
1604602486223:result_scaled <- predict(fit,node="num", data=as.data.frame(test))
1604602486224:# get accuracy of model
1604602486224:results_df_scaled = setNames(data.frame(result_scaled), c("predicted"))
1604602486225:results_df_scaled$true=select(test_scaled, "num")
1604602486227:results_df_scaled$diff=(results_df_scaled$true-results_df_scaled$predicted)
1604602494658:fit <- bn.fit( net, as.data.frame(train) )
1604602511648:fit <- bn.fit( net, as.data.frame(train_scaled) )
1604602514032:result_scaled <- predict(fit,node="num", data=as.data.frame(test_scaled))
1604602519297:results_df_scaled = setNames(data.frame(result_scaled), c("predicted"))
1604602521905:results_df_scaled$true=select(test_scaled, "num")
1604602568100:results_df_scaled$true=select(data.frame(test_scaled), "num")
1604602573546:results_df_scaled$diff=(results_df_scaled$true-results_df_scaled$predicted)
1604602589767:# visualize results
1604602589768:hist(results_df_scaled$diff)
1604602654749:fit <- bn.fit( net, as.data.frame(train) )
1604602654751:result <- predict(fit,node="num", data=as.data.frame(test))
1604602654751:# get accuracy of model
1604602654751:results_df = setNames(data.frame(result), c("predicted"))
1604602654752:results_df$true=select(data.frame(test), "num")
1604602654754:results_df$diff=(results_df$true-results_df$predicted)
1604602654755:# visualize results
1604602654755:hist(results_df$diff)
1604602695647:# visualize results
1604602695647:hist(results_df$diff,breaks=20, main="With breaks=20")
1604602699179:# visualize results
1604602699179:hist(results_df$diff,breaks=20, main="With breaks=20")
1604602837797:# compare
1604602837797:bins <- rbind(results_df_scaled$diff, results_df$diff)
1604602840159:ggplot(bins, aes(length, fill = veg)) + geom_density(alpha = 0.2)
1604602864848:ggplot(bins, aes(length, fill = num)) + geom_density(alpha = 0.2)
1604602889532:View(bins)
1604602891895:View(bins)
1604602912991:carrots <- data.frame(length = rnorm(100000, 6, 2))
1604602914365:cukes <- data.frame(length = rnorm(50000, 7, 2.5))
1604602916119:# Now, combine your two dataframes into one.
1604602916119:# First make a new column in each that will be
1604602916119:# a variable to identify where they came from later.
1604602916119:carrots$veg <- 'carrot'
1604602916906:cukes$veg <- 'cuke'
1604602920668:View(carrots)
1604603010890:results_df_scaled$type<-"scaled"
1604603013231:results_df$type<-"normal"
1604603037667:# compare
1604603037667:bins <- rbind(results_df_scaled, results_df)
1604603048001:View(bins)
1604603067593:# and combine into your new data frame vegLengths
1604603067593:vegLengths <- rbind(carrots, cukes)
1604603069277:View(vegLengths)
1604603156403:scaled<-results_df_scaled$diff
1604603156403:scaled$type<-"scaled"
1604603156403:normal<-results_df$diff
1604603156404:normal$type<-"normal"
1604603169857:bins <- rbind(scaled, normal)
1604603177819:ggplot(bins, aes(length, fill = type)) + geom_density(alpha = 0.2)
1604603184983:View(bins)
1604603219830:ggplot(bins, aes(num, fill = type)) + geom_density(alpha = 0.2)
1604603360885:ggplot(bins, aes(num, fill = type))
1604603360960:+ geom_density(alpha = 0.2)
1604603360963:+ geom_histogram(fill="white", position="dodge")
1604603360966:+ geom_vline(data=mu, aes(xintercept=grp.mean, color=sex), linetype="dashed"
1604603360966:)
1604603383250:ggplot(bins, aes(num, fill = type))
1604603383325:+ geom_density(alpha = 0.2)
1604603383328:+ geom_histogram(fill="white", position="dodge")
1604603383330:)
1604603389462:ggplot(bins, aes(num, fill = type))
1604603389561:+ geom_density(alpha = 0.2)
1604603389563:+ geom_histogram(fill="white", position="dodge")
1604603408361:ggplot(bins, aes(num, fill = type)) +
1604603408362:geom_density(alpha = 0.2) +
1604603408362:geom_histogram(fill="white", position="dodge")
1604603439680:ggplot(bins, aes(num, fill = type)) +
1604603439680:geom_density(alpha = 0.2) +
1604603439681:geom_histogram(fill="white", alpha=0.5, position="identity")
1604603459212:ggplot(bins, aes(num, fill = type)) +
1604603459212:#geom_density(alpha = 0.2) +
1604603459212:geom_histogram(alpha=0.5, position="identity")
1604603496607:ggplot(bins, aes(num, fill = type)) +
1604603496608:#geom_density(alpha = 0.2) +
1604603496608:geom_histogram(alpha=0.5, position="dodge")
1604603505899:bins <- rbind(scaled, normal)
1604603505900:ggplot(bins, aes(num, fill = type)) +
1604603505900:#geom_density(alpha = 0.2) +
1604603505900:geom_histogram(alpha=0.5, position="identity")
1604603529279:ggplot(bins, aes(num, fill = type)) +
1604603529279:#geom_density(alpha = 0.2) +
1604603529280:geom_histogram(fill="white", alpha=0.5, position="identity")
1604603536748:ggplot(bins, aes(num, fill = type)) +
1604603536748:#geom_density(alpha = 0.2) +
1604603536748:geom_histogram(fill="white", alpha=0.5, position="identity")
1604603566696:ggplot(bins, aes(num, fill = type)) + geom_density(alpha = 0.2)
1604921203234:library(dplyr)
1604921203601:library(dagitty)
1604921203792:library(Hmisc)
1604921205300:library(caTools)
1604921210181:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt")
1604921212879:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604921216054:head(d)
1604921218403:View(d)
1604921232163:data <- select(all_df, "age","sex","cp","fbs","trestbps","chol","cigs","years","ca","thal","num")
1604921232164:#data <- tail(data, -3)
1604921232164:# remove rows with missing data
1604921232164:data <- data[rowSums(is.na(data)) == 0,]
1604921232198:#data <- as.numeric(data)
1604921232198:# scale data
1604921232198:data_scaled <- scale(data)
1604921235468:smp_size = floor(0.75 *  nrow(data_scaled))
1604921235468:train_ind <- sample(seq_len(nrow(data_scaled)), size = smp_size)
1604921235469:train_scaled <-  (data_scaled[train_ind,])
1604921235469:test_scaled <- (data_scaled[-train_ind,])
1604921235469:train <-  (data[train_ind,])
1604921235470:test <- (data[-train_ind,])
1604921246384:train_ind <- sample(seq_len(nrow(data_scaled)), size = smp_size)
1604921254192:data <- select(all_df, "age","sex","cp","fbs","trestbps","chol","cigs","years","ca","thal","num")
1604921275635:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1604921279078:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1604921279084:nrow(prep)
1604921279085:nrow(subset)
1604921293505:amountBins <- 3
1604921293505:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1604921293506:continuousVars <- unlist(continuousVars)
1604921293506:for(i in 1:length(continuousVars)){
1604921293506:varname <- continuousVars[i]
1604921293506:intervalValues.varname <- list()
1604921293507:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1604921293507:for(j in 1:length(intervals.varname)){
1604921293507:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1604921293508:intervals.fst <- intervals.t[1]
1604921293508:intervals.snd <- intervals.t[2]
1604921293508:nc.1 <- nchar(intervals.fst)
1604921293508:nc.2 <- nchar(intervals.snd)
1604921293509:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1604921293509:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1604921293510:}
1604921293510:intervalValues.varname <- unique(unlist(intervalValues.varname))
1604921293510:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1604921293511:intervalValues.varname[1] = intervalValues.varname[1]-1
1604921293511:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1604921293512:colname.D <-  paste(varname, ".discrete",sep="")
1604921293512:colname.N <- paste(varname, ".numeric", sep = "")
1604921293513:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1604921293513:prep[colname.N] <- as.numeric( prep[[colname.D]])
1604921293514:}
1604921293548:#### make target variable binary #####
1604921293548:## 0 --> 0 & 1,2,3 --> 1 #######
1604921293549:num.binary <- prep$num
1604921293549:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604921293551:#Make DAG
1604921293552:g <- dagitty('
1604921293552:dag {
1604921293552:age.numeric [pos="0.262,-1.314"]
1604921293552:ca [pos="-1.351,0.555"]
1604921293552:chol.numeric [pos="-0.728,0.191"]
1604921293553:cigs.numeric [pos="-1.247,-0.466"]
1604921293553:cp [pos="0.348,-0.221"]
1604921293553:fbs [pos="-0.121,0.178"]
1604921293553:num [pos="-0.667,1.153"]
1604921293553:sex [pos="-1.310,-1.357"]
1604921293553:thal [pos="-0.962,0.539"]
1604921293554:trestbps.numeric [pos="-1.247,0.178"]
1604921293554:years.numeric [pos="-0.270,-0.496"]
1604921293554:age.numeric -> cigs.numeric
1604921293554:age.numeric -> years.numeric
1604921293554:age.numeric -> trestbps.numeric
1604921293555:age.numeric -> num
1604921293555:age.numeric -> ca
1604921293555:age.numeric -> chol.numeric
1604921293555:ca -> num
1604921293555:chol.numeric -> num
1604921293555:chol.numeric <-> trestbps.numeric
1604921293556:cigs.numeric -> chol.numeric
1604921293556:cigs.numeric -> cp
1604921293556:cigs.numeric -> fbs
1604921293556:cigs.numeric -> trestbps.numeric
1604921293557:cigs.numeric <-> years.numeric
1604921293557:cp -> num
1604921293557:fbs -> num
1604921293557:sex -> cigs.numeric
1604921293557:sex -> cp
1604921293557:sex -> thal
1604921293558:thal -> cp
1604921293558:sex -> years.numeric
1604921293558:thal -> num
1604921293558:trestbps.numeric -> ca
1604921293559:trestbps.numeric -> cp
1604921293559:trestbps.numeric -> thal
1604921293559:years.numeric -> chol.numeric
1604921293559:years.numeric -> fbs
1604921293559:years.numeric -> trestbps.numeric
1604921293560:}
1604921293560:')
1604921293590:#Make DAG
1604921293590:g.binary <- dagitty('
1604921293591:dag {
1604921293591:age.numeric [pos="0.262,-1.314"]
1604921293591:ca [pos="-1.351,0.555"]
1604921293591:chol.numeric [pos="-0.728,0.191"]
1604921293591:cigs.numeric [pos="-1.247,-0.466"]
1604921293591:cp [pos="0.348,-0.221"]
1604921293592:fbs [pos="-0.121,0.178"]
1604921293592:num.binary [pos="-0.667,1.153"]
1604921293592:sex [pos="-1.310,-1.357"]
1604921293592:thal [pos="-0.962,0.539"]
1604921293592:trestbps.numeric [pos="-1.247,0.178"]
1604921293592:years.numeric [pos="-0.270,-0.496"]
1604921293593:age.numeric -> cigs.numeric
1604921293593:age.numeric -> years.numeric
1604921293593:age.numeric -> trestbps.numeric
1604921293593:age.numeric -> num.binary
1604921293593:age.numeric -> ca
1604921293593:age.numeric -> chol.numeric
1604921293593:ca -> num.binary
1604921293594:chol.numeric -> num.binary
1604921293594:chol.numeric <-> trestbps.numeric
1604921293594:cigs.numeric -> chol.numeric
1604921293594:cigs.numeric -> cp
1604921293594:cigs.numeric -> fbs
1604921293594:cigs.numeric -> trestbps.numeric
1604921293595:cigs.numeric <-> years.numeric
1604921293595:cp -> num.binary
1604921293595:fbs -> num.binary
1604921293595:sex -> cigs.numeric
1604921293595:sex -> cp
1604921293596:sex -> thal
1604921293596:thal -> cp
1604921293596:sex -> years.numeric
1604921293596:thal -> num.binary
1604921293596:trestbps.numeric -> ca
1604921293596:trestbps.numeric -> cp
1604921293597:trestbps.numeric -> thal
1604921293597:years.numeric -> chol.numeric
1604921293597:years.numeric -> fbs
1604921293597:years.numeric -> trestbps.numeric
1604921293597:}
1604921293598:')
1604921293602:#Execute local tests
1604921293602:localTests(g,prep,type="cis.chisq", max.conditioning.variables=5)
1604921293856:localTests(g.binary,prep,type="cis.chisq")#, max.conditioning.variables=5)
1604921294030:#impliedConditionalIndependencies(g)
1604921294030:##################################
1604921294030:## Create training and test set ##
1604921294031:##################################
1604921294031:set.seed(13)
1604921294031:#Select only variables we need (numeric)
1604921294031:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1604921294036:# split the data
1604921294036:smp_size = floor(0.75 *  nrow(data))
1604921294036:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604921294037:train <-  data[train_ind,]
1604921294037:test <- data[-train_ind,]
1604921294037:train_neg = sum(train$num.binary==0)
1604921294037:train_pos = sum(train$num.binary==1)
1604921294037:test_neg = sum(test$num.binary==0)
1604921294038:test_pos = sum(test$num.binary==1)
1604921294038:train_ratio = train_pos/train_neg
1604921294038:test_ratio = test_pos/test_neg
1604921294038:##### INFERENCE #######
1604921294038:##### Naive Bayes #####
1604921294038:library(naivebayes)
1604921294050:fit <- bn.fit(net, as.data.frame(train))
1604921294051:result <- predict(fit,node="num", data=test)
1604921294051:test$num
1604921317619:library(dplyr)
1604921317620:library(dagitty)
1604921317620:library(Hmisc)
1604921317620:library(caTools)
1604921320454:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt")
1604921323177:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604921326056:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1604921329972:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1604921329974:nrow(prep)
1604921329974:nrow(subset)
1604921333908:amountBins <- 3
1604921339535:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1604921339535:continuousVars <- unlist(continuousVars)
1604921339535:for(i in 1:length(continuousVars)){
1604921339535:varname <- continuousVars[i]
1604921339536:intervalValues.varname <- list()
1604921339536:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1604921339536:for(j in 1:length(intervals.varname)){
1604921339537:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1604921339537:intervals.fst <- intervals.t[1]
1604921339537:intervals.snd <- intervals.t[2]
1604921339537:nc.1 <- nchar(intervals.fst)
1604921339538:nc.2 <- nchar(intervals.snd)
1604921339538:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1604921339538:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1604921339539:}
1604921339539:intervalValues.varname <- unique(unlist(intervalValues.varname))
1604921339539:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1604921339540:intervalValues.varname[1] = intervalValues.varname[1]-1
1604921339540:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1604921339541:colname.D <-  paste(varname, ".discrete",sep="")
1604921339541:colname.N <- paste(varname, ".numeric", sep = "")
1604921339542:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1604921339542:prep[colname.N] <- as.numeric( prep[[colname.D]])
1604921339543:}
1604921344079:num.binary <- prep$num
1604921344080:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604921350290:g <- dagitty('
1604921350291:dag {
1604921350291:age.numeric [pos="0.262,-1.314"]
1604921350291:ca [pos="-1.351,0.555"]
1604921350291:chol.numeric [pos="-0.728,0.191"]
1604921350292:cigs.numeric [pos="-1.247,-0.466"]
1604921350292:cp [pos="0.348,-0.221"]
1604921350292:fbs [pos="-0.121,0.178"]
1604921350292:num [pos="-0.667,1.153"]
1604921350292:sex [pos="-1.310,-1.357"]
1604921350293:thal [pos="-0.962,0.539"]
1604921350293:trestbps.numeric [pos="-1.247,0.178"]
1604921350293:years.numeric [pos="-0.270,-0.496"]
1604921350293:age.numeric -> cigs.numeric
1604921350293:age.numeric -> years.numeric
1604921350294:age.numeric -> trestbps.numeric
1604921350294:age.numeric -> num
1604921350294:age.numeric -> ca
1604921350294:age.numeric -> chol.numeric
1604921350294:ca -> num
1604921350295:chol.numeric -> num
1604921350295:chol.numeric <-> trestbps.numeric
1604921350295:cigs.numeric -> chol.numeric
1604921350295:cigs.numeric -> cp
1604921350295:cigs.numeric -> fbs
1604921350296:cigs.numeric -> trestbps.numeric
1604921350296:cigs.numeric <-> years.numeric
1604921350296:cp -> num
1604921350296:fbs -> num
1604921350296:sex -> cigs.numeric
1604921350297:sex -> cp
1604921350297:sex -> thal
1604921350297:thal -> cp
1604921350297:sex -> years.numeric
1604921350297:thal -> num
1604921350298:trestbps.numeric -> ca
1604921350298:trestbps.numeric -> cp
1604921350298:trestbps.numeric -> thal
1604921350298:years.numeric -> chol.numeric
1604921350299:years.numeric -> fbs
1604921350299:years.numeric -> trestbps.numeric
1604921350299:}
1604921350299:')
1604921350302:#Make DAG
1604921350302:g.binary <- dagitty('
1604921350302:dag {
1604921350302:age.numeric [pos="0.262,-1.314"]
1604921350303:ca [pos="-1.351,0.555"]
1604921350303:chol.numeric [pos="-0.728,0.191"]
1604921350303:cigs.numeric [pos="-1.247,-0.466"]
1604921350303:cp [pos="0.348,-0.221"]
1604921350303:fbs [pos="-0.121,0.178"]
1604921350304:num.binary [pos="-0.667,1.153"]
1604921350304:sex [pos="-1.310,-1.357"]
1604921350304:thal [pos="-0.962,0.539"]
1604921350304:trestbps.numeric [pos="-1.247,0.178"]
1604921350304:years.numeric [pos="-0.270,-0.496"]
1604921350305:age.numeric -> cigs.numeric
1604921350305:age.numeric -> years.numeric
1604921350305:age.numeric -> trestbps.numeric
1604921350305:age.numeric -> num.binary
1604921350305:age.numeric -> ca
1604921350306:age.numeric -> chol.numeric
1604921350306:ca -> num.binary
1604921350306:chol.numeric -> num.binary
1604921350306:chol.numeric <-> trestbps.numeric
1604921350306:cigs.numeric -> chol.numeric
1604921350306:cigs.numeric -> cp
1604921350307:cigs.numeric -> fbs
1604921350307:cigs.numeric -> trestbps.numeric
1604921350307:cigs.numeric <-> years.numeric
1604921350307:cp -> num.binary
1604921350307:fbs -> num.binary
1604921350308:sex -> cigs.numeric
1604921350308:sex -> cp
1604921350308:sex -> thal
1604921350308:thal -> cp
1604921350308:sex -> years.numeric
1604921350308:thal -> num.binary
1604921350309:trestbps.numeric -> ca
1604921350309:trestbps.numeric -> cp
1604921350309:trestbps.numeric -> thal
1604921350309:years.numeric -> chol.numeric
1604921350309:years.numeric -> fbs
1604921350310:years.numeric -> trestbps.numeric
1604921350310:}
1604921350310:')
1604921353191:localTests(g,prep,type="cis.chisq", max.conditioning.variables=5)
1604921355892:localTests(g.binary,prep,type="cis.chisq")#, max.conditioning.variables=5)
1604921392073:library(naivebayes)
1604921402176:set.seed(13)
1604921402176:#Select only variables we need (numeric)
1604921402176:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1604921402182:# split the data
1604921402182:smp_size = floor(0.75 *  nrow(data))
1604921402183:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604921402183:train <-  data[train_ind,]
1604921402183:test <- data[-train_ind,]
1604921402184:train_neg = sum(train$num.binary==0)
1604921402184:train_pos = sum(train$num.binary==1)
1604921402184:test_neg = sum(test$num.binary==0)
1604921402184:test_pos = sum(test$num.binary==1)
1604921402185:train_ratio = train_pos/train_neg
1604921402185:test_ratio = test_pos/test_neg
1604921408588:library(naivebayes)
1604921507746:library(naivebayes)
1604921556776:View(train)
1604921605984:head(train)
1604921800427:m <- naive_bayes( num ~ sex + cp + fbs + ca + thal + age.numeric + chol.numeric + cigs.numeric + years.numeric + trestbps.numeric, data=train )
1604921890024:library( bayesianNetworks )
1604921892789:set.seed(123)
1604921894861:training.data <- simulate_sprinkler( 500 )
1604921897742:test.data <- simulate_sprinkler( 1000 )
1604921901582:View(training.data)
1604922161465:fit <- bn.fit(net, as.data.frame(train))
1604922167906:library(naivebayes)
1604922172535:fit <- bn.fit(net, as.data.frame(train))
1604922177574:library(dplyr)
1604922177575:library(dagitty)
1604922177575:library(Hmisc)
1604922177575:library(caTools)
1604922199197:library(bnlearn)
1604922204260:fit <- bn.fit(net, as.data.frame(train))
1604922233966:net <- model2network(toString(g,"bnlearn"))
1604922237492:fit <- bn.fit(net, as.data.frame(train))
1604922240756:result <- predict(fit,node="num", data=test)
1604922243932:test$num
1604922404852:results_df= setNames(data.frame(result), c("predicted"))
1604922409974:View(results_df)
1604922459368:results_df$true=select(data.frame(test), "num")
1604922784963:fit
1604922930353:# plot ROC
1604922930353:plot (roc(test$num, predict))
1604923004244:library( pROC )
1604923008068:plot (roc(test$num, predict))
1604923140782:# plot ROC
1604923140782:plot (mulitclass.roc(test$num, predict))
1604923149757:# plot ROC
1604923149757:plot (multiclass.roc(test$num, predict))
1604923435165:m <- naive_bayes( WetGrass ~ Cloudy + Rain + Sprinkler, data=training.data )
1604923438428:y <- predict( m, newdata=test.data, type="prob" )
1604923454592:View(y)
1604923482918:y <- y[,2]
1604923485849:plot( roc(test.data$WetGrass,y) )
1604923592757:library( multipROC )
1604923703006:#install.packages("dplyr") #Comment out if already installed
1604923703007:#install.packages("dagitty") #Comment out if already installed
1604923703007:#install.packages("Hmisc")
1604923703007:#install.packages("caTools")
1604923703007:#install.packages("naivebayes")
1604923703008:#install.packages("bnlearn")
1604923703008:install.packages("pROC")
1604923714887:install.packages("pROC")
1604923730887:library( pROC )
1604923743215:# plot ROC
1604923743215:plot (multiclass.roc(test$num, predict))
1604923828964:fit <- bn.fit(net, as.data.frame(train))
1604923834618:library(bnlearn)
1604923836843:##### INFERENCE #######
1604923836843:##### Naive Bayes #####
1604923836843:library(naivebayes)
1604923838125:net <- model2network(toString(g,"bnlearn"))
1604923839168:fit <- bn.fit(net, as.data.frame(train))
1604923853154:#Make DAG
1604923853154:g <- dagitty('
1604923853155:dag {
1604923853155:age.numeric [pos="0.262,-1.314"]
1604923853155:ca [pos="-1.351,0.555"]
1604923853155:chol.numeric [pos="-0.728,0.191"]
1604923853155:cigs.numeric [pos="-1.247,-0.466"]
1604923853156:cp [pos="0.348,-0.221"]
1604923853156:fbs [pos="-0.121,0.178"]
1604923853156:num [pos="-0.667,1.153"]
1604923853156:sex [pos="-1.310,-1.357"]
1604923853156:thal [pos="-0.962,0.539"]
1604923853157:trestbps.numeric [pos="-1.247,0.178"]
1604923853157:years.numeric [pos="-0.270,-0.496"]
1604923853157:age.numeric -> cigs.numeric
1604923853157:age.numeric -> years.numeric
1604923853157:age.numeric -> trestbps.numeric
1604923853158:age.numeric -> num
1604923853158:age.numeric -> ca
1604923853158:age.numeric -> chol.numeric
1604923853158:ca -> num
1604923853158:chol.numeric -> num
1604923853159:chol.numeric <-> trestbps.numeric
1604923853159:cigs.numeric -> chol.numeric
1604923853159:cigs.numeric -> cp
1604923853159:cigs.numeric -> fbs
1604923853159:cigs.numeric -> trestbps.numeric
1604923853160:cigs.numeric <-> years.numeric
1604923853160:cp -> num
1604923853160:fbs -> num
1604923853160:sex -> cigs.numeric
1604923853160:sex -> cp
1604923853161:sex -> thal
1604923853161:thal -> cp
1604923853161:sex -> years.numeric
1604923853161:thal -> num
1604923853162:trestbps.numeric -> ca
1604923853162:trestbps.numeric -> cp
1604923853162:trestbps.numeric -> thal
1604923853162:years.numeric -> chol.numeric
1604923853162:years.numeric -> fbs
1604923853163:years.numeric -> trestbps.numeric
1604923853163:}
1604923853163:')
1604923861976:library(dplyr)
1604923862285:library(dagitty)
1604923862358:library(Hmisc)
1604923862950:library(caTools)
1604923862967:#Load data
1604923862967:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt")
1604923862967:# load csv
1604923862967:#all_df <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1604923862968:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604923862973:head(d)
1604923862984:#sd <- select(d,"cigs")
1604923862984:#Select right variables
1604923862985:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1604923862999:#Filter out mising values
1604923862999:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1604923863005:nrow(prep)
1604923863006:nrow(subset)
1604923863006:#Plot data continous data
1604923863006:#hist(prep$age)
1604923863006:#hist(prep$chol)
1604923863007:#hist(prep$cigs)
1604923863007:#hist(prep$years)
1604923863007:#hist(prep$trestbps)
1604923863007:#Bin continous data into categorical data of 3 bins.
1604923863007:amountBins <- 3
1604923863008:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1604923863008:continuousVars <- unlist(continuousVars)
1604923863008:for(i in 1:length(continuousVars)){
1604923863008:varname <- continuousVars[i]
1604923863009:intervalValues.varname <- list()
1604923863009:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1604923863009:for(j in 1:length(intervals.varname)){
1604923863009:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1604923863010:intervals.fst <- intervals.t[1]
1604923863010:intervals.snd <- intervals.t[2]
1604923863010:nc.1 <- nchar(intervals.fst)
1604923863011:nc.2 <- nchar(intervals.snd)
1604923863011:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1604923863011:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1604923863012:}
1604923863012:intervalValues.varname <- unique(unlist(intervalValues.varname))
1604923863012:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1604923863013:intervalValues.varname[1] = intervalValues.varname[1]-1
1604923863013:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1604923863014:colname.D <-  paste(varname, ".discrete",sep="")
1604923863014:colname.N <- paste(varname, ".numeric", sep = "")
1604923863015:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1604923863015:prep[colname.N] <- as.numeric( prep[[colname.D]])
1604923863015:}
1604923863049:#### make target variable binary #####
1604923863049:## 0 --> 0 & 1,2,3 --> 1 #######
1604923863050:num.binary <- prep$num
1604923863050:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604923863052:#Make DAG
1604923863053:g <- dagitty('
1604923863053:dag {
1604923863053:age.numeric [pos="0.262,-1.314"]
1604923863053:ca [pos="-1.351,0.555"]
1604923863053:chol.numeric [pos="-0.728,0.191"]
1604923863054:cigs.numeric [pos="-1.247,-0.466"]
1604923863054:cp [pos="0.348,-0.221"]
1604923863054:fbs [pos="-0.121,0.178"]
1604923863054:num [pos="-0.667,1.153"]
1604923863054:sex [pos="-1.310,-1.357"]
1604923863054:thal [pos="-0.962,0.539"]
1604923863055:trestbps.numeric [pos="-1.247,0.178"]
1604923863055:years.numeric [pos="-0.270,-0.496"]
1604923863055:age.numeric -> cigs.numeric
1604923863055:age.numeric -> years.numeric
1604923863055:age.numeric -> trestbps.numeric
1604923863055:age.numeric -> num
1604923863056:age.numeric -> ca
1604923863056:age.numeric -> chol.numeric
1604923863056:ca -> num
1604923863056:chol.numeric -> num
1604923863056:chol.numeric <-> trestbps.numeric
1604923863056:cigs.numeric -> chol.numeric
1604923863057:cigs.numeric -> cp
1604923863057:cigs.numeric -> fbs
1604923863057:cigs.numeric -> trestbps.numeric
1604923863057:cigs.numeric <-> years.numeric
1604923863057:cp -> num
1604923863058:fbs -> num
1604923863058:sex -> cigs.numeric
1604923863058:sex -> cp
1604923863058:sex -> thal
1604923863058:thal -> cp
1604923863058:sex -> years.numeric
1604923863059:thal -> num
1604923863059:trestbps.numeric -> ca
1604923863059:trestbps.numeric -> cp
1604923863059:trestbps.numeric -> thal
1604923863059:years.numeric -> chol.numeric
1604923863060:years.numeric -> fbs
1604923863060:years.numeric -> trestbps.numeric
1604923863060:}
1604923863060:')
1604923863089:#Make DAG
1604923863090:g.binary <- dagitty('
1604923863090:dag {
1604923863090:age.numeric [pos="0.262,-1.314"]
1604923863090:ca [pos="-1.351,0.555"]
1604923863090:chol.numeric [pos="-0.728,0.191"]
1604923863090:cigs.numeric [pos="-1.247,-0.466"]
1604923863091:cp [pos="0.348,-0.221"]
1604923863091:fbs [pos="-0.121,0.178"]
1604923863091:num.binary [pos="-0.667,1.153"]
1604923863091:sex [pos="-1.310,-1.357"]
1604923863091:thal [pos="-0.962,0.539"]
1604923863091:trestbps.numeric [pos="-1.247,0.178"]
1604923863092:years.numeric [pos="-0.270,-0.496"]
1604923863092:age.numeric -> cigs.numeric
1604923863092:age.numeric -> years.numeric
1604923863092:age.numeric -> trestbps.numeric
1604923863092:age.numeric -> num.binary
1604923863093:age.numeric -> ca
1604923863093:age.numeric -> chol.numeric
1604923863093:ca -> num.binary
1604923863093:chol.numeric -> num.binary
1604923863093:chol.numeric <-> trestbps.numeric
1604923863093:cigs.numeric -> chol.numeric
1604923863094:cigs.numeric -> cp
1604923863094:cigs.numeric -> fbs
1604923863094:cigs.numeric -> trestbps.numeric
1604923863094:cigs.numeric <-> years.numeric
1604923863094:cp -> num.binary
1604923863094:fbs -> num.binary
1604923863095:sex -> cigs.numeric
1604923863095:sex -> cp
1604923863095:sex -> thal
1604923863095:thal -> cp
1604923863095:sex -> years.numeric
1604923863096:thal -> num.binary
1604923863096:trestbps.numeric -> ca
1604923863096:trestbps.numeric -> cp
1604923863096:trestbps.numeric -> thal
1604923863096:years.numeric -> chol.numeric
1604923863096:years.numeric -> fbs
1604923863097:years.numeric -> trestbps.numeric
1604923863097:}
1604923863097:')
1604923863101:#Execute local tests
1604923863101:localTests(g,prep,type="cis.chisq", max.conditioning.variables=5)
1604923863379:localTests(g.binary,prep,type="cis.chisq")#, max.conditioning.variables=5)
1604923863577:#impliedConditionalIndependencies(g)
1604923863578:##################################
1604923863578:## Create training and test set ##
1604923863578:##################################
1604923863578:set.seed(13)
1604923863579:#Select only variables we need (numeric)
1604923863579:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1604923863584:# split the data
1604923863584:smp_size = floor(0.75 *  nrow(data))
1604923863584:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604923863585:train <-  data[train_ind,]
1604923863585:test <- data[-train_ind,]
1604923863585:train_neg = sum(train$num.binary==0)
1604923863585:train_pos = sum(train$num.binary==1)
1604923863585:test_neg = sum(test$num.binary==0)
1604923863586:test_pos = sum(test$num.binary==1)
1604923863586:train_ratio = train_pos/train_neg
1604923863586:test_ratio = test_pos/test_neg
1604923863586:##### INFERENCE #######
1604923863586:##### Naive Bayes #####
1604923863586:library(naivebayes)
1604923863587:library(bnlearn)
1604923863587:library( pROC )
1604923863587:net <- model2network(toString(g,"bnlearn"))
1604923863591:fit <- bn.fit(net, as.data.frame(train))
1604923863592:fit
1604923863594:predict <- predict(fit,node="num", data=test)
1604923863595:test$num
1604923869981:results_df= setNames(data.frame(predict), c("predicted"))
1604923876511:results_df$true=select(data.frame(test), "num")
1604924166093:# plot ROC
1604924166094:plot (multiclass.roc(test$num, predict))
1604924252314:results_df[1,1]
1604924265122:oftype(results_df[1,1])
1604924268754:typeof(results_df[1,1])
1604924288751:# plot ROC
1604924288752:plot (multiclass.roc(results_df$true, results_df$predicted))
1604924316775:# plot ROC
1604924316776:plot (roc(results_df$true, results_df$predicted))
1604924586377:requireNamespace("nnet")
1604924589074:data(iris)
1604924591552:iris.sample <- sample(1:150)
1604924593778:iris.train <- iris[iris.sample[1:75],]
1604924596545:iris.test <- iris[iris.sample[76:150],]
1604924599763:mn.net <- nnet::multinom(Species ~ ., iris.train)
1604924604106:iris.predictions <- predict(mn.net, newdata=iris.test, type="prob")
1604924608493:head(iris.predictions)
1604924812438:fit <- bn.fit(net, as.data.frame(scale(train)))
1604924816241:fit
1604925052222:predict <- predict(fit,node="num", data=test)
1604925071414:results_df= setNames(data.frame(predict), c("predicted"))
1604925074406:results_df$true=select(data.frame(test), "num")
1604925211368:# grades bayes model
1604925211368:library(dplyr)
1604925212367:library(dagitty)
1604925214675:d <- read.csv("grades.csv",colClasses=rep("double",4))
1604925233057:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Assignments")
1604925235465:d <- read.csv("grades.csv",colClasses=rep("double",4))
1604925237984:g <- dagitty("dag{ HighSchool -> College -> {GRE -> GraduateSchool}}")
1604925240099:plot(graphLayout(g))
1604925248514:impliedConditionalIndependencies(g)
1604925295655:summary( lm( GRE ~ HighSchool + College, as.data.frame(scale(d)) ) )
1604925380559:localTests(g,d)
1604925509915:g2 <- dagitty("dag{ HighSchool -> {College -> {GRE -> GraduateSchool}}}")
1604925510394:plot(graphLayout(g2))
1604925550328:"
1604925557966:plot(graphLayout(g))
1604925562364:plot(graphLayout(g))
1604925563927:g <- dagitty("dag{ HighSchool -> College -> {GRE -> GraduateSchool}}")
1604925564646:plot(graphLayout(g))
1604925575304:c
1604925577372:plot(graphLayout(g))
1604925579418:g <- dagitty("dag{ HighSchool -> College -> {GRE -> GraduateSchool}}")
1604925580050:plot(graphLayout(g))
1604925676014:g2 <- dagitty("dag{ HighSchool -> {College -> {GRE -> GraduateSchool}}}")
1604925676488:plot(graphLayout(g2))
1604925843847:predict(fit,node="College", data=data.frame(HighSchool=as.double(1:100)))
1604925873007:net <- model2n etwork(toString(g2,"bnlearn"))
1604925886470:library(bnlearn)
1604925890017:net <- model2n etwork(toString(g2,"bnlearn"))
1604925913326:library(bnlearn)
1604925921203:net <- model2network(toString(g2,"bnlearn"))
1604925923305:fit <- bn.fit( net, as.data.frame(scale(d)) )
1604925924451:fit
1604925927211:predict(fit,node="College", data=data.frame(HighSchool=as.double(1:100)))
1604925954778:x <- data.frame(predict)
1604925958713:View(x)
1604926051542:View(d)
1604926173976:college= setNames(data.frame(predict), c("college_predicted"))
1604926174581:college$college_true=select(data.frame(test), "College")
1604926181626:college$college_true=select(data.frame(d), "College")
1604926199963:select(data.frame(d), "College")
1604926214815:View(college)
1604926253379:select(data.frame(d(1:100)), "College")
1604926271898:predict(fit,node="College", data=data.frame(HighSchool=as.double(:)))
1604926282278:d(-1)
1604926290708:d[-1]
1604926297771:predict(fit,node="College", data=data.frame(HighSchool=as.double(-1)))
1604926306166:college= setNames(data.frame(predict), c("college_predicted"))
1604926320004:college= setNames(data.frame(predict), c("college_predicted"))
1604926323436:View(college)
1604926331254:predict(fit,node="College", data=data.frame(HighSchool=as.double(1:100)))
1604926338984:college= setNames(data.frame(predict), c("college_predicted"))
1604926362317:data.frame(predict)
1604926389891:data.frame(predict(fit,node="College", data=data.frame(HighSchool=as.double(1:100))))
1604926399722:predictions <- data.frame(predict(fit,node="College", data=data.frame(HighSchool=as.double(1:100))))
1604926419750:View(college)
1604926425014:college <- data.frame(predict(fit,node="College", data=data.frame(HighSchool=as.double(1:100))))
1604926429583:View(college)
1604926526243:college <- setNames(data.frame(predict(fit,node="College", data=data.frame(HighSchool=as.double(1:100)))), c("college_predicted"))
1604926526786:college$college_true=select(data.frame(d[1:100]), "College")
1604926536997:select(data.frame(d[1:100]), "College")
1604926547933:college$college_true=select(data.frame(d[1:100]), "College")
1604926569179:d[1:100]
1604926573310:d[1:100,]
1604926576273:select(data.frame(d[1:100,]), "College")
1604926579817:college$college_true=select(data.frame(d[1:100,]), "College")
1604926585896:View(college)
1604926661132:test <- data.frame(predict(fit,node="College", data=data.frame())
1604926661133:d[1:100,]
1604926661133:data.frame(HighSchool=as.double(1:100)))
1604926690332:predict(fit,node="College", data=data.frame(HighSchool=as.double(1:100)))
1604926784048:predict(fit,node="College", data=d)
1604926797576:View(d)
1604927296331:college <- setNames(data.frame(predict(fit,node="College", data=d)), c("college_predicted"))
1604927298377:college$college_true=select(data.frame(d[1:100,]), "College")
1604927306871:View(college)
1604927316920:college$college_true=select(data.frame(d), "College")
1604927393850:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt")
1604927393852:# load csv
1604927393853:#all_df <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1604927393853:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604927393859:head(d)
1604927393870:#sd <- select(d,"cigs")
1604927393870:#Select right variables
1604927393870:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1604927393876:#Filter out mising values
1604927393877:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1604927393878:nrow(prep)
1604927393878:nrow(subset)
1604927393879:#Plot data continous data
1604927393879:#hist(prep$age)
1604927393879:#hist(prep$chol)
1604927393879:#hist(prep$cigs)
1604927393879:#hist(prep$years)
1604927393880:#hist(prep$trestbps)
1604927393880:#Bin continous data into categorical data of 3 bins.
1604927393880:amountBins <- 3
1604927393880:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1604927393881:continuousVars <- unlist(continuousVars)
1604927393881:for(i in 1:length(continuousVars)){
1604927393881:varname <- continuousVars[i]
1604927393881:intervalValues.varname <- list()
1604927393881:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1604927393882:for(j in 1:length(intervals.varname)){
1604927393882:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1604927393882:intervals.fst <- intervals.t[1]
1604927393883:intervals.snd <- intervals.t[2]
1604927393883:nc.1 <- nchar(intervals.fst)
1604927393883:nc.2 <- nchar(intervals.snd)
1604927393883:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1604927393884:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1604927393884:}
1604927393885:intervalValues.varname <- unique(unlist(intervalValues.varname))
1604927393885:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1604927393885:intervalValues.varname[1] = intervalValues.varname[1]-1
1604927393886:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1604927393886:colname.D <-  paste(varname, ".discrete",sep="")
1604927393887:colname.N <- paste(varname, ".numeric", sep = "")
1604927393887:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1604927393888:prep[colname.N] <- as.numeric( prep[[colname.D]])
1604927393888:}
1604927393931:#### make target variable binary #####
1604927393931:## 0 --> 0 & 1,2,3 --> 1 #######
1604927393932:num.binary <- prep$num
1604927393932:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604927393934:#Make DAG
1604927393935:g <- dagitty('
1604927393935:dag {
1604927393935:age.numeric [pos="0.262,-1.314"]
1604927393935:ca [pos="-1.351,0.555"]
1604927393935:chol.numeric [pos="-0.728,0.191"]
1604927393936:cigs.numeric [pos="-1.247,-0.466"]
1604927393936:cp [pos="0.348,-0.221"]
1604927393936:fbs [pos="-0.121,0.178"]
1604927393936:num [pos="-0.667,1.153"]
1604927393936:sex [pos="-1.310,-1.357"]
1604927393937:thal [pos="-0.962,0.539"]
1604927393937:trestbps.numeric [pos="-1.247,0.178"]
1604927393937:years.numeric [pos="-0.270,-0.496"]
1604927393937:age.numeric -> cigs.numeric
1604927393937:age.numeric -> years.numeric
1604927393937:age.numeric -> trestbps.numeric
1604927393938:age.numeric -> num
1604927393938:age.numeric -> ca
1604927393938:age.numeric -> chol.numeric
1604927393938:ca -> num
1604927393938:chol.numeric -> num
1604927393939:chol.numeric <-> trestbps.numeric
1604927393939:cigs.numeric -> chol.numeric
1604927393939:cigs.numeric -> cp
1604927393939:cigs.numeric -> fbs
1604927393939:cigs.numeric -> trestbps.numeric
1604927393940:cigs.numeric <-> years.numeric
1604927393940:cp -> num
1604927393940:fbs -> num
1604927393940:sex -> cigs.numeric
1604927393940:sex -> cp
1604927393940:sex -> thal
1604927393941:thal -> cp
1604927393941:sex -> years.numeric
1604927393941:thal -> num
1604927393941:trestbps.numeric -> ca
1604927393941:trestbps.numeric -> cp
1604927393942:trestbps.numeric -> thal
1604927393942:years.numeric -> chol.numeric
1604927393942:years.numeric -> fbs
1604927393942:years.numeric -> trestbps.numeric
1604927393942:}
1604927393943:')
1604927502599:#Select only variables we need (numeric)
1604927502599:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1604927527340:View(data)
1604927570209:smp_size = floor(0.75 *  nrow(data))
1604927570209:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604927570210:train <-  data[train_ind,]
1604927570210:test <- data[-train_ind,]
1604927570211:train_neg = sum(train$num.binary==0)
1604927570211:train_pos = sum(train$num.binary==1)
1604927570211:test_neg = sum(test$num.binary==0)
1604927570212:test_pos = sum(test$num.binary==1)
1604927570212:train_ratio = train_pos/train_neg
1604927570212:test_ratio = test_pos/test_neg
1604927609656:View(train)
1604927680732:#### make target variable binary #####
1604927680733:## 0 --> 0 & 1,2,3 --> 1 #######
1604927680733:num.binary <- prep$num
1604927680733:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604927692141:set.seed(13)
1604927692142:#Select only variables we need (numeric)
1604927692142:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1604927692148:# split the data
1604927692148:smp_size = floor(0.75 *  nrow(data))
1604927692148:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604927692149:train <-  data[train_ind,]
1604927692149:test <- data[-train_ind,]
1604927692149:train_neg = sum(train$num.binary==0)
1604927692150:train_pos = sum(train$num.binary==1)
1604927692150:test_neg = sum(test$num.binary==0)
1604927692150:test_pos = sum(test$num.binary==1)
1604927692150:train_ratio = train_pos/train_neg
1604927692151:test_ratio = test_pos/test_neg
1604927747532:View(prep)
1604927802732:#Select only variables we need (numeric)
1604927802733:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21, 22)
1604927843862:11
1604927848452:smp_size = floor(0.75 *  nrow(data))
1604927848452:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604927848452:train <-  data[train_ind,]
1604927848453:test <- data[-train_ind,]
1604927848453:train_neg = sum(train$num.binary==0)
1604927848454:train_pos = sum(train$num.binary==1)
1604927848454:test_neg = sum(test$num.binary==0)
1604927848454:test_pos = sum(test$num.binary==1)
1604927848454:train_ratio = train_pos/train_neg
1604927848455:test_ratio = test_pos/test_neg
1604927877322:net_binary <- model2network(toString(g_binary,"bnlearn"))
1604927884431:#Make DAG
1604927884431:g.binary <- dagitty('
1604927884432:dag {
1604927884432:age.numeric [pos="0.262,-1.314"]
1604927884432:ca [pos="-1.351,0.555"]
1604927884432:chol.numeric [pos="-0.728,0.191"]
1604927884432:cigs.numeric [pos="-1.247,-0.466"]
1604927884433:cp [pos="0.348,-0.221"]
1604927884433:fbs [pos="-0.121,0.178"]
1604927884433:num.binary [pos="-0.667,1.153"]
1604927884433:sex [pos="-1.310,-1.357"]
1604927884433:thal [pos="-0.962,0.539"]
1604927884434:trestbps.numeric [pos="-1.247,0.178"]
1604927884434:years.numeric [pos="-0.270,-0.496"]
1604927884434:age.numeric -> cigs.numeric
1604927884434:age.numeric -> years.numeric
1604927884434:age.numeric -> trestbps.numeric
1604927884435:age.numeric -> num.binary
1604927884435:age.numeric -> ca
1604927884435:age.numeric -> chol.numeric
1604927884435:ca -> num.binary
1604927884435:chol.numeric -> num.binary
1604927884436:chol.numeric <-> trestbps.numeric
1604927884436:cigs.numeric -> chol.numeric
1604927884436:cigs.numeric -> cp
1604927884436:cigs.numeric -> fbs
1604927884437:cigs.numeric -> trestbps.numeric
1604927884437:cigs.numeric <-> years.numeric
1604927884437:cp -> num.binary
1604927884437:fbs -> num.binary
1604927884437:sex -> cigs.numeric
1604927884438:sex -> cp
1604927884438:sex -> thal
1604927884438:thal -> cp
1604927884438:sex -> years.numeric
1604927884439:thal -> num.binary
1604927884439:trestbps.numeric -> ca
1604927884439:trestbps.numeric -> cp
1604927884439:trestbps.numeric -> thal
1604927884439:years.numeric -> chol.numeric
1604927884440:years.numeric -> fbs
1604927884440:years.numeric -> trestbps.numeric
1604927884440:}
1604927884440:')
1604927892890:net.binary <- model2network(toString(g.binary,"bnlearn"))
1604927920432:fit <- bn.fit(net, as.data.frame(scale(train)))
1604927936385:fit.binary <- bn.fit(net.binary, as.data.frame(scale(train)))
1604927943744:#Select only variables we need (numeric)
1604927943744:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21), 22)
1604927948332:#Select only variables we need (numeric)
1604927948332:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21), 22)
1604927954320:#Select only variables we need (numeric)
1604927954320:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)#, 22)
1604927959448:smp_size = floor(0.75 *  nrow(data))
1604927959449:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604927959449:train <-  data[train_ind,]
1604927959449:test <- data[-train_ind,]
1604927959450:train_neg = sum(train$num.binary==0)
1604927959450:train_pos = sum(train$num.binary==1)
1604927959450:test_neg = sum(test$num.binary==0)
1604927959451:test_pos = sum(test$num.binary==1)
1604927959451:train_ratio = train_pos/train_neg
1604927959451:test_ratio = test_pos/test_neg
1604927962350:net <- model2network(toString(g,"bnlearn"))
1604928020424:data$num.binary <- as.double(select(prep, 22))
1604928032868:data$num.binary <- as.double(data.frame(select(prep, 22)))
1604928134335:data$num.binary <- as.double(prep[22,])
1604928142265:data$num.binary <- as.double(prep[,22])
1604928161100:smp_size = floor(0.75 *  nrow(data))
1604928161101:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604928161101:train <-  data[train_ind,]
1604928161102:test <- data[-train_ind,]
1604928161102:train_neg = sum(train$num.binary==0)
1604928161102:train_pos = sum(train$num.binary==1)
1604928161103:test_neg = sum(test$num.binary==0)
1604928161103:test_pos = sum(test$num.binary==1)
1604928161103:train_ratio = train_pos/train_neg
1604928161103:test_ratio = test_pos/test_neg
1604928164060:net <- model2network(toString(g,"bnlearn"))
1604928170843:net.binary <- model2network(toString(g.binary,"bnlearn"))
1604928172485:fit <- bn.fit(net, as.data.frame(scale(train)))
1604928181622:fit.binary <- bn.fit(net.binary, as.data.frame(scale(train)))
1604928223793:#Select only variables we need (numeric)
1604928223793:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1604928224963:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19,21)#, 22)
1604928225540:data.binary$num.binary <- as.double(prep[,22])
1604928230471:smp_size = floor(0.75 *  nrow(data))
1604928230471:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604928230471:train <-  data[train_ind,]
1604928230472:test <- data[-train_ind,]
1604928230472:train_neg = sum(train$num.binary==0)
1604928230473:train_pos = sum(train$num.binary==1)
1604928230473:test_neg = sum(test$num.binary==0)
1604928230473:test_pos = sum(test$num.binary==1)
1604928230473:train_ratio = train_pos/train_neg
1604928230473:test_ratio = test_pos/test_neg
1604928257093:train.binary <-  data.binary[train_ind,]
1604928257986:test.binary <- data.binary[-train_ind,]
1604928262562:net <- model2network(toString(g,"bnlearn"))
1604928263096:net.binary <- model2network(toString(g.binary,"bnlearn"))
1604928264080:fit <- bn.fit(net, as.data.frame(scale(train)))
1604928270228:fit.binary <- bn.fit(net.binary, as.data.frame(scale(train.binary)))
1604928295947:predict.binary <- data.frame(predict(fit.binary,node="num", data=test.binary))
1604928302698:predict.binary <- data.frame(predict(fit.binary,node="num.binary", data=test.binary))
1604928320403:# get accuracy of model
1604928320404:results= setNames(data.frame(predict), c("predicted"))
1604928321350:results$true=select(data.frame(test), "num")
1604928347227:results.binary = setNames(data.frame(predict.binray), c("predicted"))
1604928354185:results.binary = setNames(data.frame(predict.binary), c("predicted"))
1604928355191:results.binary$true=select(data.frame(test.binary), "num")
1604928361377:results.binary$true=select(data.frame(test.binary), "num.binary")
1604928366755:View(results.binary)
1604928387916:View(fit.binary)
1604928394506:View(train.binary)
1604928457522:fit.binary <- bn.fit(net.binary, as.data.frame(scale(train.binary)))
1604928466186:predict.binary <- data.frame(predict(fit.binary,node="num.binary", data=test.binary))
1604928477347:results.binary = setNames(data.frame(predict.binary), c("predicted"))
1604928481354:View(results.binary)
1604928548291:results= setNames(data.frame(predict), c("predicted"))
1604928548293:results$true=select(data.frame(test), "num")
1604928552568:View(results)
1604928665244:View(train)
1604928905623:# build model
1604928905624:net <- model2network(toString(g,"bnlearn"))
1604928905628:# fit model based on training data
1604928905629:fit <- bn.fit(net, as.data.frame(scale(train)))
1604928905631:fit
1604928905668:predict <- data.frame(predict(fit,node="num", data=test))
1604928905669:# get accuracy of model
1604928905669:results= setNames(data.frame(predict), c("predicted"))
1604928905670:results$true=select(data.frame(test), "num")
1604928972699:results[1,1]
1604928988899:round(results[1,1], digits = 0)
1604928997562:round(results[,1], digits = 0)
1604929012574:# calculate true or false values
1604929012574:# round predicted values
1604929012574:results$predicted_rounded=round(results[,1], digits = 0)
1604929075863:# calculate error
1604929075864:results$error=results$treu-results$predicted_rounded
1604929079262:# calculate true or false values
1604929079262:# round predicted values
1604929079263:results$predicted_rounded=round(results[,1], digits = 0)
1604929091436:# calculate error
1604929091436:results$error=results$treu-results$predicted_rounded
1604929105656:# calculate error
1604929105656:results$error=(results$treu-results$predicted_rounded)
1604929111819:results$treu-results$predicted_rounded
1604929125962:results$treu
1604929132774:# calculate error
1604929132774:results$error=(results$true-results$predicted_rounded)
1604929202751:net.binary <- model2network(toString(g.binary,"bnlearn"))
1604929202755:fit.binary <- bn.fit(net.binary, as.data.frame(scale(train.binary)))
1604929202757:predict.binary <- data.frame(predict(fit.binary,node="num.binary", data=test.binary))
1604929202758:results.binary = setNames(data.frame(predict.binary), c("predicted"))
1604929202759:results.binary$true=select(data.frame(test.binary), "num.binary")
1604929202761:results.binary$predicted_rounded=round(results.binary[,1], digits = 0)
1604929202761:# calculate error
1604929202762:results.binary$error=(results.binary$true-results.binary$predicted_rounded)
1604929206956:View(results.binary)
1604929326733:####################################################################
1604929326735:# testing model
1604929326735:plot(g)
1604929331207:impliedConditionalIndependencies(g)
1604929875275:localTests(g,prep,type="cis.chisq", max.conditioning.variables=5)
1604930007725:localTests(g,prep)
1604930761662:#Make DAG
1604930761664:g <- dagitty('
1604930761664:dag {
1604930761664:age.numeric [pos="0.262,-1.314"]
1604930761665:ca [pos="-1.351,0.555"]
1604930761665:chol.numeric [pos="-0.728,0.191"]
1604930761665:cigs.numeric [pos="-1.247,-0.466"]
1604930761665:cp [pos="0.348,-0.221"]
1604930761665:fbs [pos="-0.121,0.178"]
1604930761666:num [pos="-0.667,1.153"]
1604930761666:sex [pos="-1.310,-1.357"]
1604930761666:thal [pos="-0.962,0.539"]
1604930761666:trestbps.numeric [pos="-1.247,0.178"]
1604930761666:years.numeric [pos="-0.270,-0.496"]
1604930761667:age.numeric -> cigs.numeric
1604930761667:age.numeric -> years.numeric
1604930761667:age.numeric -> trestbps.numeric
1604930761667:age.numeric -> num
1604930761667:age.numeric -> ca
1604930761668:age.numeric -> chol.numeric
1604930761668:ca -> num
1604930761668:chol.numeric -> num
1604930761668:chol.numeric <-> trestbps.numeric
1604930761668:cigs.numeric -> chol.numeric
1604930761669:cigs.numeric -> cp
1604930761669:cigs.numeric -> fbs
1604930761669:cigs.numeric -> trestbps.numeric
1604930761669:cigs.numeric <-> years.numeric
1604930761669:cp -> num
1604930761670:fbs -> num
1604930761670:sex -> cigs.numeric
1604930761670:sex -> cp
1604930761670:sex -> thal
1604930761670:thal -> cp
1604930761671:sex -> years.numeric
1604930761671:thal -> num
1604930761671:trestbps.numeric -> ca
1604930761671:trestbps.numeric -> cp
1604930761671:trestbps.numeric -> thal
1604930761672:years.numeric -> chol.numeric
1604930761672:years.numeric -> fbs
1604930761672:years.numeric -> trestbps.numeric
1604930761672:sex -> ca
1604930761673:}
1604930761673:')
1604930761676:####################################################################
1604930761676:# testing model
1604930761676:plot(g)
1604930761734:impliedConditionalIndependencies(g)
1604930779133:localTests(g,prep,type="cis.chisq", max.conditioning.variables=5)
1604931501769:View(prep)
1604931567964:new = select(prep), "sex", "age")
1604931582016:new = select(prep), c("sex","age"))
1604931636771:new = select(prep.sex, prep.age)
1604931682887:new <- prep %>% select(sex, age)
1604931687707:View(new)
1604931831995:bins <- rbind(new)
1604931845707:ggplot(bins, aes(age, fill = sex)) + geom_density(alpha = 0.2)
1604931848570:geom_histogram(fill="white", alpha=0.5, position="identity")
1604931877260:library( bayesianNetworks )
1604931877276:library(dplyr)
1604931877276:library(dagitty)
1604931877277:library(Hmisc)
1604931877277:library(bnlearn)
1604931877277:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt")
1604931877278:# load csv
1604931877278:all_df <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1604931877296:# subselect for variables
1604931877296:# 3,4,9,16,10,12,14,15,44,51,58)
1604931877296:data <- select(all_df, "age","sex","cp","fbs","trestbps","chol","cigs","years","ca","thal","num")
1604931877314:#data <- tail(data, -3)
1604931877314:# remove rows with missing data
1604931877314:data <- data[rowSums(is.na(data)) == 0,]
1604931877315:#data <- as.numeric(data)
1604931877315:# scale data
1604931877315:data_scaled <- scale(data)
1604931877316:# split data test training set
1604931877316:# split the data
1604931877316:smp_size = floor(0.75 *  nrow(data_scaled))
1604931877316:train_ind <- sample(seq_len(nrow(data_scaled)), size = smp_size)
1604931877317:train_scaled <-  (data_scaled[train_ind,])
1604931877317:test_scaled <- (data_scaled[-train_ind,])
1604931877317:train <-  (data[train_ind,])
1604931877318:test <- (data[-train_ind,])
1604931877318:# build DAG
1604931877318:g <- dagitty('
1604931877319:dag {
1604931877319:age [pos="0.262,-1.314"]
1604931877319:ca [pos="-1.351,0.555"]
1604931877319:chol [pos="-0.728,0.191"]
1604931877319:cigs [pos="-1.247,-0.466"]
1604931877319:cp [pos="0.348,-0.221"]
1604931877320:fbs [pos="-0.121,0.178"]
1604931877320:num [pos="-0.667,1.153"]
1604931877320:sex [pos="-1.310,-1.357"]
1604931877320:thal [pos="-0.962,0.539"]
1604931877320:trestbps [pos="-1.247,0.178"]
1604931877320:years [pos="-0.270,-0.496"]
1604931877321:age -> cigs
1604931877321:age -> years
1604931877321:age -> trestbps
1604931877321:age -> num
1604931877321:age -> ca
1604931877322:age -> chol
1604931877322:ca -> num
1604931877322:chol -> num
1604931877322:chol <-> trestbps
1604931877322:cigs -> chol
1604931877322:cigs -> cp
1604931877323:cigs -> fbs
1604931877323:cigs -> trestbps
1604931877323:cigs <-> years
1604931877323:cp -> num
1604931877324:fbs -> num
1604931877324:sex -> cigs
1604931877324:sex -> cp
1604931877324:sex -> thal
1604931877325:thal -> cp
1604931877325:sex -> years
1604931877325:thal -> num
1604931877325:trestbps -> ca
1604931877326:trestbps -> cp
1604931877326:trestbps -> thal
1604931877326:years -> chol
1604931877326:years -> fbs
1604931877326:years-> trestbps
1604931877327:}
1604931877327:')
1604931877330:plot(g)
1604931877380:localTests(g,data,type="cis.chisq", max.conditioning.variables=5)
1604931884586:impliedConditionalIndependencies(g)
1604931884604:net <- model2network(toString(g,"bnlearn"))
1604931884606:# not scaled model
1604931884607:# scaled model
1604931884607:fit_scaled <- bn.fit( net, as.data.frame(train_scaled) )
1604931884608:result_scaled <- predict(fit_scaled,node="num", data=as.data.frame(test_scaled))
1604931884608:# get accuracy of model
1604931884608:results_df_scaled = setNames(data.frame(result_scaled), c("predicted"))
1604931884609:results_df_scaled$true=select(data.frame(test_scaled), "num")
1604931884610:results_df_scaled$diff=(results_df_scaled$true-results_df_scaled$predicted)
1604931884611:results_df_scaled$type<-"scaled"
1604931884611:# visualize results
1604931884611:hist(results_df_scaled$diff)
1604931884635:# not scaled model
1604931884635:# scaled model
1604931884635:fit <- bn.fit( net, as.data.frame(train) )
1604931884636:result <- predict(fit,node="num", data=as.data.frame(test))
1604931884637:# get accuracy of model
1604931884637:results_df = setNames(data.frame(result), c("predicted"))
1604931884637:results_df$true=select(data.frame(test), "num")
1604931884639:results_df$diff=(results_df$true-results_df$predicted)
1604931884639:# visualize results
1604931884639:hist(results_df$diff)
1604931884712:# compare
1604931884712:scaled<-results_df_scaled$diff
1604931884713:scaled$type<-"scaled"
1604931884713:normal<-results_df$diff
1604931884713:normal$type<-"normal"
1604931884713:bins <- rbind(scaled, normal)
1604931884714:ggplot(bins, aes(num, fill = type)) + geom_density(alpha = 0.2)
1604931885033:geom_histogram(fill="white", alpha=0.5, position="identity")
1604931885035:# compare
1604931885035:scaled<-results_df_scaled$diff
1604931885035:scaled$type<-"scaled"
1604931885035:normal<-results_df$diff
1604931885035:normal$type<-"normal"
1604931885035:bins <- rbind(scaled, normal)
1604931885036:ggplot(bins, aes(num, fill = type)) + geom_density(alpha = 0.2)
1604931885314:geom_histogram(fill="white", alpha=0.5, position="identity")
1604931960367:female <- prep %>% select(sex=0, age)
1604931962199:female$sex <- "female"
1604931970696:View(female)
1604932222393:prep[prep$sex = 0]
1604932237520:prep[prep$sex <= prep$laclean, ]
1604932247338:x <- prep[prep$sex <= prep$laclean, ]
1604932249433:View(x)
1604932331581:x <- prep[prep$sex ==0 , ]
1604932354661:View(x)
1604932402484:female <- select((prep[prep$sex ==0 , ]), sex=0, age)
1604932410296:View(female)
1604932419933:female$sex <- "female"
1604932435953:male <- select((prep[prep$sex ==1 , ]), sex=0, age)
1604932444984:male$sex <- "male"
1604932452834:bins <- rbind(female, male)
1604932457824:ggplot(bins, aes(age, fill = sex)) + geom_density(alpha = 0.2)
1604933070658:# fit model based on training data
1604933070659:fit <- bn.fit(net, as.data.frame(train))
1604933072552:fit
1604933079702:predict <- data.frame(predict(fit,node="num", data=test))
1604933083009:# get accuracy of model
1604933083010:results= setNames(data.frame(predict), c("predicted"))
1604933083843:results$true=select(data.frame(test), "num")
1604933089557:o
1604933476606:library( bayesianNetworks )
1604933476608:set.seed(123)
1604933476608:training.data <- simulate_sprinkler( 500 )
1604933476610:test.data <- simulate_sprinkler( 1000 )
1604933476611:m <- naive_bayes( WetGrass ~ Cloudy + Rain + Sprinkler, data=training.data )
1604933476614:y <- predict( m, newdata=test.data, type="prob" )
1604933476618:y <- y[,2]
1604933476618:plot( roc(test.data$WetGrass,y) )
1604933476650:## Not run:
1604933476650:# Example with a multinomial log-linear model from nnet
1604933476651:# We use the iris dataset and split into a training and test set
1604933476651:requireNamespace("nnet")
1604933476651:data(iris)
1604933476662:iris.sample <- sample(1:150)
1604933476663:iris.train <- iris[iris.sample[1:75],]
1604933476663:iris.test <- iris[iris.sample[76:150],]
1604933476664:mn.net <- nnet::multinom(Species ~ ., iris.train)
1604933476668:# Use predict with type="prob" to get class probabilities
1604933476669:iris.predictions <- predict(mn.net, newdata=iris.test, type="prob")
1604933476670:head(iris.predictions)
1604933591743:hist(results$error)
1604933608706:hist(as.numeric(results$error))
1604933619191:plot(results$error)
1604933688537:typeof(results)
1604933695515:typeof(results[1,1])
1604933793307:View(test)
1604933828976:#Load data
1604933828977:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt")
1604933828977:# load csv
1604933828977:#all_df <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1604933828977:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604933828983:head(d)
1604933828995:#sd <- select(d,"cigs")
1604933828995:#Select right variables
1604933828996:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1604933829003:#Filter out mising values
1604933829004:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1604933829006:nrow(prep)
1604933829006:nrow(subset)
1604933829006:#Plot data continous data
1604933829007:#hist(prep$age)
1604933829007:#hist(prep$chol)
1604933829007:#hist(prep$cigs)
1604933829007:#hist(prep$years)
1604933829007:#hist(prep$trestbps)
1604933829008:#Bin continous data into categorical data of 3 bins.
1604933829008:amountBins <- 3
1604933829008:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1604933829008:continuousVars <- unlist(continuousVars)
1604933829008:for(i in 1:length(continuousVars)){
1604933829009:varname <- continuousVars[i]
1604933829009:intervalValues.varname <- list()
1604933829009:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1604933829009:for(j in 1:length(intervals.varname)){
1604933829010:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1604933829010:intervals.fst <- intervals.t[1]
1604933829010:intervals.snd <- intervals.t[2]
1604933829010:nc.1 <- nchar(intervals.fst)
1604933829011:nc.2 <- nchar(intervals.snd)
1604933829011:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1604933829011:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1604933829012:}
1604933829012:intervalValues.varname <- unique(unlist(intervalValues.varname))
1604933829012:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1604933829013:intervalValues.varname[1] = intervalValues.varname[1]-1
1604933829013:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1604933829014:colname.D <-  paste(varname, ".discrete",sep="")
1604933829014:colname.N <- paste(varname, ".numeric", sep = "")
1604933829015:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1604933829015:prep[colname.N] <- as.numeric( prep[[colname.D]])
1604933829016:}
1604933829060:#### make target variable binary #####
1604933829060:## 0 --> 0 & 1,2,3 --> 1 #######
1604933829061:num.binary <- prep$num
1604933829061:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604933829064:########################################################################################
1604933829065:female <- select((prep[prep$sex ==0 , ]), sex=0, age)
1604933829068:female$sex <- "female"
1604933829068:male <- select((prep[prep$sex ==1 , ]), sex=0, age)
1604933829072:male$sex <- "male"
1604933829072:bins <- rbind(female, male)
1604933829073:ggplot(bins, aes(age, fill = sex)) + geom_density(alpha = 0.2)
1604933829346:geom_histogram(fill="white", alpha=0.5, position="identity")
1604933829348:#Make DAG
1604933829349:g <- dagitty('
1604933829349:dag {
1604933829349:age.numeric [pos="0.262,-1.314"]
1604933829349:ca [pos="-1.351,0.555"]
1604933829349:chol.numeric [pos="-0.728,0.191"]
1604933829350:cigs.numeric [pos="-1.247,-0.466"]
1604933829350:cp [pos="0.348,-0.221"]
1604933829350:fbs [pos="-0.121,0.178"]
1604933829350:num [pos="-0.667,1.153"]
1604933829350:sex [pos="-1.310,-1.357"]
1604933829351:thal [pos="-0.962,0.539"]
1604933829351:trestbps.numeric [pos="-1.247,0.178"]
1604933829351:years.numeric [pos="-0.270,-0.496"]
1604933829351:age.numeric -> cigs.numeric
1604933829351:age.numeric -> years.numeric
1604933829352:age.numeric -> trestbps.numeric
1604933829352:age.numeric -> num
1604933829352:age.numeric -> ca
1604933829352:age.numeric -> chol.numeric
1604933829352:ca -> num
1604933829352:chol.numeric -> num
1604933829353:chol.numeric <-> trestbps.numeric
1604933829353:cigs.numeric -> chol.numeric
1604933829353:cigs.numeric -> cp
1604933829353:cigs.numeric -> fbs
1604933829353:cigs.numeric -> trestbps.numeric
1604933829354:cigs.numeric <-> years.numeric
1604933829354:cp -> num
1604933829354:fbs -> num
1604933829354:sex -> cigs.numeric
1604933829354:sex -> cp
1604933829355:sex -> thal
1604933829355:thal -> cp
1604933829355:sex -> years.numeric
1604933829355:thal -> num
1604933829355:trestbps.numeric -> ca
1604933829356:trestbps.numeric -> cp
1604933829356:trestbps.numeric -> thal
1604933829356:years.numeric -> chol.numeric
1604933829356:years.numeric -> fbs
1604933829357:years.numeric -> trestbps.numeric
1604933829357:sex -> ca
1604933829357:}
1604933829357:')
1604933829359:####################################################################
1604933829360:# testing model
1604933829360:plot(g)
1604933829561:impliedConditionalIndependencies(g)
1604933829583:#Execute local tests
1604933829583:localTests(g,prep,type="cis.chisq", max.conditioning.variables=5)
1604933830165:localTests(g,prep)
1604933830187:#impliedConditionalIndependencies(g)
1604933830187:####################################################################
1604933830187:## Create training and test set ##
1604933830187:##################################
1604933830188:set.seed(13)
1604933830188:#Select only variables we need (numeric)
1604933830188:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1604933830195:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19,21)#, 22)
1604933830201:data.binary$num.binary <- as.double(prep[,22])
1604933830201:# split the data
1604933830201:smp_size = floor(0.75 *  nrow(data))
1604933830202:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604933830202:train <-  data[train_ind,]
1604933830202:test <- data[-train_ind,]
1604933830203:train.binary <-  data.binary[train_ind,]
1604933830203:test.binary <- data.binary[-train_ind,]
1604933830204:train_neg = sum(train$num.binary==0)
1604933830204:train_pos = sum(train$num.binary==1)
1604933830204:test_neg = sum(test$num.binary==0)
1604933830204:test_pos = sum(test$num.binary==1)
1604933830205:train_ratio = train_pos/train_neg
1604933830205:test_ratio = test_pos/test_neg
1604933839987:View(test)
1604933946653:female <- select((prep[prep$sex ==0 , ]), sex=0, age.numeric)
1604933946657:female$sex <- "female"
1604933946657:male <- select((prep[prep$sex ==1 , ]), sex=0, age.numeric)
1604933946660:male$sex <- "male"
1604933946660:bins <- rbind(female, male)
1604933946661:ggplot(bins, aes(age.numeric, fill = sex)) + geom_density(alpha = 0.2)
1604933946906:geom_histogram(fill="white", alpha=0.5, position="identity")
1604934125109:localTests(g,prep,type="cis.chisq", max.conditioning.variables=3)
1604934588548:# build model
1604934588549:net <- model2network(toString(g,"bnlearn"))
1604934588552:# fit model based on training data
1604934588552:fit <- bn.fit(net, as.data.frame(train))
1604934588553:fit
1604934588557:predict <- data.frame(predict(fit,node="num", data=test))
1604934588558:# get accuracy of model
1604934588558:results= setNames(data.frame(predict), c("predicted"))
1604934588558:results$true=select(data.frame(test), "num")
1604934588560:# calculate true or false values
1604934588561:# round predicted values
1604934588561:results$predicted_rounded=round(results[,1], digits = 0)
1604934588561:# calculate error
1604934588561:results$error=(results$true-results$predicted_rounded)
1604934896634:#Make DAG
1604934896636:g.binary <- dagitty('
1604934896636:dag {
1604934896637:age.numeric [pos="0.262,-1.314"]
1604934896637:ca [pos="-1.351,0.555"]
1604934896637:chol.numeric [pos="-0.728,0.191"]
1604934896637:cigs.numeric [pos="-1.247,-0.466"]
1604934896637:cp [pos="0.348,-0.221"]
1604934896638:fbs [pos="-0.121,0.178"]
1604934896638:num.binary [pos="-0.667,1.153"]
1604934896638:sex [pos="-1.310,-1.357"]
1604934896638:thal [pos="-0.962,0.539"]
1604934896639:trestbps.numeric [pos="-1.247,0.178"]
1604934896639:years.numeric [pos="-0.270,-0.496"]
1604934896639:age.numeric -> cigs.numeric
1604934896639:age.numeric -> years.numeric
1604934896639:age.numeric -> trestbps.numeric
1604934896640:age.numeric -> num.binary
1604934896640:age.numeric -> ca
1604934896640:age.numeric -> chol.numeric
1604934896640:ca -> num.binary
1604934896640:chol.numeric -> num.binary
1604934896641:chol.numeric <-> trestbps.numeric
1604934896641:cigs.numeric -> chol.numeric
1604934896641:cigs.numeric -> cp
1604934896641:cigs.numeric -> fbs
1604934896641:cigs.numeric -> trestbps.numeric
1604934896642:cigs.numeric <-> years.numeric
1604934896642:cp -> num.binary
1604934896642:fbs -> num.binary
1604934896642:sex -> cigs.numeric
1604934896642:sex -> cp
1604934896643:sex -> thal
1604934896643:thal -> cp
1604934896643:sex -> years.numeric
1604934896643:thal -> num.binary
1604934896643:trestbps.numeric -> ca
1604934896644:trestbps.numeric -> cp
1604934896644:trestbps.numeric -> thal
1604934896644:years.numeric -> chol.numeric
1604934896644:years.numeric -> fbs
1604934896644:years.numeric -> trestbps.numeric
1604934896645:}
1604934896645:')
1604934896647:localTests(g.binary,prep,type="cis.chisq")#, max.conditioning.variables=5)
1604934896879:net.binary <- model2network(toString(g.binary,"bnlearn"))
1604934896882:fit.binary <- bn.fit(net.binary, as.data.frame(train.binary))
1604934896883:predict.binary <- data.frame(predict(fit.binary,node="num.binary", data=test.binary))
1604934896884:results.binary = setNames(data.frame(predict.binary), c("predicted"))
1604934896884:results.binary$true=select(data.frame(test.binary), "num.binary")
1604934896887:results.binary$predicted_rounded=round(results.binary[,1], digits = 0)
1604934896887:# calculate error
1604934896887:results.binary$error=(results.binary$true-results.binary$predicted_rounded)
1604934934640:View(results.binary)
1604934970734:localTests(g.binary,prep,type="cis.chisq")#, max.conditioning.variables=5)
1604934978577:localTests(g.binary,prep,type="cis.chisq", max.conditioning.variables=5)
1604934981553:localTests(g.binary,prep,type="cis.chisq", max.conditioning.variables=3)
1604935267749:plot(results$error)
1604935294685:hist(results$error)
1604935701178:hist(results$error, breaks = 9)
1604935709335:library(dplyr)
1604935709335:library(dagitty)
1604935709336:library(Hmisc)
1604935709336:library(caTools)
1604935709336:#Load data
1604935709337:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt")
1604935709337:# load csv
1604935709337:#all_df <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1604935709337:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604935709342:head(d)
1604935709353:#sd <- select(d,"cigs")
1604935709354:#Select right variables
1604935709354:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1604935709360:#Filter out mising values
1604935709360:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1604935709362:nrow(prep)
1604935709362:nrow(subset)
1604935709362:#Plot data continous data
1604935709362:#hist(prep$age)
1604935709363:#hist(prep$chol)
1604935709363:#hist(prep$cigs)
1604935709363:#hist(prep$years)
1604935709363:#hist(prep$trestbps)
1604935709363:#Bin continous data into categorical data of 3 bins.
1604935709363:amountBins <- 3
1604935709364:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1604935709364:continuousVars <- unlist(continuousVars)
1604935709364:for(i in 1:length(continuousVars)){
1604935709365:varname <- continuousVars[i]
1604935709365:intervalValues.varname <- list()
1604935709365:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1604935709365:for(j in 1:length(intervals.varname)){
1604935709366:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1604935709366:intervals.fst <- intervals.t[1]
1604935709366:intervals.snd <- intervals.t[2]
1604935709366:nc.1 <- nchar(intervals.fst)
1604935709367:nc.2 <- nchar(intervals.snd)
1604935709367:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1604935709367:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1604935709368:}
1604935709368:intervalValues.varname <- unique(unlist(intervalValues.varname))
1604935709368:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1604935709369:intervalValues.varname[1] = intervalValues.varname[1]-1
1604935709369:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1604935709370:colname.D <-  paste(varname, ".discrete",sep="")
1604935709370:colname.N <- paste(varname, ".numeric", sep = "")
1604935709371:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1604935709371:prep[colname.N] <- as.numeric( prep[[colname.D]])
1604935709371:}
1604935709404:#### make target variable binary #####
1604935709405:## 0 --> 0 & 1,2,3 --> 1 #######
1604935709405:num.binary <- prep$num
1604935709405:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604935709408:########################################################################################
1604935709408:female <- select((prep[prep$sex ==0 , ]), sex=0, age.numeric)
1604935709411:female$sex <- "female"
1604935709411:male <- select((prep[prep$sex ==1 , ]), sex=0, age.numeric)
1604935709413:male$sex <- "male"
1604935709414:bins <- rbind(female, male)
1604935709414:ggplot(bins, aes(age.numeric, fill = sex)) + geom_density(alpha = 0.2)
1604935709633:geom_histogram(fill="white", alpha=0.5, position="identity")
1604935709635:#Make DAG
1604935709635:g <- dagitty('
1604935709636:dag {
1604935709636:age.numeric [pos="0.262,-1.314"]
1604935709636:ca [pos="-1.351,0.555"]
1604935709636:chol.numeric [pos="-0.728,0.191"]
1604935709636:cigs.numeric [pos="-1.247,-0.466"]
1604935709637:cp [pos="0.348,-0.221"]
1604935709637:fbs [pos="-0.121,0.178"]
1604935709637:num [pos="-0.667,1.153"]
1604935709637:sex [pos="-1.310,-1.357"]
1604935709637:thal [pos="-0.962,0.539"]
1604935709638:trestbps.numeric [pos="-1.247,0.178"]
1604935709638:years.numeric [pos="-0.270,-0.496"]
1604935709638:age.numeric -> cigs.numeric
1604935709638:age.numeric -> years.numeric
1604935709638:age.numeric -> trestbps.numeric
1604935709639:age.numeric -> num
1604935709639:age.numeric -> ca
1604935709639:age.numeric -> chol.numeric
1604935709639:ca -> num
1604935709640:chol.numeric -> num
1604935709640:chol.numeric <-> trestbps.numeric
1604935709640:cigs.numeric -> chol.numeric
1604935709640:cigs.numeric -> cp
1604935709640:cigs.numeric -> fbs
1604935709640:cigs.numeric -> trestbps.numeric
1604935709641:cigs.numeric <-> years.numeric
1604935709641:cp -> num
1604935709641:fbs -> num
1604935709641:sex -> cigs.numeric
1604935709641:sex -> cp
1604935709642:sex -> thal
1604935709642:thal -> cp
1604935709642:sex -> years.numeric
1604935709642:thal -> num
1604935709642:trestbps.numeric -> ca
1604935709643:trestbps.numeric -> cp
1604935709643:trestbps.numeric -> thal
1604935709643:years.numeric -> chol.numeric
1604935709644:years.numeric -> fbs
1604935709644:years.numeric -> trestbps.numeric
1604935709644:sex -> ca
1604935709644:}
1604935709644:')
1604935709647:####################################################################
1604935709647:# testing model
1604935709647:plot(g)
1604935709831:impliedConditionalIndependencies(g)
1604935709852:#Execute local tests
1604935709852:localTests(g,prep,type="cis.chisq", max.conditioning.variables=3)
1604935710278:localTests(g,prep)
1604935710295:#impliedConditionalIndependencies(g)
1604935710295:####################################################################
1604935710296:## Create training and test set ##
1604935710296:##################################
1604935710296:set.seed(13)
1604935710296:#Select only variables we need (numeric)
1604935710296:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1604935710303:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19,21)#, 22)
1604935710308:data.binary$num.binary <- as.double(prep[,22])
1604935710308:# split the data
1604935710308:smp_size = floor(0.75 *  nrow(data))
1604935710309:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604935710309:train <-  data[train_ind,]
1604935710309:test <- data[-train_ind,]
1604935710310:train.binary <-  data.binary[train_ind,]
1604935710310:test.binary <- data.binary[-train_ind,]
1604935710311:train_neg = sum(train$num.binary==0)
1604935710311:train_pos = sum(train$num.binary==1)
1604935710311:test_neg = sum(test$num.binary==0)
1604935710311:test_pos = sum(test$num.binary==1)
1604935710312:train_ratio = train_pos/train_neg
1604935710312:test_ratio = test_pos/test_neg
1604935710312:####################################################################
1604935710312:##### INFERENCE #######
1604935710313:library(bnlearn)
1604935710313:library( pROC )
1604935710313:# build model
1604935710313:net <- model2network(toString(g,"bnlearn"))
1604935710317:# fit model based on training data
1604935710317:fit <- bn.fit(net, as.data.frame(train))
1604935710318:fit
1604935710321:predict <- data.frame(predict(fit,node="num", data=test))
1604935710322:# get accuracy of model
1604935710322:results= setNames(data.frame(predict), c("predicted"))
1604935710322:results$true=select(data.frame(test), "num")
1604935710324:# calculate true or false values
1604935710324:# round predicted values
1604935710325:results$predicted_rounded=round(results[,1], digits = 0)
1604935710325:# calculate error
1604935710325:results$error=(results$true-results$predicted_rounded)
1604935710326:# visualize results
1604935710326:# plot ROC
1604935710326:plot (multiclass.roc(results_df$true, results_df$predicted))
1604935710328:typeof(results[1,1])
1604935710328:########################################################################
1604935710329:# not scaling
1604935710329:fit <- bn.fit(net, as.data.frame(scale(train)))
1604935710331:########################################################################
1604935710331:# binary num values
1604935710331:#Make DAG
1604935710331:g.binary <- dagitty('
1604935710332:dag {
1604935710332:age.numeric [pos="0.262,-1.314"]
1604935710332:ca [pos="-1.351,0.555"]
1604935710332:chol.numeric [pos="-0.728,0.191"]
1604935710332:cigs.numeric [pos="-1.247,-0.466"]
1604935710333:cp [pos="0.348,-0.221"]
1604935710333:fbs [pos="-0.121,0.178"]
1604935710333:num.binary [pos="-0.667,1.153"]
1604935710333:sex [pos="-1.310,-1.357"]
1604935710333:thal [pos="-0.962,0.539"]
1604935710333:trestbps.numeric [pos="-1.247,0.178"]
1604935710334:years.numeric [pos="-0.270,-0.496"]
1604935710334:age.numeric -> cigs.numeric
1604935710334:age.numeric -> years.numeric
1604935710334:age.numeric -> trestbps.numeric
1604935710335:age.numeric -> num.binary
1604935710335:age.numeric -> ca
1604935710335:age.numeric -> chol.numeric
1604935710335:ca -> num.binary
1604935710335:chol.numeric -> num.binary
1604935710335:chol.numeric <-> trestbps.numeric
1604935710336:cigs.numeric -> chol.numeric
1604935710336:cigs.numeric -> cp
1604935710336:cigs.numeric -> fbs
1604935710336:cigs.numeric -> trestbps.numeric
1604935710336:cigs.numeric <-> years.numeric
1604935710337:cp -> num.binary
1604935710337:fbs -> num.binary
1604935710337:sex -> cigs.numeric
1604935710337:sex -> cp
1604935710337:sex -> thal
1604935710338:thal -> cp
1604935710338:sex -> years.numeric
1604935710338:thal -> num.binary
1604935710338:trestbps.numeric -> ca
1604935710338:trestbps.numeric -> cp
1604935710338:trestbps.numeric -> thal
1604935710339:years.numeric -> chol.numeric
1604935710339:years.numeric -> fbs
1604935710339:years.numeric -> trestbps.numeric
1604935710339:}
1604935710339:')
1604935710342:localTests(g.binary,prep,type="cis.chisq", max.conditioning.variables=3)
1604935710616:net.binary <- model2network(toString(g.binary,"bnlearn"))
1604935710618:fit.binary <- bn.fit(net.binary, as.data.frame(train.binary))
1604935710619:predict.binary <- data.frame(predict(fit.binary,node="num.binary", data=test.binary))
1604935710620:results.binary = setNames(data.frame(predict.binary), c("predicted"))
1604935710620:results.binary$true=select(data.frame(test.binary), "num.binary")
1604935710622:results.binary$predicted_rounded=round(results.binary[,1], digits = 0)
1604935710622:# calculate error
1604935710623:results.binary$error=(results.binary$true-results.binary$predicted_rounded)
1604935710623:hist(results$error, breaks = 9)
1604935732390:hist(results$error, breaks = 10)
1604935740722:hist(results$error, breaks = 3)
1604935753515:hist(results$error, breaks=3)
1604936210860:library(dplyr)
1604936210861:library(dagitty)
1604936210861:library(Hmisc)
1604936210861:library(caTools)
1604936210862:#Load data
1604936210862:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt")
1604936210862:# load csv
1604936210862:#all_df <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1604936210863:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604936210864:head(d)
1604936210874:#sd <- select(d,"cigs")
1604936210874:#Select right variables
1604936210874:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1604936210880:#Filter out mising values
1604936210880:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1604936210882:nrow(prep)
1604936210882:nrow(subset)
1604936210883:#Plot data continous data
1604936210883:#hist(prep$age)
1604936210883:#hist(prep$chol)
1604936210883:#hist(prep$cigs)
1604936210883:#hist(prep$years)
1604936210884:#hist(prep$trestbps)
1604936210884:#Bin continous data into categorical data of 3 bins.
1604936210884:amountBins <- 3
1604936210884:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1604936210885:continuousVars <- unlist(continuousVars)
1604936210885:for(i in 1:length(continuousVars)){
1604936210885:varname <- continuousVars[i]
1604936210885:intervalValues.varname <- list()
1604936210885:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1604936210886:for(j in 1:length(intervals.varname)){
1604936210886:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1604936210886:intervals.fst <- intervals.t[1]
1604936210887:intervals.snd <- intervals.t[2]
1604936210887:nc.1 <- nchar(intervals.fst)
1604936210887:nc.2 <- nchar(intervals.snd)
1604936210888:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1604936210888:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1604936210888:}
1604936210889:intervalValues.varname <- unique(unlist(intervalValues.varname))
1604936210889:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1604936210889:intervalValues.varname[1] = intervalValues.varname[1]-1
1604936210890:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1604936210891:colname.D <-  paste(varname, ".discrete",sep="")
1604936210891:colname.N <- paste(varname, ".numeric", sep = "")
1604936210892:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1604936210892:prep[colname.N] <- as.numeric( prep[[colname.D]])
1604936210893:}
1604936210925:#### make target variable binary #####
1604936210925:## 0 --> 0 & 1,2,3 --> 1 #######
1604936210925:num.binary <- prep$num
1604936210925:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604936210928:########################################################################################
1604936210929:female <- select((prep[prep$sex ==0 , ]), sex=0, age.numeric)
1604936210931:female$sex <- "female"
1604936210932:male <- select((prep[prep$sex ==1 , ]), sex=0, age.numeric)
1604936210934:male$sex <- "male"
1604936210934:bins <- rbind(female, male)
1604936210935:ggplot(bins, aes(age.numeric, fill = sex)) + geom_density(alpha = 0.2)
1604936211153:geom_histogram(fill="white", alpha=0.5, position="identity")
1604936211155:#Make DAG
1604936211155:g <- dagitty('
1604936211155:dag {
1604936211155:age.numeric [pos="0.262,-1.314"]
1604936211155:ca [pos="-1.351,0.555"]
1604936211156:chol.numeric [pos="-0.728,0.191"]
1604936211156:cigs.numeric [pos="-1.247,-0.466"]
1604936211156:cp [pos="0.348,-0.221"]
1604936211156:fbs [pos="-0.121,0.178"]
1604936211156:num [pos="-0.667,1.153"]
1604936211157:sex [pos="-1.310,-1.357"]
1604936211157:thal [pos="-0.962,0.539"]
1604936211157:trestbps.numeric [pos="-1.247,0.178"]
1604936211157:years.numeric [pos="-0.270,-0.496"]
1604936211157:age.numeric -> cigs.numeric
1604936211158:age.numeric -> years.numeric
1604936211158:age.numeric -> trestbps.numeric
1604936211158:age.numeric -> num
1604936211158:age.numeric -> ca
1604936211158:age.numeric -> chol.numeric
1604936211159:ca -> num
1604936211159:chol.numeric -> num
1604936211159:chol.numeric <-> trestbps.numeric
1604936211159:cigs.numeric -> chol.numeric
1604936211159:cigs.numeric -> cp
1604936211160:cigs.numeric -> fbs
1604936211160:cigs.numeric -> trestbps.numeric
1604936211160:cigs.numeric <-> years.numeric
1604936211160:cp -> num
1604936211160:fbs -> num
1604936211161:sex -> cigs.numeric
1604936211161:sex -> cp
1604936211161:sex -> thal
1604936211161:thal -> cp
1604936211162:sex -> years.numeric
1604936211162:thal -> num
1604936211162:trestbps.numeric -> ca
1604936211162:trestbps.numeric -> cp
1604936211162:trestbps.numeric -> thal
1604936211163:years.numeric -> chol.numeric
1604936211163:years.numeric -> fbs
1604936211164:years.numeric -> trestbps.numeric
1604936211164:sex -> ca
1604936211164:}
1604936211164:')
1604936211166:####################################################################
1604936211166:# testing model
1604936211167:plot(g)
1604936211353:impliedConditionalIndependencies(g)
1604936211371:#Execute local tests
1604936211371:localTests(g,prep,type="cis.chisq", max.conditioning.variables=3)
1604936211830:localTests(g,prep)
1604936211843:#impliedConditionalIndependencies(g)
1604936211843:####################################################################
1604936211844:## Create training and test set ##
1604936211844:##################################
1604936211844:set.seed(13)
1604936211844:#Select only variables we need (numeric)
1604936211844:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1604936211849:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19,21)#, 22)
1604936211854:data.binary$num.binary <- as.double(prep[,22])
1604936211854:# split the data
1604936211854:smp_size = floor(0.75 *  nrow(data))
1604936211855:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604936211855:train <-  data[train_ind,]
1604936211855:test <- data[-train_ind,]
1604936211856:train.binary <-  data.binary[train_ind,]
1604936211856:test.binary <- data.binary[-train_ind,]
1604936211856:train_neg = sum(train$num.binary==0)
1604936211857:train_pos = sum(train$num.binary==1)
1604936211857:test_neg = sum(test$num.binary==0)
1604936211857:test_pos = sum(test$num.binary==1)
1604936211857:train_ratio = train_pos/train_neg
1604936211857:test_ratio = test_pos/test_neg
1604936211858:####################################################################
1604936211858:##### INFERENCE #######
1604936211858:library(bnlearn)
1604936211858:library( pROC )
1604936211859:# build model
1604936211859:net <- model2network(toString(g,"bnlearn"))
1604936211861:# fit model based on training data
1604936211861:fit <- bn.fit(net, as.data.frame(train))
1604936211863:fit
1604936211865:predict <- data.frame(predict(fit,node="num", data=test))
1604936211866:# get accuracy of model
1604936211866:results= setNames(data.frame(predict), c("predicted"))
1604936211867:results$true=select(data.frame(test), "num")
1604936211869:# calculate true or false values
1604936211869:# round predicted values
1604936211869:results$predicted_rounded=round(results[,1], digits = 0)
1604936211869:# calculate error
1604936211870:results$error=(results$true-results$predicted_rounded)
1604936211870:# visualize results
1604936211871:# plot ROC
1604936211871:plot (multiclass.roc(results_df$true, results_df$predicted))
1604936211873:typeof(results[1,1])
1604936211873:########################################################################
1604936211873:# not scaling
1604936211874:fit <- bn.fit(net, as.data.frame(scale(train)))
1604936211875:########################################################################
1604936211876:# binary num values
1604936211876:#Make DAG
1604936211876:g.binary <- dagitty('
1604936211876:dag {
1604936211876:age.numeric [pos="0.262,-1.314"]
1604936211877:ca [pos="-1.351,0.555"]
1604936211877:chol.numeric [pos="-0.728,0.191"]
1604936211877:cigs.numeric [pos="-1.247,-0.466"]
1604936211877:cp [pos="0.348,-0.221"]
1604936211877:fbs [pos="-0.121,0.178"]
1604936211877:num.binary [pos="-0.667,1.153"]
1604936211878:sex [pos="-1.310,-1.357"]
1604936211878:thal [pos="-0.962,0.539"]
1604936211878:trestbps.numeric [pos="-1.247,0.178"]
1604936211878:years.numeric [pos="-0.270,-0.496"]
1604936211878:age.numeric -> cigs.numeric
1604936211878:age.numeric -> years.numeric
1604936211879:age.numeric -> trestbps.numeric
1604936211879:age.numeric -> num.binary
1604936211879:age.numeric -> ca
1604936211879:age.numeric -> chol.numeric
1604936211879:ca -> num.binary
1604936211879:chol.numeric -> num.binary
1604936211880:chol.numeric <-> trestbps.numeric
1604936211880:cigs.numeric -> chol.numeric
1604936211880:cigs.numeric -> cp
1604936211880:cigs.numeric -> fbs
1604936211880:cigs.numeric -> trestbps.numeric
1604936211881:cigs.numeric <-> years.numeric
1604936211881:cp -> num.binary
1604936211881:fbs -> num.binary
1604936211881:sex -> cigs.numeric
1604936211881:sex -> cp
1604936211881:sex -> thal
1604936211882:thal -> cp
1604936211882:sex -> years.numeric
1604936211882:thal -> num.binary
1604936211882:trestbps.numeric -> ca
1604936211882:trestbps.numeric -> cp
1604936211883:trestbps.numeric -> thal
1604936211883:years.numeric -> chol.numeric
1604936211883:years.numeric -> fbs
1604936211883:years.numeric -> trestbps.numeric
1604936211883:}
1604936211883:')
1604936211885:localTests(g.binary,prep,type="cis.chisq", max.conditioning.variables=3)
1604936212090:net.binary <- model2network(toString(g.binary,"bnlearn"))
1604936212093:fit.binary <- bn.fit(net.binary, as.data.frame(train.binary))
1604936212094:predict.binary <- data.frame(predict(fit.binary,node="num.binary", data=test.binary))
1604936212095:results.binary = setNames(data.frame(predict.binary), c("predicted"))
1604936212095:results.binary$true=select(data.frame(test.binary), "num.binary")
1604936212097:results.binary$predicted_rounded=round(results.binary[,1], digits = 0)
1604936212098:# calculate error
1604936212098:results.binary$error=(results.binary$true-results.binary$predicted_rounded)
1604936451775:plot( roc(results.binary$error,results.binary$true) )
1604936498432:plot( roc(results.binary$predicted,results.binary$true) )
1604936525858:plot( roc(results.binary$true,results.binary$predicted) )
1604936611418:View(results.binary)
1604936671012:cm_man.binary <- table(result.binary, test.binary$num)
1604936679863:cm_man.binary <- table(results.binary, test.binary$num)
1604936720141:cm_man.binary <- table(results.binary$predicted, test.binary$num)
1604936763949:cm_man.binary <- data.frame(results.binary$predicted, test.binary$num)
1604936766394:View(cm_man.binary)
1604936776939:View(cm_man.binary)
1604936846458:cm_man.binary <- data.frame(results.binary$predicted_rounded, test.binary$num)
1604936852682:cm_man.binary <- table(results.binary$predicted_rounded, test.binary$num)
1604936870151:cm_man.binary
1604937039744:plot( roc(results.binary$true,results.binary$predicted_rounded) )
1604937057206:cm_man.binary <- table(results.binary$predicted_rounded, test.binary$num.binary)
1604937057947:cm_man.binary
1604937072100:plot( roc(test.binary$num.binary,results.binary$predicted_rounded) )
1604937307548:library(caret)
1604937307549:library(dplyr)
1604937307550:library(dagitty)
1604937307550:library(Hmisc)
1604937307550:library(caTools)
1604937307550:library(bnlearn)
1604937307551:library(pROC)
1604937307551:#Load data
1604937310381:max
1604937312452:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604937322127:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt/BayesianNetwork")
1604937323554:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604937324536:head(d)
1604937331109:#sd <- select(d,"cigs")
1604937331109:#Select right variables
1604937331109:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1604937331117:#Filter out mising values
1604937331117:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1604937331120:nrow(prep)
1604937331120:nrow(subset)
1604937331120:#Plot data continous data
1604937331121:#hist(prep$age)
1604937331121:#hist(prep$chol)
1604937331121:#hist(prep$cigs)
1604937331121:#hist(prep$years)
1604937331121:#hist(prep$trestbps)
1604937331122:#Bin continous data into categorical data of 3 bins.
1604937331122:amountBins <- 3
1604937331122:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1604937331122:continuousVars <- unlist(continuousVars)
1604937331123:for(i in 1:length(continuousVars)){
1604937331123:varname <- continuousVars[i]
1604937331123:intervalValues.varname <- list()
1604937331123:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1604937331124:for(j in 1:length(intervals.varname)){
1604937331124:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1604937331124:intervals.fst <- intervals.t[1]
1604937331125:intervals.snd <- intervals.t[2]
1604937331125:nc.1 <- nchar(intervals.fst)
1604937331125:nc.2 <- nchar(intervals.snd)
1604937331125:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1604937331126:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1604937331126:}
1604937331127:intervalValues.varname <- unique(unlist(intervalValues.varname))
1604937331127:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1604937331127:intervalValues.varname[1] = intervalValues.varname[1]-1
1604937331128:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1604937331128:colname.D <-  paste(varname, ".discrete",sep="")
1604937331129:colname.N <- paste(varname, ".numeric", sep = "")
1604937331129:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1604937331130:prep[colname.N] <- as.numeric( prep[[colname.D]])
1604937331131:}
1604937331172:#### make target variable binary #####
1604937331173:## 0 --> 0 & 1,2,3 --> 1 #######
1604937331173:num.binary <- prep$num
1604937331173:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604937331177:#Make DAG
1604937331177:g <- dagitty('
1604937331177:dag {
1604937331177:age.numeric [pos="0.262,-1.314"]
1604937331178:ca [pos="-1.351,0.555"]
1604937331178:chol.numeric [pos="-0.728,0.191"]
1604937331178:cigs.numeric [pos="-1.247,-0.466"]
1604937331178:cp [pos="0.348,-0.221"]
1604937331178:fbs [pos="-0.121,0.178"]
1604937331179:num [pos="-0.667,1.153"]
1604937331179:sex [pos="-1.310,-1.357"]
1604937331179:thal [pos="-0.962,0.539"]
1604937331179:trestbps.numeric [pos="-1.247,0.178"]
1604937331180:years.numeric [pos="-0.270,-0.496"]
1604937331180:age.numeric -> cigs.numeric
1604937331180:age.numeric -> years.numeric
1604937331180:age.numeric -> trestbps.numeric
1604937331180:age.numeric -> num
1604937331181:age.numeric -> ca
1604937331181:age.numeric -> chol.numeric
1604937331181:ca -> num
1604937331181:chol.numeric -> num
1604937331181:chol.numeric <-> trestbps.numeric
1604937331181:cigs.numeric -> chol.numeric
1604937331182:cigs.numeric -> cp
1604937331182:cigs.numeric -> fbs
1604937331182:cigs.numeric -> trestbps.numeric
1604937331182:cigs.numeric <-> years.numeric
1604937331182:cp -> num
1604937331183:fbs -> num
1604937331183:sex -> cigs.numeric
1604937331183:sex -> cp
1604937331183:sex -> thal
1604937331184:thal -> cp
1604937331184:sex -> years.numeric
1604937331184:thal -> num
1604937331184:trestbps.numeric -> ca
1604937331184:trestbps.numeric -> cp
1604937331185:trestbps.numeric -> thal
1604937331185:years.numeric -> chol.numeric
1604937331185:years.numeric -> fbs
1604937331185:years.numeric -> trestbps.numeric
1604937331186:}
1604937331186:')
1604937331188:#Make DAG
1604937331188:g.binary <- dagitty('
1604937331188:dag {
1604937331189:age.numeric [pos="0.262,-1.314"]
1604937331189:ca [pos="-1.351,0.555"]
1604937331189:chol.numeric [pos="-0.728,0.191"]
1604937331189:cigs.numeric [pos="-1.247,-0.466"]
1604937331189:cp [pos="0.348,-0.221"]
1604937331190:fbs [pos="-0.121,0.178"]
1604937331190:num.binary [pos="-0.667,1.153"]
1604937331190:sex [pos="-1.310,-1.357"]
1604937331190:thal [pos="-0.962,0.539"]
1604937331190:trestbps.numeric [pos="-1.247,0.178"]
1604937331191:years.numeric [pos="-0.270,-0.496"]
1604937331191:age.numeric -> cigs.numeric
1604937331191:age.numeric -> years.numeric
1604937331191:age.numeric -> trestbps.numeric
1604937331191:age.numeric -> num.binary
1604937331192:age.numeric -> ca
1604937331192:age.numeric -> chol.numeric
1604937331192:ca -> num.binary
1604937331192:chol.numeric -> num.binary
1604937331192:chol.numeric <-> trestbps.numeric
1604937331192:cigs.numeric -> chol.numeric
1604937331193:cigs.numeric -> cp
1604937331193:cigs.numeric -> fbs
1604937331193:cigs.numeric -> trestbps.numeric
1604937331193:cigs.numeric <-> years.numeric
1604937331193:cp -> num.binary
1604937331194:fbs -> num.binary
1604937331194:sex -> cigs.numeric
1604937331194:sex -> cp
1604937331194:sex -> thal
1604937331194:thal -> cp
1604937331195:sex -> years.numeric
1604937331195:thal -> num.binary
1604937331195:trestbps.numeric -> ca
1604937331195:trestbps.numeric -> cp
1604937331195:trestbps.numeric -> thal
1604937331196:years.numeric -> chol.numeric
1604937331196:years.numeric -> fbs
1604937331196:years.numeric -> trestbps.numeric
1604937331196:}
1604937331196:')
1604937331198:#Execute local tests
1604937331198:localTests(g,prep,type="cis.chisq", max.conditioning.variables=2)
1604937331363:#localTests(g.binary,prep,type="cis.chisq")#, max.conditioning.variables=5)
1604937331364:#impliedConditionalIndependencies(g)
1604937331364:##################################
1604937331364:## Create training and test set ##
1604937331364:##################################
1604937331364:set.seed(13)
1604937331365:#Select only variables we need (numeric)
1604937331365:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1604937331372:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19,21)#, 22)
1604937331378:data.binary$num.binary <- as.double(prep[,22])
1604937331379:# split the data using 4 category for "num"
1604937331379:smp_size = floor(0.75 *  nrow(data))
1604937331379:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604937331380:train <-  data[train_ind,]
1604937331380:test <- data[-train_ind,]
1604937331381:# split the data using 2 (binary) category for "num" [0 -> 0; 1,2,3,4 -> 1]
1604937331381:smp_size.binary = floor(0.75 *  nrow(data.binary))
1604937331381:train_ind.binary <- sample(seq_len(nrow(data.binary)), size = smp_size.binary)
1604937331381:train.binary <-  data.binary[train_ind.binary,]
1604937331382:test.binary <- data.binary[-train_ind.binary,]
1604937331382:train_neg = sum(train$num.binary==0)
1604937331383:train_pos = sum(train$num.binary==1)
1604937331383:test_neg = sum(test$num.binary==0)
1604937331383:test_pos = sum(test$num.binary==1)
1604937331383:train_ratio = train_pos/train_neg
1604937331384:test_ratio = test_pos/test_neg
1604937331384:##### INFERENCE #######
1604937331384:##### Naive Bayes #####
1604937331384:library(naivebayes)
1604937331385:#Predict heart disease prescence with 4 categories of "num"
1604937331385:net <- model2network(toString(g,"bnlearn"))
1604937331388:fit <- bn.fit(net, as.data.frame(train))
1604937331389:result <- predict(fit,node="num", data=test)
1604937331390:result <- round(result,digit=0)
1604937331390:#test$num
1604937331390:cm_man <- table(result, test$num)
1604937331391:#Predict heart disease prescence with 2 (binary) categories of "num"
1604937331391:net.binary <- model2network(toString(g.binary,"bnlearn"))
1604937331394:fit.binary <- bn.fit(net.binary, as.data.frame(train.binary))
1604937331395:result.binary <- predict(fit.binary,node="num.binary", data=test.binary)
1604937331395:result.binary <- round(result.binary,digit=0)
1604937331396:#test$num
1604937331396:cm_man.binary <- table(result.binary, test.binary$num)
1604937331396:cm_man.binary
1604937331397:#Visualize ROC curve with 4 categories of "num"
1604937331397:auc <- multiclass.roc(test$num,result)
1604937331409:#Visualize ROC curve with 2 (binary) categories of "num"
1604937331409:auc.binary <- roc(test.binary$num,result)
1604937331411:randomResults <- list()
1604937331411:for(i in 1:nrow(test)-1){
1604937331411:randomResults <- append(randomResults, sample(0:4,1))
1604937331412:}
1604937331417:randomResults <- unlist(randomResults )
1604937331417:aucRandom <- multiclass.roc(test$num,randomResults)
1604937340030:cm_man.binary
1604937532968:set.seed(13)
1604937562683:#Make DAG
1604937562684:g.binary <- dagitty('
1604937562684:dag {
1604937562684:age.numeric [pos="0.262,-1.314"]
1604937562684:ca [pos="-1.351,0.555"]
1604937562685:chol.numeric [pos="-0.728,0.191"]
1604937562685:cigs.numeric [pos="-1.247,-0.466"]
1604937562685:cp [pos="0.348,-0.221"]
1604937562685:fbs [pos="-0.121,0.178"]
1604937562685:num.binary [pos="-0.667,1.153"]
1604937562686:sex [pos="-1.310,-1.357"]
1604937562686:thal [pos="-0.962,0.539"]
1604937562686:trestbps.numeric [pos="-1.247,0.178"]
1604937562686:years.numeric [pos="-0.270,-0.496"]
1604937562686:age.numeric -> cigs.numeric
1604937562687:age.numeric -> years.numeric
1604937562687:age.numeric -> trestbps.numeric
1604937562687:age.numeric -> num.binary
1604937562687:age.numeric -> ca
1604937562687:age.numeric -> chol.numeric
1604937562688:ca -> num.binary
1604937562688:chol.numeric -> num.binary
1604937562688:chol.numeric <-> trestbps.numeric
1604937562688:cigs.numeric -> chol.numeric
1604937562688:cigs.numeric -> cp
1604937562689:cigs.numeric -> fbs
1604937562689:cigs.numeric -> trestbps.numeric
1604937562689:cigs.numeric <-> years.numeric
1604937562689:cp -> num.binary
1604937562689:fbs -> num.binary
1604937562690:sex -> cigs.numeric
1604937562690:sex -> cp
1604937562690:sex -> thal
1604937562690:thal -> cp
1604937562690:sex -> years.numeric
1604937562691:thal -> num.binary
1604937562691:trestbps.numeric -> ca
1604937562691:trestbps.numeric -> cp
1604937562691:trestbps.numeric -> thal
1604937562691:years.numeric -> chol.numeric
1604937562692:years.numeric -> fbs
1604937562692:years.numeric -> trestbps.numeric
1604937562692:}
1604937562692:')
1604937562695:localTests(g.binary,prep,type="cis.chisq", max.conditioning.variables=3)
1604937562998:net.binary <- model2network(toString(g.binary,"bnlearn"))
1604937563001:fit.binary <- bn.fit(net.binary, as.data.frame(train.binary))
1604937563002:predict.binary <- data.frame(predict(fit.binary,node="num.binary", data=test.binary))
1604937563003:results.binary = setNames(data.frame(predict.binary), c("predicted"))
1604937563004:results.binary$true=select(data.frame(test.binary), "num.binary")
1604937563006:results.binary$predicted_rounded=round(results.binary[,1], digits = 0)
1604937563006:# calculate error
1604937563007:results.binary$error=(results.binary$true-results.binary$predicted_rounded)
1604937563007:cm_man.binary <- table(results.binary$predicted_rounded, test.binary$num.binary)
1604937563008:cm_man.binary
1604937882245:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt")
1604937882247:# load csv
1604937882249:#all_df <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1604937882251:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604937892755:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt")
1604937892757:# load csv
1604937892759:#all_df <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1604937892760:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604937906460:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt/BayesianNetwork")
1604937906462:# load csv
1604937906464:#all_df <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1604937906466:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604938145632:#Select right variables
1604938145634:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1604938145653:#Filter out mising values
1604938145655:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1604938145668:nrow(prep)
1604938145670:nrow(subset)
1604938149092:# load csv
1604938149094:#all_df <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1604938149096:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604938152006:#Bin continous data into categorical data of 3 bins.
1604938152008:amountBins <- 3
1604938152011:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1604938152016:continuousVars <- unlist(continuousVars)
1604938152020:for(i in 1:length(continuousVars)){
1604938152021:varname <- continuousVars[i]
1604938152023:intervalValues.varname <- list()
1604938152025:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1604938152028:for(j in 1:length(intervals.varname)){
1604938152032:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1604938152033:intervals.fst <- intervals.t[1]
1604938152035:intervals.snd <- intervals.t[2]
1604938152036:nc.1 <- nchar(intervals.fst)
1604938152038:nc.2 <- nchar(intervals.snd)
1604938152039:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1604938152041:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1604938152044:}
1604938152046:intervalValues.varname <- unique(unlist(intervalValues.varname))
1604938152047:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1604938152049:intervalValues.varname[1] = intervalValues.varname[1]-1
1604938152050:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1604938152054:colname.D <-  paste(varname, ".discrete",sep="")
1604938152055:colname.N <- paste(varname, ".numeric", sep = "")
1604938152057:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1604938152059:prep[colname.N] <- as.numeric( prep[[colname.D]])
1604938152061:}
1604938197586:library(dplyr)
1604938197588:library(dagitty)
1604938197590:library(Hmisc)
1604938197591:library(caTools)
1604938197593:library(bnlearn)
1604938197595:library( pROC )
1604938609720:localTests(g.binary,prep,type="cis.chisq", max.conditioning.variables=3)
1604938614607:#Make DAG
1604938614609:g.binary <- dagitty('
1604938614611:dag {
1604938614612:age.numeric [pos="0.262,-1.314"]
1604938614614:ca [pos="-1.351,0.555"]
1604938614616:chol.numeric [pos="-0.728,0.191"]
1604938614618:cigs.numeric [pos="-1.247,-0.466"]
1604938614619:cp [pos="0.348,-0.221"]
1604938614621:fbs [pos="-0.121,0.178"]
1604938614622:num.binary [pos="-0.667,1.153"]
1604938614624:sex [pos="-1.310,-1.357"]
1604938614626:thal [pos="-0.962,0.539"]
1604938614627:trestbps.numeric [pos="-1.247,0.178"]
1604938614629:years.numeric [pos="-0.270,-0.496"]
1604938614630:age.numeric -> cigs.numeric
1604938614631:age.numeric -> years.numeric
1604938614633:age.numeric -> trestbps.numeric
1604938614634:age.numeric -> num.binary
1604938614636:age.numeric -> ca
1604938614637:age.numeric -> chol.numeric
1604938614639:ca -> num.binary
1604938614641:chol.numeric -> num.binary
1604938614642:chol.numeric <-> trestbps.numeric
1604938614644:cigs.numeric -> chol.numeric
1604938614645:cigs.numeric -> cp
1604938614647:cigs.numeric -> fbs
1604938614648:cigs.numeric -> trestbps.numeric
1604938614650:cigs.numeric <-> years.numeric
1604938614652:cp -> num.binary
1604938614653:fbs -> num.binary
1604938614655:sex -> cigs.numeric
1604938614656:sex -> cp
1604938614658:sex -> thal
1604938614659:thal -> cp
1604938614661:sex -> years.numeric
1604938614662:thal -> num.binary
1604938614664:trestbps.numeric -> ca
1604938614665:trestbps.numeric -> cp
1604938614667:trestbps.numeric -> thal
1604938614669:years.numeric -> chol.numeric
1604938614670:years.numeric -> fbs
1604938614671:years.numeric -> trestbps.numeric
1604938614673:}
1604938614675:')
1604938620664:#Bin continous data into categorical data of 3 bins.
1604938620666:amountBins <- 3
1604938620669:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1604938620673:continuousVars <- unlist(continuousVars)
1604938620676:for(i in 1:length(continuousVars)){
1604938620678:varname <- continuousVars[i]
1604938620679:intervalValues.varname <- list()
1604938620681:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1604938620684:for(j in 1:length(intervals.varname)){
1604938620688:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1604938620689:intervals.fst <- intervals.t[1]
1604938620691:intervals.snd <- intervals.t[2]
1604938620693:nc.1 <- nchar(intervals.fst)
1604938620694:nc.2 <- nchar(intervals.snd)
1604938620696:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1604938620698:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1604938620701:}
1604938620702:intervalValues.varname <- unique(unlist(intervalValues.varname))
1604938620704:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1604938620706:intervalValues.varname[1] = intervalValues.varname[1]-1
1604938620708:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1604938620711:colname.D <-  paste(varname, ".discrete",sep="")
1604938620713:colname.N <- paste(varname, ".numeric", sep = "")
1604938620714:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1604938620716:prep[colname.N] <- as.numeric( prep[[colname.D]])
1604938620718:}
1604938622555:set.seed(13)
1604938622557:#Select only variables we need (numeric)
1604938622559:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1604938622575:# split the data
1604938622577:smp_size = floor(0.75 *  nrow(data))
1604938622580:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604938622583:train <-  data[train_ind,]
1604938622593:test <- data[-train_ind,]
1604938624025:num.binary <- prep$num
1604938624028:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604938624099:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19,21)#, 22)
1604938624114:data.binary$num.binary <- as.double(prep[,22])
1604938624125:train.binary <-  data.binary[train_ind,]
1604938624136:test.binary <- data.binary[-train_ind,]
1604938625510:train_neg = sum(train$num.binary==0)
1604938625513:train_pos = sum(train$num.binary==1)
1604938625516:test_neg = sum(test$num.binary==0)
1604938625518:test_pos = sum(test$num.binary==1)
1604938625521:train_ratio = train_pos/train_neg
1604938625524:test_ratio = test_pos/test_neg
1604938644847:#Make DAG
1604938644848:g.binary <- dagitty('
1604938644850:dag {
1604938644852:age.numeric [pos="0.262,-1.314"]
1604938644853:ca [pos="-1.351,0.555"]
1604938644855:chol.numeric [pos="-0.728,0.191"]
1604938644856:cigs.numeric [pos="-1.247,-0.466"]
1604938644858:cp [pos="0.348,-0.221"]
1604938644859:fbs [pos="-0.121,0.178"]
1604938644861:num.binary [pos="-0.667,1.153"]
1604938644862:sex [pos="-1.310,-1.357"]
1604938644864:thal [pos="-0.962,0.539"]
1604938644865:trestbps.numeric [pos="-1.247,0.178"]
1604938644867:years.numeric [pos="-0.270,-0.496"]
1604938644868:age.numeric -> cigs.numeric
1604938644869:age.numeric -> years.numeric
1604938644871:age.numeric -> trestbps.numeric
1604938644872:age.numeric -> num.binary
1604938644874:age.numeric -> ca
1604938644875:age.numeric -> chol.numeric
1604938644877:ca -> num.binary
1604938644879:chol.numeric -> num.binary
1604938644880:chol.numeric <-> trestbps.numeric
1604938644882:cigs.numeric -> chol.numeric
1604938644883:cigs.numeric -> cp
1604938644885:cigs.numeric -> fbs
1604938644886:cigs.numeric -> trestbps.numeric
1604938644888:cigs.numeric <-> years.numeric
1604938644890:cp -> num.binary
1604938644891:fbs -> num.binary
1604938644893:sex -> cigs.numeric
1604938644894:sex -> cp
1604938644896:sex -> thal
1604938644898:thal -> cp
1604938644899:sex -> years.numeric
1604938644901:thal -> num.binary
1604938644902:trestbps.numeric -> ca
1604938644904:trestbps.numeric -> cp
1604938644906:trestbps.numeric -> thal
1604938644908:years.numeric -> chol.numeric
1604938644909:years.numeric -> fbs
1604938644911:years.numeric -> trestbps.numeric
1604938644912:}
1604938644914:')
1604938644921:# plot dat
1604938644923:plot(g)
1604938700761:#Bin continous data into categorical data of 3 bins.
1604938700763:amountBins <- 3
1604938700766:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1604938700771:continuousVars <- unlist(continuousVars)
1604938700774:for(i in 1:length(continuousVars)){
1604938700776:varname <- continuousVars[i]
1604938700777:intervalValues.varname <- list()
1604938700779:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1604938700782:for(j in 1:length(intervals.varname)){
1604938700786:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1604938700788:intervals.fst <- intervals.t[1]
1604938700790:intervals.snd <- intervals.t[2]
1604938700791:nc.1 <- nchar(intervals.fst)
1604938700793:nc.2 <- nchar(intervals.snd)
1604938700794:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1604938700796:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1604938700799:}
1604938700800:intervalValues.varname <- unique(unlist(intervalValues.varname))
1604938700802:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1604938700803:intervalValues.varname[1] = intervalValues.varname[1]-1
1604938700805:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1604938700808:colname.D <-  paste(varname, ".discrete",sep="")
1604938700810:colname.N <- paste(varname, ".numeric", sep = "")
1604938700811:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1604938700813:prep[colname.N] <- as.numeric( prep[[colname.D]])
1604938700816:}
1604938700936:prep
1604938718190:set.seed(13)
1604938718192:#Select only variables we need (numeric)
1604938718194:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1604938718210:# split the data
1604938718212:smp_size = floor(0.75 *  nrow(data))
1604938718215:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604938718218:train <-  data[train_ind,]
1604938718228:test <- data[-train_ind,]
1604938718238:test
1604938764638:num.binary <- prep$num
1604938764639:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604938764708:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19,21)#, 22)
1604938764761:data.binary$num.binary <- as.double(prep[,22])
1604938764771:train.binary <-  data.binary[train_ind,]
1604938764780:test.binary <- data.binary[-train_ind,]
1604938764789:test.binary
1604938851102:net.binary <- model2network(toString(g.binary,"bnlearn"))
1604938851138:fit.binary <- bn.fit(net.binary, as.data.frame(train.binary))
1604938851194:fit
1604938992139:predict.binary <- data.frame(predict(fit.binary,node="num.binary", data=test.binary))
1604938992144:results.binary = setNames(data.frame(predict.binary), c("predicted"))
1604938992148:results.binary$true=select(data.frame(test.binary), "num.binary")
1604938992155:results.binary$predicted_rounded=round(results.binary[,1], digits = 0)
1604938992161:# calculate error
1604938992163:results.binary$error=(results.binary$true-results.binary$predicted_rounded)
1604938992170:results
1604939005513:predict.binary <- data.frame(predict(fit.binary,node="num.binary", data=test.binary))
1604939005518:results.binary = setNames(data.frame(predict.binary), c("predicted"))
1604939005521:results.binary$true=select(data.frame(test.binary), "num.binary")
1604939005529:results.binary$predicted_rounded=round(results.binary[,1], digits = 0)
1604939005535:# calculate error
1604939005537:results.binary$error=(results.binary$true-results.binary$predicted_rounded)
1604939005544:results.binary
1604939017090:cm_man.binary <- table(results.binary$predicted_rounded, test.binary$num.binary)
1604939017096:cm_man.binary
1604939020951:hist(results$error, )
1604939026620:plot( roc(test.binary$num.binary,results.binary$predicted_rounded) )
1604939053267:cm_man.binary <- table(results.binary$predicted_rounded, test.binary$num.binary)
1604939053272:cm_man.binary
1604939212025:auc.binary <- roc(test.binary$num.binary,result.binary)
1604939212054:auc.binary
1604939258847:#Load data
1604939258848:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt/BayesianNetwork")
1604939259973:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604939267781:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1604939267788:#Filter out mising values
1604939267788:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1604939267790:nrow(prep)
1604939267790:nrow(subset)
1604939267790:#Plot data continous data
1604939267791:#hist(prep$age)
1604939267791:#hist(prep$chol)
1604939267791:#hist(prep$cigs)
1604939267791:#hist(prep$years)
1604939267791:#hist(prep$trestbps)
1604939267792:#Bin continous data into categorical data of 3 bins.
1604939267792:amountBins <- 3
1604939267792:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1604939267793:continuousVars <- unlist(continuousVars)
1604939267793:for(i in 1:length(continuousVars)){
1604939267793:varname <- continuousVars[i]
1604939267793:intervalValues.varname <- list()
1604939267794:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1604939267794:for(j in 1:length(intervals.varname)){
1604939267794:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1604939267794:intervals.fst <- intervals.t[1]
1604939267795:intervals.snd <- intervals.t[2]
1604939267795:nc.1 <- nchar(intervals.fst)
1604939267795:nc.2 <- nchar(intervals.snd)
1604939267796:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1604939267796:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1604939267797:}
1604939267797:intervalValues.varname <- unique(unlist(intervalValues.varname))
1604939267797:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1604939267798:intervalValues.varname[1] = intervalValues.varname[1]-1
1604939267798:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1604939267799:colname.D <-  paste(varname, ".discrete",sep="")
1604939267799:colname.N <- paste(varname, ".numeric", sep = "")
1604939267800:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1604939267800:prep[colname.N] <- as.numeric( prep[[colname.D]])
1604939267801:}
1604939267831:#### make target variable binary #####
1604939267832:## 0 --> 0 & 1,2,3 --> 1 #######
1604939267832:num.binary <- prep$num
1604939267832:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604939267834:#Make DAG
1604939267835:g <- dagitty('
1604939267835:dag {
1604939267835:age.numeric [pos="0.262,-1.314"]
1604939267835:ca [pos="-1.351,0.555"]
1604939267835:chol.numeric [pos="-0.728,0.191"]
1604939267836:cigs.numeric [pos="-1.247,-0.466"]
1604939267836:cp [pos="0.348,-0.221"]
1604939267836:fbs [pos="-0.121,0.178"]
1604939267836:num [pos="-0.667,1.153"]
1604939267836:sex [pos="-1.310,-1.357"]
1604939267837:thal [pos="-0.962,0.539"]
1604939267837:trestbps.numeric [pos="-1.247,0.178"]
1604939267837:years.numeric [pos="-0.270,-0.496"]
1604939267837:age.numeric -> cigs.numeric
1604939267837:age.numeric -> years.numeric
1604939267837:age.numeric -> trestbps.numeric
1604939267838:age.numeric -> num
1604939267838:age.numeric -> ca
1604939267838:age.numeric -> chol.numeric
1604939267838:ca -> num
1604939267838:chol.numeric -> num
1604939267838:chol.numeric <-> trestbps.numeric
1604939267839:cigs.numeric -> chol.numeric
1604939267839:cigs.numeric -> cp
1604939267839:cigs.numeric -> fbs
1604939267839:cigs.numeric -> trestbps.numeric
1604939267839:cigs.numeric <-> years.numeric
1604939267840:cp -> num
1604939267840:fbs -> num
1604939267840:sex -> cigs.numeric
1604939267840:sex -> cp
1604939267840:sex -> thal
1604939267840:thal -> cp
1604939267841:sex -> years.numeric
1604939267841:thal -> num
1604939267841:trestbps.numeric -> ca
1604939267841:trestbps.numeric -> cp
1604939267841:trestbps.numeric -> thal
1604939267842:years.numeric -> chol.numeric
1604939267842:years.numeric -> fbs
1604939267842:years.numeric -> trestbps.numeric
1604939267842:}
1604939267842:')
1604939267844:#Make DAG
1604939267844:g.binary <- dagitty('
1604939267845:dag {
1604939267845:age.numeric [pos="0.262,-1.314"]
1604939267845:ca [pos="-1.351,0.555"]
1604939267845:chol.numeric [pos="-0.728,0.191"]
1604939267846:cigs.numeric [pos="-1.247,-0.466"]
1604939267846:cp [pos="0.348,-0.221"]
1604939267846:fbs [pos="-0.121,0.178"]
1604939267846:num.binary [pos="-0.667,1.153"]
1604939267846:sex [pos="-1.310,-1.357"]
1604939267846:thal [pos="-0.962,0.539"]
1604939267847:trestbps.numeric [pos="-1.247,0.178"]
1604939267847:years.numeric [pos="-0.270,-0.496"]
1604939267847:age.numeric -> cigs.numeric
1604939267847:age.numeric -> years.numeric
1604939267847:age.numeric -> trestbps.numeric
1604939267847:age.numeric -> num.binary
1604939267848:age.numeric -> ca
1604939267848:age.numeric -> chol.numeric
1604939267848:ca -> num.binary
1604939267848:chol.numeric -> num.binary
1604939267848:chol.numeric <-> trestbps.numeric
1604939267848:cigs.numeric -> chol.numeric
1604939267849:cigs.numeric -> cp
1604939267849:cigs.numeric -> fbs
1604939267849:cigs.numeric -> trestbps.numeric
1604939267849:cigs.numeric <-> years.numeric
1604939267849:cp -> num.binary
1604939267849:fbs -> num.binary
1604939267850:sex -> cigs.numeric
1604939267850:sex -> cp
1604939267850:sex -> thal
1604939267850:thal -> cp
1604939267850:sex -> years.numeric
1604939267851:thal -> num.binary
1604939267851:trestbps.numeric -> ca
1604939267851:trestbps.numeric -> cp
1604939267851:trestbps.numeric -> thal
1604939267851:years.numeric -> chol.numeric
1604939267852:years.numeric -> fbs
1604939267852:years.numeric -> trestbps.numeric
1604939267852:}
1604939267852:')
1604939267854:#Execute local tests
1604939267854:localTests(g,prep,type="cis.chisq", max.conditioning.variables=2)
1604939267967:#localTests(g.binary,prep,type="cis.chisq")#, max.conditioning.variables=5)
1604939267968:#impliedConditionalIndependencies(g)
1604939267968:##################################
1604939267968:## Create training and test set ##
1604939267968:##################################
1604939267968:set.seed(13)
1604939267969:#Select only variables we need (numeric)
1604939267969:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1604939267973:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19)#, 22)
1604939267976:data.binary$num.binary <- as.double(prep[,22])
1604939267977:# split the data using 4 category for "num"
1604939267977:smp_size = floor(0.75 *  nrow(data))
1604939267977:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604939267977:train <-  data[train_ind,]
1604939267977:test <- data[-train_ind,]
1604939267978:# split the data using 2 (binary) category for "num" [0 -> 0; 1,2,3,4 -> 1]
1604939267978:smp_size.binary = floor(0.75 *  nrow(data.binary))
1604939267978:train_ind.binary <- sample(seq_len(nrow(data.binary)), size = smp_size.binary)
1604939267978:train.binary <-  data.binary[train_ind.binary,]
1604939267979:test.binary <- data.binary[-train_ind.binary,]
1604939267979:train_neg = sum(train$num.binary==0)
1604939267979:train_pos = sum(train$num.binary==1)
1604939267979:test_neg = sum(test$num.binary==0)
1604939267979:test_pos = sum(test$num.binary==1)
1604939267980:train_ratio = train_pos/train_neg
1604939267980:test_ratio = test_pos/test_neg
1604939267980:##### INFERENCE #######
1604939267980:##### Naive Bayes #####
1604939267980:library(naivebayes)
1604939267981:#Predict heart disease prescence with 4 categories of "num"
1604939267981:net <- model2network(toString(g,"bnlearn"))
1604939267983:fit <- bn.fit(net, as.data.frame(train))
1604939267984:result <- predict(fit,node="num", data=test)
1604939267984:result <- round(result,digit=0)
1604939267984:#test$num
1604939267984:cm_man <- table(result, test$num)
1604939267985:#Predict heart disease prescence with 2 (binary) categories of "num"
1604939267985:net.binary <- model2network(toString(g.binary,"bnlearn"))
1604939267987:fit.binary <- bn.fit(net.binary, as.data.frame(train.binary))
1604939267987:result.binary <- predict(fit.binary,node="num.binary", data=test.binary)
1604939267988:result.binary <- round(result.binary,digit=0)
1604939267988:#test$num
1604939267988:cm_man.binary <- table(result.binary, test.binary$num.binary)
1604939267989:cm_man.binary
1604939267989:#Visualize ROC curve with 4 categories of "num"
1604939267989:auc <- multiclass.roc(test$num,result)
1604939267997:#Visualize ROC curve with 2 (binary) categories of "num"
1604939267997:auc.binary <- roc(test.binary$num.binary,result.binary)
1604939267998:plot(roc(test.binary$num.binary,result.binary))
1604939268010:#Compare results with randomly assigning prediction using 4 categories of "num"
1604939268010:randomResults <- list()
1604939268010:for(i in 1:nrow(test)-1){
1604939268011:randomResults <- append(randomResults, sample(0:4,1))
1604939268011:}
1604939268014:randomResults <- unlist(randomResults )
1604939268014:aucRandom <- multiclass.roc(test$num,randomResults)
1604939282011:auc.binary
1604939365205:plot( roc(test.binary$num.binary,results.binary$predicted_rounded) )
1604939373954:plot( roc(test.binary$num.binary,results.binary$predicted_rounded) )
1604939379601:auc.binary <- roc(test.binary$num.binary,result.binary)
1604939379631:auc.binary
1604939490969:# load csv
1604939490971:#all_df <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1604939490972:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604939492338:#Select right variables
1604939492339:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1604939492359:#Filter out mising values
1604939492363:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1604939492376:nrow(prep)
1604939492379:nrow(subset)
1604939542913:# load csv
1604939542914:#all_df <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1604939542916:d.all <- read.csv("data/all_processed",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604939559862:# load csv
1604939559864:#all_df <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1604939559866:d.all <- read.csv("data/all_processed.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604939606678:#Bin continous data into categorical data of 3 bins.
1604939606679:amountBins <- 3
1604939606683:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1604939606688:continuousVars <- unlist(continuousVars)
1604939606691:for(i in 1:length(continuousVars)){
1604939606693:varname <- continuousVars[i]
1604939606695:intervalValues.varname <- list()
1604939606696:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1604939606700:for(j in 1:length(intervals.varname)){
1604939606704:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1604939606706:intervals.fst <- intervals.t[1]
1604939606707:intervals.snd <- intervals.t[2]
1604939606709:nc.1 <- nchar(intervals.fst)
1604939606711:nc.2 <- nchar(intervals.snd)
1604939606713:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1604939606715:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1604939606718:}
1604939606719:intervalValues.varname <- unique(unlist(intervalValues.varname))
1604939606721:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1604939606722:intervalValues.varname[1] = intervalValues.varname[1]-1
1604939606724:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1604939606727:colname.D <-  paste(varname, ".discrete",sep="")
1604939606729:colname.N <- paste(varname, ".numeric", sep = "")
1604939606731:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1604939606733:prep[colname.N] <- as.numeric( prep[[colname.D]])
1604939606734:}
1604939606810:prep
1604939747353:set.seed(13)
1604939747355:#Select only variables we need (numeric)
1604939747357:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1604939747377:# split the data
1604939747379:smp_size = floor(0.75 *  nrow(data))
1604939747382:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604939747386:train <-  data[train_ind,]
1604939747399:test <- data[-train_ind,]
1604939747411:test
1604939749228:num.binary <- prep$num
1604939749232:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604939749313:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19)
1604939749327:data.binary$num.binary <- as.double(prep[,22])
1604939749338:train.binary <-  data.binary[train_ind,]
1604939749348:test.binary <- data.binary[-train_ind,]
1604939749359:test.binary
1604939779422:train_neg = sum(train$num.binary==0)
1604939779425:train_pos = sum(train$num.binary==1)
1604939779428:test_neg = sum(test$num.binary==0)
1604939779431:test_pos = sum(test$num.binary==1)
1604939779434:train_ratio = train_pos/train_neg
1604939779437:test_ratio = test_pos/test_neg
1604939779441:#test.metrics =
1604939779443:test.metrics
1604939784989:train_neg = sum(train$num.binary==0)
1604939784992:train_pos = sum(train$num.binary==1)
1604939784995:test_neg = sum(test$num.binary==0)
1604939784998:test_pos = sum(test$num.binary==1)
1604939785001:train_ratio = train_pos/train_neg
1604939785004:test_ratio = test_pos/test_neg
1604939785008:#test.metrics =
1604939785010:#test.metrics
1604939844870:#Make DAG
1604939844872:g.binary <- dagitty('
1604939844873:dag {
1604939844875:age.numeric [pos="0.262,-1.314"]
1604939844877:ca [pos="-1.351,0.555"]
1604939844878:chol.numeric [pos="-0.728,0.191"]
1604939844880:cigs.numeric [pos="-1.247,-0.466"]
1604939844882:cp [pos="0.348,-0.221"]
1604939844883:fbs [pos="-0.121,0.178"]
1604939844885:num.binary [pos="-0.667,1.153"]
1604939844886:sex [pos="-1.310,-1.357"]
1604939844888:thal [pos="-0.962,0.539"]
1604939844890:trestbps.numeric [pos="-1.247,0.178"]
1604939844892:years.numeric [pos="-0.270,-0.496"]
1604939844893:age.numeric -> cigs.numeric
1604939844895:age.numeric -> years.numeric
1604939844896:age.numeric -> trestbps.numeric
1604939844898:age.numeric -> num.binary
1604939844899:age.numeric -> ca
1604939844901:age.numeric -> chol.numeric
1604939844902:ca -> num.binary
1604939844904:chol.numeric -> num.binary
1604939844906:chol.numeric <-> trestbps.numeric
1604939844907:cigs.numeric -> chol.numeric
1604939844909:cigs.numeric -> cp
1604939844910:cigs.numeric -> fbs
1604939844912:cigs.numeric -> trestbps.numeric
1604939844913:cigs.numeric <-> years.numeric
1604939844915:cp -> num.binary
1604939844916:fbs -> num.binary
1604939844918:sex -> cigs.numeric
1604939844919:sex -> cp
1604939844921:sex -> thal
1604939844922:thal -> cp
1604939844924:sex -> years.numeric
1604939844925:thal -> num.binary
1604939844927:trestbps.numeric -> ca
1604939844928:trestbps.numeric -> cp
1604939844930:trestbps.numeric -> thal
1604939844931:years.numeric -> chol.numeric
1604939844933:years.numeric -> fbs
1604939844934:years.numeric -> trestbps.numeric
1604939844936:}
1604939844937:')
1604939844944:# plot dat
1604939844946:plot(g)
1604939849227:localTests(g.binary,prep,type="cis.chisq", max.conditioning.variables=3)
1604939851552:net.binary <- model2network(toString(g.binary,"bnlearn"))
1604939851594:fit.binary <- bn.fit(net.binary, as.data.frame(train.binary))
1604939955336:library(dplyr)
1604939955338:library(dagitty)
1604939955339:library(Hmisc)
1604939955341:library(caTools)
1604939955342:library(bnlearn)
1604939955344:library( pROC )
1604939956243:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt/BayesianNetwork")
1604939958222:# load csv
1604939958224:#all_df <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1604939958225:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604939959902:#Select right variables
1604939959904:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1604939959920:#Filter out mising values
1604939959922:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1604939959934:nrow(prep)
1604939959937:nrow(subset)
1604939962474:# load csv
1604939962476:d.all <- read.csv("data/all_processed.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604939968617:#Bin continous data into categorical data of 3 bins.
1604939968618:amountBins <- 3
1604939968621:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1604939968626:continuousVars <- unlist(continuousVars)
1604939968630:for(i in 1:length(continuousVars)){
1604939968631:varname <- continuousVars[i]
1604939968633:intervalValues.varname <- list()
1604939968635:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1604939968638:for(j in 1:length(intervals.varname)){
1604939968641:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1604939968643:intervals.fst <- intervals.t[1]
1604939968644:intervals.snd <- intervals.t[2]
1604939968646:nc.1 <- nchar(intervals.fst)
1604939968647:nc.2 <- nchar(intervals.snd)
1604939968649:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1604939968650:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1604939968653:}
1604939968655:intervalValues.varname <- unique(unlist(intervalValues.varname))
1604939968657:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1604939968658:intervalValues.varname[1] = intervalValues.varname[1]-1
1604939968660:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1604939968664:colname.D <-  paste(varname, ".discrete",sep="")
1604939968666:colname.N <- paste(varname, ".numeric", sep = "")
1604939968668:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1604939968669:prep[colname.N] <- as.numeric( prep[[colname.D]])
1604939968671:}
1604939968741:prep
1604939971212:set.seed(13)
1604939971214:#Select only variables we need (numeric)
1604939971216:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1604939971235:# split the data
1604939971236:smp_size = floor(0.75 *  nrow(data))
1604939971239:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604939971242:train <-  data[train_ind,]
1604939971254:test <- data[-train_ind,]
1604939971264:test
1604939973155:num.binary <- prep$num
1604939973158:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604939973238:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19)
1604939973253:data.binary$num.binary <- as.double(prep[,22])
1604939973263:train.binary <-  data.binary[train_ind,]
1604939973273:test.binary <- data.binary[-train_ind,]
1604939973284:test.binary
1604939974864:train_neg = sum(train$num.binary==0)
1604939974867:train_pos = sum(train$num.binary==1)
1604939974870:test_neg = sum(test$num.binary==0)
1604939974872:test_pos = sum(test$num.binary==1)
1604939974875:train_ratio = train_pos/train_neg
1604939974877:test_ratio = test_pos/test_neg
1604939974881:#test.metrics =
1604939974882:#test.metrics
1604939976245:#Make DAG
1604939976247:g.binary <- dagitty('
1604939976248:dag {
1604939976250:age.numeric [pos="0.262,-1.314"]
1604939976251:ca [pos="-1.351,0.555"]
1604939976253:chol.numeric [pos="-0.728,0.191"]
1604939976254:cigs.numeric [pos="-1.247,-0.466"]
1604939976256:cp [pos="0.348,-0.221"]
1604939976257:fbs [pos="-0.121,0.178"]
1604939976258:num.binary [pos="-0.667,1.153"]
1604939976260:sex [pos="-1.310,-1.357"]
1604939976261:thal [pos="-0.962,0.539"]
1604939976263:trestbps.numeric [pos="-1.247,0.178"]
1604939976264:years.numeric [pos="-0.270,-0.496"]
1604939976265:age.numeric -> cigs.numeric
1604939976267:age.numeric -> years.numeric
1604939976269:age.numeric -> trestbps.numeric
1604939976271:age.numeric -> num.binary
1604939976272:age.numeric -> ca
1604939976274:age.numeric -> chol.numeric
1604939976275:ca -> num.binary
1604939976276:chol.numeric -> num.binary
1604939976279:chol.numeric <-> trestbps.numeric
1604939976281:cigs.numeric -> chol.numeric
1604939976282:cigs.numeric -> cp
1604939976284:cigs.numeric -> fbs
1604939976286:cigs.numeric -> trestbps.numeric
1604939976288:cigs.numeric <-> years.numeric
1604939976290:cp -> num.binary
1604939976292:fbs -> num.binary
1604939976294:sex -> cigs.numeric
1604939976295:sex -> cp
1604939976297:sex -> thal
1604939976298:thal -> cp
1604939976300:sex -> years.numeric
1604939976301:thal -> num.binary
1604939976303:trestbps.numeric -> ca
1604939976304:trestbps.numeric -> cp
1604939976305:trestbps.numeric -> thal
1604939976307:years.numeric -> chol.numeric
1604939976308:years.numeric -> fbs
1604939976310:years.numeric -> trestbps.numeric
1604939976311:}
1604939976313:')
1604939976320:# plot dat
1604939976321:plot(g)
1604939984622:#Make DAG
1604939984624:g.binary <- dagitty('
1604939984625:dag {
1604939984627:age.numeric [pos="0.262,-1.314"]
1604939984628:ca [pos="-1.351,0.555"]
1604939984629:chol.numeric [pos="-0.728,0.191"]
1604939984631:cigs.numeric [pos="-1.247,-0.466"]
1604939984632:cp [pos="0.348,-0.221"]
1604939984634:fbs [pos="-0.121,0.178"]
1604939984635:num.binary [pos="-0.667,1.153"]
1604939984636:sex [pos="-1.310,-1.357"]
1604939984638:thal [pos="-0.962,0.539"]
1604939984639:trestbps.numeric [pos="-1.247,0.178"]
1604939984641:years.numeric [pos="-0.270,-0.496"]
1604939984642:age.numeric -> cigs.numeric
1604939984644:age.numeric -> years.numeric
1604939984645:age.numeric -> trestbps.numeric
1604939984647:age.numeric -> num.binary
1604939984648:age.numeric -> ca
1604939984650:age.numeric -> chol.numeric
1604939984652:ca -> num.binary
1604939984653:chol.numeric -> num.binary
1604939984655:chol.numeric <-> trestbps.numeric
1604939984657:cigs.numeric -> chol.numeric
1604939984658:cigs.numeric -> cp
1604939984660:cigs.numeric -> fbs
1604939984661:cigs.numeric -> trestbps.numeric
1604939984662:cigs.numeric <-> years.numeric
1604939984664:cp -> num.binary
1604939984665:fbs -> num.binary
1604939984667:sex -> cigs.numeric
1604939984669:sex -> cp
1604939984671:sex -> thal
1604939984673:thal -> cp
1604939984674:sex -> years.numeric
1604939984676:thal -> num.binary
1604939984677:trestbps.numeric -> ca
1604939984679:trestbps.numeric -> cp
1604939984681:trestbps.numeric -> thal
1604939984682:years.numeric -> chol.numeric
1604939984684:years.numeric -> fbs
1604939984685:years.numeric -> trestbps.numeric
1604939984687:}
1604939984689:')
1604939984695:# plot dat
1604939984697:plot(g.binary)
1604939989189:localTests(g.binary,prep,type="cis.chisq", max.conditioning.variables=3)
1604939993261:net.binary <- model2network(toString(g.binary,"bnlearn"))
1604939993298:fit.binary <- bn.fit(net.binary, as.data.frame(train.binary))
1604940004897:View(test)
1604940008942:View(test.binary)
1604940011324:View(test)
1604940012158:View(test.binary)
1604940013096:View(test)
1604940013897:View(train)
1604940057675:num.binary <- prep$num
1604940057678:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604940057763:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19)
1604940057778:data.binary$num.binary <- as.double(prep[,22])
1604940057789:train.binary <-  data.binary[train_ind,]
1604940057799:test.binary <- data.binary[-train_ind,]
1604940057809:test.binary
1604940099647:#Make DAG
1604940099648:g.binary <- dagitty('
1604940099650:dag {
1604940099651:age.numeric [pos="0.262,-1.314"]
1604940099653:ca [pos="-1.351,0.555"]
1604940099654:chol.numeric [pos="-0.728,0.191"]
1604940099655:cigs.numeric [pos="-1.247,-0.466"]
1604940099657:cp [pos="0.348,-0.221"]
1604940099658:fbs [pos="-0.121,0.178"]
1604940099660:num.binary [pos="-0.667,1.153"]
1604940099661:sex [pos="-1.310,-1.357"]
1604940099663:thal [pos="-0.962,0.539"]
1604940099665:trestbps.numeric [pos="-1.247,0.178"]
1604940099667:years.numeric [pos="-0.270,-0.496"]
1604940099668:age.numeric -> cigs.numeric
1604940099670:age.numeric -> years.numeric
1604940099672:age.numeric -> trestbps.numeric
1604940099673:age.numeric -> num.binary
1604940099674:age.numeric -> ca
1604940099676:age.numeric -> chol.numeric
1604940099677:ca -> num.binary
1604940099678:chol.numeric -> num.binary
1604940099680:chol.numeric <-> trestbps.numeric
1604940099682:cigs.numeric -> chol.numeric
1604940099683:cigs.numeric -> cp
1604940099684:cigs.numeric -> fbs
1604940099686:cigs.numeric -> trestbps.numeric
1604940099687:cigs.numeric <-> years.numeric
1604940099689:cp -> num.binary
1604940099690:fbs -> num.binary
1604940099691:sex -> cigs.numeric
1604940099693:sex -> cp
1604940099694:sex -> thal
1604940099696:thal -> cp
1604940099697:sex -> years.numeric
1604940099699:thal -> num.binary
1604940099700:trestbps.numeric -> ca
1604940099702:trestbps.numeric -> cp
1604940099703:trestbps.numeric -> thal
1604940099704:years.numeric -> chol.numeric
1604940099706:years.numeric -> fbs
1604940099707:years.numeric -> trestbps.numeric
1604940099708:}
1604940099710:')
1604940099716:# plot dat
1604940099717:plot(g.binary)
1604940108921:net.binary <- model2network(toString(g.binary,"bnlearn"))
1604940108964:fit.binary <- bn.fit(net.binary, as.data.frame(train.binary))
1604940122546:library(caret)
1604940122547:library(dplyr)
1604940122548:library(dagitty)
1604940122548:library(Hmisc)
1604940122548:library(caTools)
1604940122549:library(bnlearn)
1604940122549:library(pROC)
1604940122549:#Load data
1604940122549:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt/BayesianNetwork")
1604940122550:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604940122556:#d <- read.csv("D:/Documents/INFORMATICA/Ms Data Science/Bayesian Networks/Assignment 1/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604940122556:head(d)
1604940122568:#sd <- select(d,"cigs")
1604940122568:#Select right variables
1604940122569:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1604940122575:#Filter out mising values
1604940122575:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1604940122578:nrow(prep)
1604940122578:nrow(subset)
1604940122578:#Plot data continous data
1604940122578:#hist(prep$age)
1604940122579:#hist(prep$chol)
1604940122579:#hist(prep$cigs)
1604940122579:#hist(prep$years)
1604940122579:#hist(prep$trestbps)
1604940122579:#Bin continous data into categorical data of 3 bins.
1604940122579:amountBins <- 3
1604940122580:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1604940122580:continuousVars <- unlist(continuousVars)
1604940122580:for(i in 1:length(continuousVars)){
1604940122580:varname <- continuousVars[i]
1604940122581:intervalValues.varname <- list()
1604940122581:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1604940122581:for(j in 1:length(intervals.varname)){
1604940122581:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1604940122582:intervals.fst <- intervals.t[1]
1604940122582:intervals.snd <- intervals.t[2]
1604940122582:nc.1 <- nchar(intervals.fst)
1604940122582:nc.2 <- nchar(intervals.snd)
1604940122583:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1604940122583:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1604940122583:}
1604940122584:intervalValues.varname <- unique(unlist(intervalValues.varname))
1604940122584:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1604940122584:intervalValues.varname[1] = intervalValues.varname[1]-1
1604940122585:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1604940122585:colname.D <-  paste(varname, ".discrete",sep="")
1604940122586:colname.N <- paste(varname, ".numeric", sep = "")
1604940122586:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1604940122587:prep[colname.N] <- as.numeric( prep[[colname.D]])
1604940122587:}
1604940122626:#### make target variable binary #####
1604940122626:## 0 --> 0 & 1,2,3 --> 1 #######
1604940122626:num.binary <- prep$num
1604940122626:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604940122629:#Make DAG
1604940122629:g <- dagitty('
1604940122630:dag {
1604940122630:age.numeric [pos="0.262,-1.314"]
1604940122630:ca [pos="-1.351,0.555"]
1604940122630:chol.numeric [pos="-0.728,0.191"]
1604940122630:cigs.numeric [pos="-1.247,-0.466"]
1604940122630:cp [pos="0.348,-0.221"]
1604940122631:fbs [pos="-0.121,0.178"]
1604940122631:num [pos="-0.667,1.153"]
1604940122631:sex [pos="-1.310,-1.357"]
1604940122631:thal [pos="-0.962,0.539"]
1604940122631:trestbps.numeric [pos="-1.247,0.178"]
1604940122632:years.numeric [pos="-0.270,-0.496"]
1604940122632:age.numeric -> cigs.numeric
1604940122632:age.numeric -> years.numeric
1604940122632:age.numeric -> trestbps.numeric
1604940122632:age.numeric -> num
1604940122632:age.numeric -> ca
1604940122633:age.numeric -> chol.numeric
1604940122633:ca -> num
1604940122633:chol.numeric -> num
1604940122633:chol.numeric <-> trestbps.numeric
1604940122633:cigs.numeric -> chol.numeric
1604940122633:cigs.numeric -> cp
1604940122634:cigs.numeric -> fbs
1604940122634:cigs.numeric -> trestbps.numeric
1604940122634:cigs.numeric <-> years.numeric
1604940122634:cp -> num
1604940122634:fbs -> num
1604940122634:sex -> cigs.numeric
1604940122635:sex -> cp
1604940122635:sex -> thal
1604940122635:thal -> cp
1604940122635:sex -> years.numeric
1604940122635:thal -> num
1604940122635:trestbps.numeric -> ca
1604940122636:trestbps.numeric -> cp
1604940122636:trestbps.numeric -> thal
1604940122636:years.numeric -> chol.numeric
1604940122636:years.numeric -> fbs
1604940122636:years.numeric -> trestbps.numeric
1604940122636:}
1604940122637:')
1604940122639:#Make DAG
1604940122639:g.binary <- dagitty('
1604940122639:dag {
1604940122639:age.numeric [pos="0.262,-1.314"]
1604940122639:ca [pos="-1.351,0.555"]
1604940122639:chol.numeric [pos="-0.728,0.191"]
1604940122640:cigs.numeric [pos="-1.247,-0.466"]
1604940122640:cp [pos="0.348,-0.221"]
1604940122640:fbs [pos="-0.121,0.178"]
1604940122640:num.binary [pos="-0.667,1.153"]
1604940122640:sex [pos="-1.310,-1.357"]
1604940122641:thal [pos="-0.962,0.539"]
1604940122641:trestbps.numeric [pos="-1.247,0.178"]
1604940122641:years.numeric [pos="-0.270,-0.496"]
1604940122641:age.numeric -> cigs.numeric
1604940122641:age.numeric -> years.numeric
1604940122641:age.numeric -> trestbps.numeric
1604940122642:age.numeric -> num.binary
1604940122642:age.numeric -> ca
1604940122642:age.numeric -> chol.numeric
1604940122642:ca -> num.binary
1604940122642:chol.numeric -> num.binary
1604940122642:chol.numeric <-> trestbps.numeric
1604940122643:cigs.numeric -> chol.numeric
1604940122643:cigs.numeric -> cp
1604940122644:cigs.numeric -> fbs
1604940122644:cigs.numeric -> trestbps.numeric
1604940122644:cigs.numeric <-> years.numeric
1604940122644:cp -> num.binary
1604940122644:fbs -> num.binary
1604940122645:sex -> cigs.numeric
1604940122645:sex -> cp
1604940122645:sex -> thal
1604940122645:thal -> cp
1604940122645:sex -> years.numeric
1604940122645:thal -> num.binary
1604940122646:trestbps.numeric -> ca
1604940122646:trestbps.numeric -> cp
1604940122646:trestbps.numeric -> thal
1604940122646:years.numeric -> chol.numeric
1604940122646:years.numeric -> fbs
1604940122646:years.numeric -> trestbps.numeric
1604940122647:}
1604940122647:')
1604940122649:#Execute local tests
1604940122649:localTests(g,prep,type="cis.chisq", max.conditioning.variables=2)
1604940122807:#localTests(g.binary,prep,type="cis.chisq")#, max.conditioning.variables=5)
1604940122808:#impliedConditionalIndependencies(g)
1604940122808:##################################
1604940122808:## Create training and test set ##
1604940122808:##################################
1604940122809:set.seed(13)
1604940122809:#Select only variables we need (numeric)
1604940122809:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1604940122815:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19)#, 22)
1604940122820:data.binary$num.binary <- as.double(prep[,22])
1604940132403:library(caret)
1604940132403:library(dplyr)
1604940132404:library(dagitty)
1604940132404:library(Hmisc)
1604940132404:library(caTools)
1604940132405:library(bnlearn)
1604940132405:library(pROC)
1604940132405:#Load data
1604940132405:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt/BayesianNetwork")
1604940132406:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604940132410:#d <- read.csv("D:/Documents/INFORMATICA/Ms Data Science/Bayesian Networks/Assignment 1/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604940132411:head(d)
1604940132423:#sd <- select(d,"cigs")
1604940132423:#Select right variables
1604940132424:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1604940132430:#Filter out mising values
1604940132431:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1604940132432:nrow(prep)
1604940132433:nrow(subset)
1604940132433:#Plot data continous data
1604940132433:#hist(prep$age)
1604940132433:#hist(prep$chol)
1604940132434:#hist(prep$cigs)
1604940132434:#hist(prep$years)
1604940132434:#hist(prep$trestbps)
1604940132434:#Bin continous data into categorical data of 3 bins.
1604940132434:amountBins <- 3
1604940132435:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1604940132435:continuousVars <- unlist(continuousVars)
1604940132435:for(i in 1:length(continuousVars)){
1604940132435:varname <- continuousVars[i]
1604940132436:intervalValues.varname <- list()
1604940132436:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1604940132436:for(j in 1:length(intervals.varname)){
1604940132436:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1604940132437:intervals.fst <- intervals.t[1]
1604940132437:intervals.snd <- intervals.t[2]
1604940132437:nc.1 <- nchar(intervals.fst)
1604940132437:nc.2 <- nchar(intervals.snd)
1604940132438:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1604940132438:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1604940132439:}
1604940132439:intervalValues.varname <- unique(unlist(intervalValues.varname))
1604940132439:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1604940132440:intervalValues.varname[1] = intervalValues.varname[1]-1
1604940132440:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1604940132441:colname.D <-  paste(varname, ".discrete",sep="")
1604940132442:colname.N <- paste(varname, ".numeric", sep = "")
1604940132442:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1604940132443:prep[colname.N] <- as.numeric( prep[[colname.D]])
1604940132443:}
1604940132480:#### make target variable binary #####
1604940132480:## 0 --> 0 & 1,2,3 --> 1 #######
1604940132480:num.binary <- prep$num
1604940132481:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604940132484:#Make DAG
1604940132484:g <- dagitty('
1604940132484:dag {
1604940132484:age.numeric [pos="0.262,-1.314"]
1604940132484:ca [pos="-1.351,0.555"]
1604940132485:chol.numeric [pos="-0.728,0.191"]
1604940132485:cigs.numeric [pos="-1.247,-0.466"]
1604940132485:cp [pos="0.348,-0.221"]
1604940132485:fbs [pos="-0.121,0.178"]
1604940132485:num [pos="-0.667,1.153"]
1604940132485:sex [pos="-1.310,-1.357"]
1604940132486:thal [pos="-0.962,0.539"]
1604940132486:trestbps.numeric [pos="-1.247,0.178"]
1604940132486:years.numeric [pos="-0.270,-0.496"]
1604940132486:age.numeric -> cigs.numeric
1604940132486:age.numeric -> years.numeric
1604940132486:age.numeric -> trestbps.numeric
1604940132487:age.numeric -> num
1604940132487:age.numeric -> ca
1604940132487:age.numeric -> chol.numeric
1604940132487:ca -> num
1604940132487:chol.numeric -> num
1604940132487:chol.numeric <-> trestbps.numeric
1604940132488:cigs.numeric -> chol.numeric
1604940132488:cigs.numeric -> cp
1604940132488:cigs.numeric -> fbs
1604940132488:cigs.numeric -> trestbps.numeric
1604940132488:cigs.numeric <-> years.numeric
1604940132489:cp -> num
1604940132489:fbs -> num
1604940132489:sex -> cigs.numeric
1604940132489:sex -> cp
1604940132489:sex -> thal
1604940132489:thal -> cp
1604940132490:sex -> years.numeric
1604940132490:thal -> num
1604940132490:trestbps.numeric -> ca
1604940132490:trestbps.numeric -> cp
1604940132490:trestbps.numeric -> thal
1604940132490:years.numeric -> chol.numeric
1604940132491:years.numeric -> fbs
1604940132491:years.numeric -> trestbps.numeric
1604940132491:}
1604940132491:')
1604940132493:#Make DAG
1604940132493:g.binary <- dagitty('
1604940132493:dag {
1604940132493:age.numeric [pos="0.262,-1.314"]
1604940132493:ca [pos="-1.351,0.555"]
1604940132494:chol.numeric [pos="-0.728,0.191"]
1604940132494:cigs.numeric [pos="-1.247,-0.466"]
1604940132494:cp [pos="0.348,-0.221"]
1604940132494:fbs [pos="-0.121,0.178"]
1604940132494:num.binary [pos="-0.667,1.153"]
1604940132494:sex [pos="-1.310,-1.357"]
1604940132495:thal [pos="-0.962,0.539"]
1604940132495:trestbps.numeric [pos="-1.247,0.178"]
1604940132495:years.numeric [pos="-0.270,-0.496"]
1604940132495:age.numeric -> cigs.numeric
1604940132495:age.numeric -> years.numeric
1604940132495:age.numeric -> trestbps.numeric
1604940132496:age.numeric -> num.binary
1604940132496:age.numeric -> ca
1604940132496:age.numeric -> chol.numeric
1604940132496:ca -> num.binary
1604940132496:chol.numeric -> num.binary
1604940132496:chol.numeric <-> trestbps.numeric
1604940132497:cigs.numeric -> chol.numeric
1604940132497:cigs.numeric -> cp
1604940132497:cigs.numeric -> fbs
1604940132497:cigs.numeric -> trestbps.numeric
1604940132497:cigs.numeric <-> years.numeric
1604940132497:cp -> num.binary
1604940132498:fbs -> num.binary
1604940132498:sex -> cigs.numeric
1604940132498:sex -> cp
1604940132498:sex -> thal
1604940132498:thal -> cp
1604940132499:sex -> years.numeric
1604940132499:thal -> num.binary
1604940132499:trestbps.numeric -> ca
1604940132499:trestbps.numeric -> cp
1604940132499:trestbps.numeric -> thal
1604940132500:years.numeric -> chol.numeric
1604940132500:years.numeric -> fbs
1604940132500:years.numeric -> trestbps.numeric
1604940132500:}
1604940132500:')
1604940132502:#Execute local tests
1604940132502:localTests(g,prep,type="cis.chisq", max.conditioning.variables=2)
1604940132627:#localTests(g.binary,prep,type="cis.chisq")#, max.conditioning.variables=5)
1604940132627:#impliedConditionalIndependencies(g)
1604940132627:##################################
1604940132628:## Create training and test set ##
1604940132628:##################################
1604940132628:set.seed(13)
1604940132628:#Select only variables we need (numeric)
1604940132628:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1604940132633:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19)#, 22)
1604940132637:data.binary$num.binary <- as.double(prep[,22])
1604940160671:num.binary <- prep$num
1604940160672:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604940160758:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19, 21)
1604940160774:data.binary$num.binary <- as.double(prep[,22])
1604940160783:train.binary <-  data.binary[train_ind,]
1604940172900:# split the data using 4 category for "num"
1604940172900:smp_size = floor(0.75 *  nrow(data))
1604940172900:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604940172901:train <-  data[train_ind,]
1604940172901:test <- data[-train_ind,]
1604940172901:# split the data using 2 (binary) category for "num" [0 -> 0; 1,2,3,4 -> 1]
1604940172902:smp_size.binary = floor(0.75 *  nrow(data.binary))
1604940172902:train_ind.binary <- sample(seq_len(nrow(data.binary)), size = smp_size.binary)
1604940172902:train.binary <-  data.binary[train_ind.binary,]
1604940172903:test.binary <- data.binary[-train_ind.binary,]
1604940172903:train_neg = sum(train$num.binary==0)
1604940172904:train_pos = sum(train$num.binary==1)
1604940172904:test_neg = sum(test$num.binary==0)
1604940172904:test_pos = sum(test$num.binary==1)
1604940172904:train_ratio = train_pos/train_neg
1604940172904:test_ratio = test_pos/test_neg
1604940172905:##### INFERENCE #######
1604940172905:##### Naive Bayes #####
1604940172905:library(naivebayes)
1604940172906:#Predict heart disease prescence with 4 categories of "num"
1604940172906:net <- model2network(toString(g,"bnlearn"))
1604940172908:fit <- bn.fit(net, as.data.frame(train))
1604940172910:result <- predict(fit,node="num", data=test)
1604940172910:result <- round(result,digit=0)
1604940172910:#test$num
1604940172911:cm_man <- table(result, test$num)
1604940172911:#Predict heart disease prescence with 2 (binary) categories of "num"
1604940172912:net.binary <- model2network(toString(g.binary,"bnlearn"))
1604940172914:fit.binary <- bn.fit(net.binary, as.data.frame(train.binary))
1604940172915:result.binary <- predict(fit.binary,node="num.binary", data=test.binary)
1604940172916:result.binary <- round(result.binary,digit=0)
1604940172916:#test$num
1604940172916:cm_man.binary <- table(result.binary, test.binary$num.binary)
1604940172917:cm_man.binary
1604940177987:#Predict heart disease prescence with 2 (binary) categories of "num"
1604940177988:net.binary <- model2network(toString(g.binary,"bnlearn"))
1604940180969:fit.binary <- bn.fit(net.binary, as.data.frame(train.binary))
1604940215517:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1604940215523:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19)#, 22)
1604940215528:data.binary$num.binary <- as.double(prep[,22])
1604940227352:train <-  data[train_ind,]
1604940227353:test <- data[-train_ind,]
1604940237927:train.binary <-  data.binary[train_ind.binary,]
1604940237928:test.binary <- data.binary[-train_ind.binary,]
1604940259799:#Predict heart disease prescence with 2 (binary) categories of "num"
1604940259799:net.binary <- model2network(toString(g.binary,"bnlearn"))
1604940261599:result.binary <- predict(fit.binary,node="num.binary", data=test.binary)
1604940272513:net.binary <- model2network(toString(g.binary,"bnlearn"))
1604940272515:fit.binary <- bn.fit(net.binary, as.data.frame(train.binary))
1604940272516:result.binary <- predict(fit.binary,node="num.binary", data=test.binary)
1604940272517:result.binary <- round(result.binary,digit=0)
1604940286680:library(dplyr)
1604940286682:library(dagitty)
1604940286684:library(Hmisc)
1604940286685:library(caTools)
1604940286687:library(bnlearn)
1604940286688:library( pROC )
1604940286694:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt/BayesianNetwork")
1604940286699:# load csv
1604940286700:#all_df <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1604940286701:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604940286710:#Select right variables
1604940286711:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1604940286726:#Filter out mising values
1604940286728:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1604940286739:nrow(prep)
1604940286741:nrow(subset)
1604940286746:# load csv
1604940286748:d.all <- read.csv("data/all_processed.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604940290121:num.binary <- prep$num
1604940290124:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604940290184:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19, 21)
1604940302151:num.binary <- prep$num
1604940302153:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604940302251:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19,21)
1604940308334:View(prep)
1604940330860:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt/BayesianNetwork")
1604940332047:# load csv
1604940332049:#all_df <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1604940332050:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1604940335190:#Select right variables
1604940335191:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1604940335205:#Filter out mising values
1604940335207:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1604940335218:nrow(prep)
1604940335220:nrow(subset)
1604940339525:#Select right variables
1604940339527:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1604940339542:#Filter out mising values
1604940339544:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1604940339555:nrow(prep)
1604940339557:nrow(subset)
1604940342887:#Bin continous data into categorical data of 3 bins.
1604940342888:amountBins <- 3
1604940342891:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1604940342896:continuousVars <- unlist(continuousVars)
1604940342899:for(i in 1:length(continuousVars)){
1604940342901:varname <- continuousVars[i]
1604940342902:intervalValues.varname <- list()
1604940342904:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1604940342907:for(j in 1:length(intervals.varname)){
1604940342909:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1604940342911:intervals.fst <- intervals.t[1]
1604940342912:intervals.snd <- intervals.t[2]
1604940342914:nc.1 <- nchar(intervals.fst)
1604940342915:nc.2 <- nchar(intervals.snd)
1604940342917:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1604940342919:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1604940342921:}
1604940342923:intervalValues.varname <- unique(unlist(intervalValues.varname))
1604940342924:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1604940342926:intervalValues.varname[1] = intervalValues.varname[1]-1
1604940342928:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1604940342931:colname.D <-  paste(varname, ".discrete",sep="")
1604940342933:colname.N <- paste(varname, ".numeric", sep = "")
1604940342935:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1604940342936:prep[colname.N] <- as.numeric( prep[[colname.D]])
1604940342939:}
1604940342997:prep
1604940353837:set.seed(13)
1604940353839:#Select only variables we need (numeric)
1604940353840:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1604940353856:# split the data
1604940353858:smp_size = floor(0.75 *  nrow(data))
1604940353861:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1604940353864:train <-  data[train_ind,]
1604940353874:test <- data[-train_ind,]
1604940353884:test
1604940360173:num.binary <- prep$num
1604940360177:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1604940360244:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19,21)
1604940360257:data.binary$num.binary <- as.double(prep[,22])
1604940360267:train.binary <-  data.binary[train_ind,]
1604940360276:test.binary <- data.binary[-train_ind,]
1604940360287:test.binary
1604940365452:train_neg = sum(train$num.binary==0)
1604940365455:train_pos = sum(train$num.binary==1)
1604940365458:test_neg = sum(test$num.binary==0)
1604940365460:test_pos = sum(test$num.binary==1)
1604940365463:train_ratio = train_pos/train_neg
1604940365465:test_ratio = test_pos/test_neg
1604940365468:#test.metrics =
1604940365469:#test.metrics
1604940368491:#Make DAG
1604940368492:g.binary <- dagitty('
1604940368494:dag {
1604940368495:age.numeric [pos="0.262,-1.314"]
1604940368497:ca [pos="-1.351,0.555"]
1604940368499:chol.numeric [pos="-0.728,0.191"]
1604940368500:cigs.numeric [pos="-1.247,-0.466"]
1604940368502:cp [pos="0.348,-0.221"]
1604940368503:fbs [pos="-0.121,0.178"]
1604940368504:num.binary [pos="-0.667,1.153"]
1604940368506:sex [pos="-1.310,-1.357"]
1604940368507:thal [pos="-0.962,0.539"]
1604940368509:trestbps.numeric [pos="-1.247,0.178"]
1604940368510:years.numeric [pos="-0.270,-0.496"]
1604940368512:age.numeric -> cigs.numeric
1604940368513:age.numeric -> years.numeric
1604940368514:age.numeric -> trestbps.numeric
1604940368516:age.numeric -> num.binary
1604940368517:age.numeric -> ca
1604940368518:age.numeric -> chol.numeric
1604940368520:ca -> num.binary
1604940368521:chol.numeric -> num.binary
1604940368523:chol.numeric <-> trestbps.numeric
1604940368524:cigs.numeric -> chol.numeric
1604940368525:cigs.numeric -> cp
1604940368527:cigs.numeric -> fbs
1604940368528:cigs.numeric -> trestbps.numeric
1604940368530:cigs.numeric <-> years.numeric
1604940368531:cp -> num.binary
1604940368532:fbs -> num.binary
1604940368534:sex -> cigs.numeric
1604940368535:sex -> cp
1604940368536:sex -> thal
1604940368538:thal -> cp
1604940368539:sex -> years.numeric
1604940368541:thal -> num.binary
1604940368542:trestbps.numeric -> ca
1604940368543:trestbps.numeric -> cp
1604940368545:trestbps.numeric -> thal
1604940368546:years.numeric -> chol.numeric
1604940368548:years.numeric -> fbs
1604940368550:years.numeric -> trestbps.numeric
1604940368551:}
1604940368553:')
1604940368559:# plot dat
1604940368561:plot(g.binary)
1604940371446:localTests(g.binary,prep,type="cis.chisq", max.conditioning.variables=3)
1604940373643:net.binary <- model2network(toString(g.binary,"bnlearn"))
1604940373679:fit.binary <- bn.fit(net.binary, as.data.frame(train.binary))
1604940373738:fit
1604940381714:net.binary <- model2network(toString(g.binary,"bnlearn"))
1604940381750:fit.binary <- bn.fit(net.binary, as.data.frame(train.binary))
1604940381808:fit.binary
1604940385936:predict.binary <- data.frame(predict(fit.binary,node="num.binary", data=test.binary))
1604940385940:results.binary = setNames(data.frame(predict.binary), c("predicted"))
1604940385944:results.binary$true=select(data.frame(test.binary), "num.binary")
1604940385951:results.binary$predicted_rounded=round(results.binary[,1], digits = 0)
1604940385957:# calculate error
1604940385959:results.binary$error=(results.binary$true-results.binary$predicted_rounded)
1604940385966:results.binary
1604940392115:cm_man.binary <- table(results.binary$predicted_rounded, test.binary$num.binary)
1604940392120:cm_man.binary
1604940393992:auc.binary <- roc(test.binary$num.binary,result.binary)
1604940416882:auc.binary <- roc(test.binary$num.binary,results.binary$predicted_rounded)
1604940416911:auc.binary
1604940422148:plot( roc(test.binary$num.binary,results.binary$predicted_rounded) )
1604940467608:#Make DAG
1604940467610:g <- dagitty('
1604940467611:dag {
1604940467613:age.numeric [pos="0.262,-1.314"]
1604940467614:ca [pos="-1.351,0.555"]
1604940467616:chol.numeric [pos="-0.728,0.191"]
1604940467617:cigs.numeric [pos="-1.247,-0.466"]
1604940467619:cp [pos="0.348,-0.221"]
1604940467620:fbs [pos="-0.121,0.178"]
1604940467622:num [pos="-0.667,1.153"]
1604940467624:sex [pos="-1.310,-1.357"]
1604940467625:thal [pos="-0.962,0.539"]
1604940467626:trestbps.numeric [pos="-1.247,0.178"]
1604940467628:years.numeric [pos="-0.270,-0.496"]
1604940467630:age.numeric -> cigs.numeric
1604940467631:age.numeric -> years.numeric
1604940467633:age.numeric -> trestbps.numeric
1604940467634:age.numeric -> num
1604940467636:age.numeric -> ca
1604940467638:age.numeric -> chol.numeric
1604940467639:ca -> num
1604940467641:chol.numeric -> num
1604940467642:chol.numeric <-> trestbps.numeric
1604940467644:cigs.numeric -> chol.numeric
1604940467645:cigs.numeric -> cp
1604940467647:cigs.numeric -> fbs
1604940467648:cigs.numeric -> trestbps.numeric
1604940467650:cigs.numeric <-> years.numeric
1604940467652:cp -> num
1604940467653:fbs -> num
1604940467655:sex -> cigs.numeric
1604940467656:sex -> cp
1604940467658:sex -> thal
1604940467659:thal -> cp
1604940467661:sex -> years.numeric
1604940467663:thal -> num
1604940467664:trestbps.numeric -> ca
1604940467666:trestbps.numeric -> cp
1604940467667:trestbps.numeric -> thal
1604940467669:years.numeric -> chol.numeric
1604940467670:years.numeric -> fbs
1604940467672:years.numeric -> trestbps.numeric
1604940467673:}
1604940467675:')
1604940467680:# plot dat
1604940467682:plot(g)
1604940478032:localTests(g,prep,type="cis.chisq", max.conditioning.variables=3)
1604940496741:net <- model2network(toString(g,"bnlearn"))
1604940496776:fit <- bn.fit(net, as.data.frame(train))
1604940496837:fit
1604940545836:predict <- data.frame(predict(fit,node="num", data=test))
1604940545841:results= setNames(data.frame(predict), c("predicted"))
1604940545844:results$true=select(data.frame(test), "num")
1604940545851:results$predicted_rounded=round(results[,1], digits = 0)
1604940545857:# calculate error
1604940545859:results$error=(results$true-results$predicted_rounded)
1604940545865:results
1604940571012:hist(results.binary$error, )
1604940577344:hist(results$error, )
1604940591506:cm_man <- table(results$predicted_rounded, test$num.binary)
1604940602404:cm_man <- table(results$predicted_rounded, test$num)
1604940602409:cm_man
1604940625817:auc <- roc(test$num,results$predicted_rounded)
1604940625848:auc
1604940639490:plot( roc(test$num,results$predicted_rounded) )
1605300451405:library(dplyr)
1605300451709:library(dagitty)
1605300452008:library(Hmisc)
1605300453447:#library(caTools)
1605300453448:library(bnlearn)
1605300453568:library( pROC )
1605300502908:getwd()
1605300564176:#Change the work directory to your location of th data
1605300564178:setwd(getwd())
1605300564180:#setwd("D:/Documents/INFORMATICA/Ms Data Science/Bayesian Networks/BayesianNetwork")
1605300568812:# load csv
1605300568814:a.all <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1605300568878:d <- read.csv("data/dataCleveland.csv",header=TRUE,stringsAsFactors=FALSE)
1605300579506:#Select right variables
1605300579507:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1605300579531:#Filter out mising values
1605300579532:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1605300579547:nrow(prep)
1605300579550:nrow(subset)
1605300581522:hist(prep$age)
1605300581934:hist(prep$chol)
1605300581954:hist(prep$cigs)
1605300581973:hist(prep$years)
1605300581995:hist(prep$trestbps)
1605300633438:table( prep$age, prep$ca)
1605300636353:#Bin continuous data into categorical data of 3 bins.
1605300636355:amountBins <- 3
1605300636358:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1605300636362:continuousVars <- unlist(continuousVars)
1605300636365:for(i in 1:length(continuousVars)){
1605300636367:varname <- continuousVars[i]
1605300636368:intervalValues.varname <- list()
1605300636370:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1605300636373:for(j in 1:length(intervals.varname)){
1605300636376:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1605300636377:intervals.fst <- intervals.t[1]
1605300636378:intervals.snd <- intervals.t[2]
1605300636380:nc.1 <- nchar(intervals.fst)
1605300636381:nc.2 <- nchar(intervals.snd)
1605300636383:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1605300636384:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1605300636387:}
1605300636388:intervalValues.varname <- unique(unlist(intervalValues.varname))
1605300636390:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1605300636392:intervalValues.varname[1] = intervalValues.varname[1]-1
1605300636393:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1605300636396:colname.D <-  paste(varname, ".discrete",sep="")
1605300636397:colname.N <- paste(varname, ".numeric", sep = "")
1605300636399:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1605300636400:prep[colname.N] <- as.numeric( prep[[colname.D]])
1605300636402:}
1605300636457:prep
1605300638605:set.seed(13)
1605300638607:#Select only variables we need (numeric)
1605300638609:data <- select(prep, 2,3,4,9,10, 11,13,15,17,19,21)
1605300638625:# split the data
1605300638626:smp_size = floor(0.75 *  nrow(data))
1605300638629:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1605300638632:train <-  data[train_ind,]
1605300638642:test <- data[-train_ind,]
1605300638653:test
1605300640978:num.binary <- prep$num
1605300640981:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1605300641047:#Select only variables we need (numeric)
1605300641049:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19,21)
1605300641062:data.binary$num.binary <- as.double(prep[,22])
1605300641073:head(data.binary)
1605300641091:train.binary <-  data.binary[train_ind,]
1605300641100:test.binary <- data.binary[-train_ind,]
1605300641111:test.binary
1605300646396:data.neg = sum(data.binary$num.binary==0)
1605300646398:data.pos = sum(data.binary$num.binary==1)
1605300646401:train_neg = sum(train.binary$num.binary==0)
1605300646404:train_pos = sum(train.binary$num.binary==1)
1605300646406:test_neg = sum(test.binary$num.binary==0)
1605300646409:test_pos = sum(test.binary$num.binary==1)
1605300646412:train_pos_perc = train_pos/(train_neg+train_pos)
1605300646415:test_pos_perc = test_pos/(test_neg+test_pos)
1605300646417:data_pos_perc = data.pos/(data.neg+data.pos)
1605300646420:print(train_pos_perc)
1605300646423:print(test_pos_perc)
1605300646425:print(data_pos_perc)
1605300654376:#Make DAG
1605300654378:g.binary <- dagitty('
1605300654379:dag {
1605300654380:age.numeric [pos="0.262,-1.314"]
1605300654382:ca [pos="-1.351,0.555"]
1605300654383:chol.numeric [pos="-0.728,0.191"]
1605300654385:cigs.numeric [pos="-1.247,-0.466"]
1605300654387:cp [pos="0.348,-0.221"]
1605300654388:fbs [pos="-0.121,0.178"]
1605300654390:num.binary [pos="-0.667,1.153"]
1605300654391:sex [pos="-1.310,-1.357"]
1605300654393:thal [pos="-0.962,0.539"]
1605300654394:trestbps.numeric [pos="-1.247,0.178"]
1605300654396:years.numeric [pos="-0.270,-0.496"]
1605300654397:age.numeric -> cigs.numeric
1605300654399:age.numeric -> years.numeric
1605300654400:age.numeric -> trestbps.numeric
1605300654402:age.numeric -> num.binary
1605300654404:age.numeric -> ca
1605300654405:age.numeric -> chol.numeric
1605300654406:ca -> num.binary
1605300654408:chol.numeric -> num.binary
1605300654409:chol.numeric <-> trestbps.numeric
1605300654411:cigs.numeric -> chol.numeric
1605300654412:cigs.numeric -> cp
1605300654414:cigs.numeric -> fbs
1605300654415:cigs.numeric -> trestbps.numeric
1605300654417:cigs.numeric <-> years.numeric
1605300654418:cp -> num.binary
1605300654420:fbs -> num.binary
1605300654421:sex -> cigs.numeric
1605300654423:sex -> cp
1605300654424:sex -> thal
1605300654426:thal -> cp
1605300654427:sex -> years.numeric
1605300654429:thal -> num.binary
1605300654430:trestbps.numeric -> ca
1605300654431:trestbps.numeric -> cp
1605300654433:trestbps.numeric -> thal
1605300654434:years.numeric -> chol.numeric
1605300654436:years.numeric -> fbs
1605300654437:years.numeric -> trestbps.numeric
1605300654438:}
1605300654440:')
1605300654479:# plot causal diagram
1605300654481:plot(g.binary)
1605300659167:localTests(g.binary,prep,type="cis.chisq", max.conditioning.variables=3)
1605300662251:#Make DAG
1605300662253:g.notbinned <- dagitty('
1605300662254:dag {
1605300662256:age [pos="0.262,-1.314"]
1605300662257:ca [pos="-1.351,0.555"]
1605300662258:chol [pos="-0.728,0.191"]
1605300662260:cigs [pos="-1.247,-0.466"]
1605300662261:cp [pos="0.348,-0.221"]
1605300662263:fbs [pos="-0.121,0.178"]
1605300662264:num.binary [pos="-0.667,1.153"]
1605300662266:sex [pos="-1.310,-1.357"]
1605300662267:thal [pos="-0.962,0.539"]
1605300662268:trestbps [pos="-1.247,0.178"]
1605300662270:years [pos="-0.270,-0.496"]
1605300662271:age -> cigs
1605300662273:age -> years
1605300662274:age -> trestbps
1605300662276:age -> num.binary
1605300662277:age -> ca
1605300662279:age -> chol
1605300662280:ca -> num.binary
1605300662281:chol -> num.binary
1605300662283:chol <-> trestbps
1605300662284:cigs -> chol
1605300662286:cigs -> cp
1605300662287:cigs -> fbs
1605300662288:cigs -> trestbps
1605300662290:cigs <-> years
1605300662291:cp -> num.binary
1605300662292:fbs -> num.binary
1605300662294:sex -> cigs
1605300662295:sex -> cp
1605300662296:sex -> thal
1605300662298:thal -> cp
1605300662299:sex -> years
1605300662300:thal -> num.binary
1605300662302:trestbps -> ca
1605300662303:trestbps -> cp
1605300662305:trestbps -> thal
1605300662306:years -> chol
1605300662307:years -> fbs
1605300662309:years -> trestbps
1605300662310:}
1605300662311:')
1605300662318:localTests(g.notbinned,prep,type="cis.chisq", max.conditioning.variables=3)
1605300670850:#Translate integer columns to numeric (double) columns
1605300670852:train.binary$sex = as.numeric(train.binary$sex)
1605300670861:train.binary$cp = as.numeric(train.binary$cp)
1605300670870:train.binary$fbs = as.numeric(train.binary$fbs)
1605300670880:train.binary$thal = as.numeric(train.binary$thal)
1605300670889:train.binary$ca = as.numeric(train.binary$ca)
1605300670900:net.binary <- model2network(toString(g.binary,"bnlearn"))
1605300670936:plot(g.binary)
1605300670999:head(train.binary)
1605300671006:fit.binary <- bn.fit(net.binary, as.data.frame(train.binary))
1605300671070:fit.binary
1605300682526:#Translate integer columns to numeric (double) columns
1605300682528:test.binary$sex = as.numeric(test.binary$sex)
1605300682537:test.binary$cp = as.numeric(test.binary$cp)
1605300682546:test.binary$fbs = as.numeric(test.binary$fbs)
1605300682556:test.binary$thal = as.numeric(test.binary$thal)
1605300682565:test.binary$ca = as.numeric(test.binary$ca)
1605300682575:predict.binary <- data.frame(predict(fit.binary,node="num.binary", data=test.binary))
1605300682580:results.binary = setNames(data.frame(predict.binary), c("predicted"))
1605300682584:results.binary$true=unlist(select(data.frame(test.binary), "num.binary"))
1605300682591:results.binary$predicted_rounded=round(results.binary[,1], digits = 0)
1605300682596:# calculate error
1605300682597:results.binary$error=unlist((results.binary$true-results.binary$predicted_rounded))
1605300682603:results.binary
1605300706242:#Make DAG
1605300706244:g <- dagitty('
1605300706245:dag {
1605300706247:age.numeric [pos="0.262,-1.314"]
1605300706248:ca [pos="-1.351,0.555"]
1605300706249:chol.numeric [pos="-0.728,0.191"]
1605300706251:cigs.numeric [pos="-1.247,-0.466"]
1605300706253:cp [pos="0.348,-0.221"]
1605300706254:fbs [pos="-0.121,0.178"]
1605300706256:num [pos="-0.667,1.153"]
1605300706257:sex [pos="-1.310,-1.357"]
1605300706259:thal [pos="-0.962,0.539"]
1605300706260:trestbps.numeric [pos="-1.247,0.178"]
1605300706262:years.numeric [pos="-0.270,-0.496"]
1605300706263:age.numeric -> cigs.numeric
1605300706265:age.numeric -> years.numeric
1605300706266:age.numeric -> trestbps.numeric
1605300706268:age.numeric -> num
1605300706269:age.numeric -> ca
1605300706270:age.numeric -> chol.numeric
1605300706272:ca -> num
1605300706273:chol.numeric -> num
1605300706275:chol.numeric <-> trestbps.numeric
1605300706276:cigs.numeric -> chol.numeric
1605300706277:cigs.numeric -> cp
1605300706279:cigs.numeric -> fbs
1605300706280:cigs.numeric -> trestbps.numeric
1605300706282:cigs.numeric <-> years.numeric
1605300706283:cp -> num
1605300706284:fbs -> num
1605300706286:sex -> cigs.numeric
1605300706287:sex -> cp
1605300706288:sex -> thal
1605300706290:thal -> cp
1605300706291:sex -> years.numeric
1605300706293:thal -> num
1605300706294:trestbps.numeric -> ca
1605300706296:trestbps.numeric -> cp
1605300706297:trestbps.numeric -> thal
1605300706298:years.numeric -> chol.numeric
1605300706300:years.numeric -> fbs
1605300706301:years.numeric -> trestbps.numeric
1605300706303:}
1605300706304:')
1605300706310:# plot dat
1605300706311:plot(g)
1605300711314:localTests(g,prep,type="cis.chisq", max.conditioning.variables=3)
1605300715876:#Translate integer columns to numeric (double) columns
1605300715877:train$sex = as.numeric(train$sex)
1605300715887:train$cp = as.numeric(train$cp)
1605300715896:train$fbs = as.numeric(train$fbs)
1605300715905:train$thal = as.numeric(train$thal)
1605300715914:train$ca = as.numeric(train$ca)
1605300715923:train$num = as.numeric(train$num)
1605300715935:head(train)
1605300715942:data = select(train, 1,2,3,4,5,6,7,8,9,10,11)
1605300715957:plot(g)
1605300716004:net <- model2network(toString(g,"bnlearn"))
1605300716040:fit <- bn.fit(net, as.data.frame(data))
1605300716097:fit
1605300722127:#Translate integer columns to numeric (double) columns
1605300722128:test$sex = as.numeric(test$sex)
1605300722137:test$cp = as.numeric(test$cp)
1605300722147:test$fbs = as.numeric(test$fbs)
1605300722156:test$thal = as.numeric(test$thal)
1605300722165:test$ca = as.numeric(test$ca)
1605300722175:test$num = as.numeric(test$num)
1605300722184:data = select(test, 1,2,3,4,5,6,7,8,9,10,11)
1605300722199:predict <- data.frame(predict(fit,node="num", data=data))
1605300722203:results= setNames(data.frame(predict), c("predicted"))
1605300722207:results$true=unlist(select(data.frame(data), "num"))
1605300722213:results$predicted_rounded=round(results[,1], digits = 0)
1605300722218:# calculate error
1605300722219:results$error=unlist((results$true-results$predicted_rounded))
1605300722225:results
1605300776000:plot( roc(test.binary$num.binary,results.binary$predicted_rounded) )
1605300783932:plot( roc(test$num,results$predicted_rounded) )
1605300786916:auc <- roc(test$num,results$predicted_rounded)
1605300786952:auc
1605300818053:auc <- aoc(test$num,results$predicted_rounded)
1605300896064:auc <- auc(test$num,results$predicted_rounded)
1605300896086:auc
1606316963594:d1=read.table("student-mat.csv",sep=";",header=TRUE)
1606316965046:d3=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
1606316966298:d2=read.table("student-por.csv",sep=";",header=TRUE)
1606316974102:d3=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
1606316983077:View(d3)
1606316983293:View(d3)
1606316990574:View(d3)
1606317006637:View(d1)
1606317045861:View(d3)
1606317053699:View(d2)
1606317071639:head(d1)
1606317081408:head(d2)
1606317123102:all = merge(d1,d2)
1606317217456:all <- rbind(d1, d2)
1606317221660:View(all)
1606317425168:all <- unique(all[,list(V1)])
1606317708524:distinct(all)
1606317751037:library(tidyverse)
1606317757310:library(tidyverse)
1606317789631:install.packages(tidyverse)
1606317842228:install.packages("tidyverse")
1606317875487:library(tidyverse)
1606317885632:distinct(all)
1606317901919:all_distinct <- distinct(all)
1606317952625:all %>% distinct()
1606318017194:new <- all %>% distinct()
1606318076907:distinct(all, ..., .keep_all = FALSE)
1606318086245:distinct(all, keep_all = FALSE)
1606318099803:distinct(all, .keep_all = FALSE)
1606318108755:test = distinct(all, .keep_all = FALSE)
1606318178164:d1=read.table("student-mat.csv",sep=";",header=TRUE)
1606318178169:d2=read.table("student-por.csv",sep=";",header=TRUE)
1606318178175:d3=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
1606318178181:all <- rbind(d1, d2)
1606318178182:all_distinct <- distinct(all, .keep_all = FALSE)
1606318178184:head(d1)
1606318178189:head(d2)
1606318182468:d1=read.table("student-mat.csv",sep=";",header=TRUE)
1606318182473:d2=read.table("student-por.csv",sep=";",header=TRUE)
1606318182479:d3=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
1606318182484:all <- rbind(d1, d2)
1606318182485:all_distinct <- distinct(all, .keep_all = FALSE)
1606318182487:head(d1)
1606318182491:head(d2)
1606318197460:d1=read.table("student-mat.csv",sep=";",header=TRUE)
1606318197465:d2=read.table("student-por.csv",sep=";",header=TRUE)
1606318197471:all <- rbind(d1, d2)
1606318197472:all_distinct <- distinct(all, .keep_all = FALSE)
1606318197474:head(d1)
1606318197479:head(d2)
1606318209633:View(all)
1606318350085:d3=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
1606318781139:d1=read.table("data/student-mat.csv",sep=";",header=TRUE)
1606318790410:pwd
1606318869355:getcwd()
1606318880459:getwd()
1606318903580:getwd()
1606318910069:library(tidyverse)
1606318913781:getwd()
1606318930750:getwd()
1606318933954:d1=read.table("data/student-mat.csv",sep=";",header=TRUE)
1606318935590:d2=read.table("data/student-por.csv",sep=";",header=TRUE)
1608296770477:install.packages("tidyverse")
1608296775164:library(tidyverse)
1608296777123:d1=read.table("data/student-mat.csv",sep=";",header=TRUE)
1608296777129:d2=read.table("data/student-por.csv",sep=";",header=TRUE)
1608296777137:d3=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
1608296777144:all <- rbind(d1, d2)
1608296777146:all <- distinct(all, .keep_all = FALSE)
1608296777150:head(d1)
1608296777156:head(d2)
1608297496984:d1=read.table("data/student-mat.csv",sep=";",header=TRUE)
1608297496990:d2=read.table("data/student-por.csv",sep=";",header=TRUE)
1608297496996:d3=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
1608297497002:all <- rbind(d1, d2)
1608297497003:all <- distinct(all, .keep_all = FALSE)
1608297500358:View(all)
1608297500520:View(all)
1608297622962:library(bnlearn)
1608297623062:bn = naive.bayes(all, "G3")
1608297623097:pred = predict(bn, all)
1608297623124:table(pred, all[, "G3"])
1608297633822:library(bnlearn)
1608297636390:bn = naive.bayes(all, "G3")
1608297687917:View(d3)
1608297688103:View(d3)
1608298717301:data <- d3("age","sex","address","Pstatus","Medu", "Fedu","studytime","failures","absences","schoolsup","famsup","paid","higher","internet","romantic","famrel","freetime","goout","Dalc","Walc","health")
1608298815247:# celarn d3
1608298815248:# paid yes = 1 , no = 0
1608298815248:data <- select(d3,"age","sex","address","Pstatus","Medu", "Fedu","studytime","failures","absences","schoolsup","famsup","paid","higher","internet","romantic","famrel","freetime","goout","Dalc","Walc","health")
1608298851852:# celarn d3
1608298851853:# paid yes = 1 , no = 0
1608298851853:data <- select(d3,"age","sex","address","Pstatus","Medu", "Fedu","studytime","failures","absences","schoolsup","famsup","paid","higher","internet","romantic","famrel","freetime","goout","Dalc","Walc","health")
1608299152845:View(d2)
1608299165488:# celarn d3
1608299165488:# paid yes = 1 , no = 0
1608299165488:data <- select(d2,"age","sex","address","Pstatus","Medu", "Fedu","studytime","failures","absences","schoolsup","famsup","paid","higher","internet","romantic","famrel","freetime","goout","Dalc","Walc","health")
1608299169498:View(data)
1608299214320:min(data["age"])
1608299421570:test = min(data["age"])
1608299422935:test
1608299435691:type(test)
1608299450570:typeof(test)
1608299458977:data$age.bin <- select(data, "age")-min(data["age"])
1608299461441:View(data)
1608299510690:data$bin <- select(data, "age")-min(data["age"])
1608299534928:select(data, "age")-min(data["age"])
1608299582627:data$age.bin <- as.list(select(data, "age")-min(data["age"]))
1608299645219:data[,"age"]
1608299656886:data$age.bin <- data[,"age"]-min(data["age"])
1608300584689:# binary sex of student male = 0 female = 1
1608300584689:data$bin <- data[, "sex"]
1608300611393:View(data)
1608300625509:# bin age of students
1608300625510:data$binned <- data[,"age"]-min(data["age"])
1608300642427:# bin age of students
1608300642427:data$age.binned <- data[,"age"]-min(data["age"])
1608300659137:# binary sex of student male = 0 female = 1
1608300659137:data$sex.bin <- data[, "sex"]
1608300765361:data$sex.bin[data$sex.bin=="M"]=0
1608300765361:data$sex.bin[data$sex.bin=="F"]=1
1608300907063:data$address.bin[data$address=="U"]=1
1608300907064:data$address.bin[data$address=="R"]=0
1608301503218:data <- select(d2,"age","sex","address","Pstatus","guardian","Medu", "Fedu","studytime","failures","absences","schoolsup","famsup","paid","higher","internet","romantic","famrel","freetime","goout","Dalc","Walc","health")
1608301506941:data$age.binned <- data[,"age"]-min(data["age"])
1608301506941:# binary sex of student male = 0 female = 1
1608301506942:data$sex.bin[data$sex=="M"]=0
1608301506942:data$sex.bin[data$sex=="F"]=1
1608301506942:# clean up address U = urban = 1, rural = R = 0
1608301506942:#data$address.bin <- data[, "address"]
1608301506943:data$address.bin[data$address=="U"]=1
1608301506943:data$address.bin[data$address=="R"]=0
1608301506943:# family situation & parent education status
1608301506943:data$pstatus.bin[data$Pstatus=="T"]=1
1608301506944:data$pstatus.bin[data$Pstatus=="A"]=0
1608301656160:data$parent.edu.max[data$pstatsu=="T"]=apply(data[, "Medu", "Fedu"], 1, max)
1608301699188:data[, "Medu","Fedu"]
1608301707796:data[, ("Medu","Fedu")]
1608301725518:# if together -> highes education parent
1608301725518:data$parent.edu.max[data$pstatsu=="T"]=apply(select(data, "Medu", "Fedu"), 1, max)
1608301786906:select(data, "Medu", "Fedu")
1608301832965:select(data[data$Pstatus]=="T", "Medu", "Fedu")
1608301852046:data[data$Pstatus]=="T"
1608301886325:data[, data$Pstatus=="T"]
1608301912418:data$Pstatus=="T"
1608301950297:data[data$Pstatus=="T",]
1608302026916:data[data$Pstatus=="T",]
1608302040565:select(data[data$Pstatus=="T",], "Medu", "Fedu")
1608302055823:# if together -> highes education parent
1608302055824:data$parent.edu.max[data$pstatsu=="T"]=apply(select(data[data$Pstatus=="T",], "Medu", "Fedu"), 1, max)
1608302094174:do.call(pmax, select(data[data$Pstatus=="T",], "Medu", "Fedu"))
1608302105224:# if together -> highes education parent
1608302105225:data$parent.edu.max[data$pstatsu=="T"] = do.call(pmax, select(data[data$Pstatus=="T",], "Medu", "Fedu"))
1608302113827:# if together -> highes education parent
1608302113828:data$parent.edu.max[data$Pstatsu=="T"] = do.call(pmax, select(data[data$Pstatus=="T",], "Medu", "Fedu"))
1608302141886:test = do.call(pmax, select(data[data$Pstatus=="T",], "Medu", "Fedu"))
1608302165059:test = data.frame(do.call(pmax, select(data[data$Pstatus=="T",], "Medu", "Fedu")))
1608302169439:View(test)
1608302191753:data$Pstatsu=="T"]
1608302212841:data$Pstatus=="T"
1608302220988:# if together -> highes education parent
1608302220988:data$parent.edu.max[data$Pstatus=="T"] = do.call(pmax, select(data[data$Pstatus=="T",], "Medu", "Fedu"))
1608302369205:data$Pstatus=="T"
1608302396636:data[, data$Pstatus=="A"&&data$guardian=="mother"]
1608302486174:subset(data, Pstatus=="A" & guardian=="mother")
1608302518714:data$Pstatus=="A" & data$guardian=="mother"
1608302577311:data$parent.edu.max[data$Pstatus=="A" & data$guardian=="mother"] = data$Medu[data$Pstatus=="A" & data$guardian=="mother"]
1608302577311:data$parent.edu.max[data$Pstatus=="A" & data$guardian=="father"] = data$Fedu[data$Pstatus=="A" & data$guardian=="father"]
1608302774717:# filter out other guardian
1608302774717:data <- data[!(data$guardian=="other"),]
1608303133015:# aclochol consumption total
1608303133015:data$alc.tot = data$Walc+data$Dalc
1608303295293:data%schoolsup.bin[data$schoolsup=="yes"] = 1
1608303295293:data%schoolsup.bin[data$schoolsup=="no"] = 0
1608303295294:data%famsup[data$famsup=="yes"] = 1
1608303295294:data%famsup[data$famsup=="no"] = 0
1608303295294:data%paidsup[data$paidsup=="yes"] = 1
1608303295294:data%paidsup[data$paidsup=="no"] = 0
1608303324424:data%schoolsup.bin[data$schoolsup=="yes"] = 1
1608303325435:data%schoolsup.bin[data$schoolsup=="yes"] = 1
1608303326215:data%schoolsup.bin[data$schoolsup=="yes"] = 1
1608303767650:data$schoolsup=="yes"
1608303811854:data$schoolsup.bin[data$schoolsup=="yes"]=1
1608303845321:data%schoolsup.bin[data$schoolsup=="no"]=0
1608303856760:data$schoolsup.bin[data$schoolsup=="no"]=0
1608303951304:data$schoolsup.bin[data$schoolsup=="yes"]=1
1608303951304:data$schoolsup.bin[data$schoolsup=="no"]=0
1608303951304:data$famsup.bin[data$famsup=="yes"]=1
1608303951305:data$famsup.bin[data$famsup=="no"]=0
1608303951305:data$paidsup.bin[data$paid=="yes"]=1
1608303951305:data$paidsup.bin[data$paid=="no"]=0
1608304045661:sum(select(data, "schoolsup.bin","famsup.bin", "paidsup.bin"))
1608304083073:sum(data$schoolsup.bin, data$famsup.bin, data$paidsup.bin)
1608304099196:data$schoolsup.bin + data$famsup.bin + data$paidsup.bin
1608304107485:data$sup = data$schoolsup.bin + data$famsup.bin + data$paidsup.bin
1608304180551:data$internet.bin[data$internet=="yes"]==1
1608304180551:data$internet.bin[data$internet=="no"]==0
1608304530960:data$age.bin <- data[,"age"]-min(data["age"])
1608304642891:data$sup.total.bin = data$schoolsup.bin + data$famsup.bin + data$paidsup.bin
1608304658314:# columns for bayesian network
1608304658314:column.list = ["age.bin","sex.bin","address.bin","pstatus.bin","parent.edu.max","studytime", "fails", "absence", "sup.total.bin"]
1608304723953:# columns for bayesian network
1608304723953:column.list = list("age.bin","sex.bin","address.bin","pstatus.bin","parent.edu.max","studytime", "fails", "absence", "sup.total.bin")
1608304763165:# celarn d3 =======================================
1608304763166:# paid yes = 1 , no = 0
1608304763166:data <- select(d2,"age","sex","address","Pstatus","guardian","Medu", "Fedu","studytime","failures","absences","schoolsup","famsup","paid","internet","romantic","famrel","freetime","goout","Dalc","Walc","health", "G3")
1608304763177:# higher education only very few no -> keep out
1608304763178:# bin age of students
1608304763178:data$age.bin <- data[,"age"]-min(data["age"])
1608304763178:# binary sex of student male = 0 female = 1
1608304763178:data$sex.bin[data$sex=="M"]=0
1608304763179:data$sex.bin[data$sex=="F"]=1
1608304763179:# clean up address U = urban = 1, rural = R = 0
1608304763179:#data$address.bin <- data[, "address"]
1608304763179:data$address.bin[data$address=="U"]=1
1608304763180:data$address.bin[data$address=="R"]=0
1608304763180:# family situation & parent education status
1608304763180:data$pstatus.bin[data$Pstatus=="T"]=1
1608304763181:data$pstatus.bin[data$Pstatus=="A"]=0
1608304763181:# if together -> highes education parent
1608304763181:data$parent.edu.max[data$Pstatus=="T"] = do.call(pmax, select(data[data$Pstatus=="T",], "Medu", "Fedu"))
1608304763184:# filter out other guardian
1608304763184:data <- data[!(data$guardian=="other"),]
1608304763185:# if separate -> guardian edication
1608304763185:data$parent.edu.max[data$Pstatus=="A" & data$guardian=="mother"] = data$Medu[data$Pstatus=="A" & data$guardian=="mother"]
1608304763185:data$parent.edu.max[data$Pstatus=="A" & data$guardian=="father"] = data$Fedu[data$Pstatus=="A" & data$guardian=="father"]
1608304763186:# additional support
1608304763186:data$schoolsup.bin[data$schoolsup=="yes"]=1
1608304763186:data$schoolsup.bin[data$schoolsup=="no"]=0
1608304763187:data$famsup.bin[data$famsup=="yes"]=1
1608304763187:data$famsup.bin[data$famsup=="no"]=0
1608304763187:data$paidsup.bin[data$paid=="yes"]=1
1608304763187:data$paidsup.bin[data$paid=="no"]=0
1608304763188:data$sup.total.bin = data$schoolsup.bin + data$famsup.bin + data$paidsup.bin
1608304763188:# internet bin
1608304763188:data$internet.bin[data$internet=="yes"]==1
1608304763188:data$internet.bin[data$internet=="no"]==0
1608304763189:# aclochol consumption total
1608304763189:data$alc.tot = data$Walc+data$Dalc
1608304785179:column.list = list("G3","age.bin","sex.bin","address.bin","pstatus.bin","parent.edu.max","studytime", "fails", "absence", "sup.total.bin")
1608304806199:train.data = select(data, column.list)
1608304826157:# columns for bayesian network
1608304826157:train.data = select(data, "G3","age.bin","sex.bin","address.bin","pstatus.bin","parent.edu.max","studytime", "fails", "absence", "sup.total.bin")
1608304843393:# columns for bayesian network
1608304843393:train.data = select(data, "G3","age.bin","sex.bin","address.bin","pstatus.bin","parent.edu.max","studytime", "failures", "absence", "sup.total.bin")
1608304851919:# columns for bayesian network
1608304851919:train.data = select(data, "G3","age.bin","sex.bin","address.bin","pstatus.bin","parent.edu.max","studytime", "failures", "absences", "sup.total.bin")
1608304870262:bn = naive.bayes(train.data, "G3")
1608304870263:pred = predict(bn, train.data)
1608304870263:table(pred, train.data[, "G3"])
1608304875126:bn = naive.bayes(train.data, "G3")
1608305429377:fit <- pc.stable(train.data)
1608305429379:plot(fit)
1608305446202:fit <- pc.stable(train.data)
1608305529106:View(train.data)
1608305529273:View(train.data)
1608305927381:library(dplyr)
1608305927695:library(dagitty)
1608305928013:library(Hmisc)
1608305929463:library(caTools)
1608305929491:#Load data
1608305929491:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt")
1608305929491:# load csv
1608305929492:#all_df <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1608305929492:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1608305929525:head(d)
1608305929538:#sd <- select(d,"cigs")
1608305929538:#Select right variables
1608305929539:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1608305929553:#Filter out mising values
1608305929553:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1608305929559:nrow(prep)
1608305929559:nrow(subset)
1608305929559:#Plot data continous data
1608305929559:#hist(prep$age)
1608305929560:#hist(prep$chol)
1608305929560:#hist(prep$cigs)
1608305929560:#hist(prep$years)
1608305929560:#hist(prep$trestbps)
1608305929560:#Bin continous data into categorical data of 3 bins.
1608305929561:amountBins <- 3
1608305929561:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1608305929561:continuousVars <- unlist(continuousVars)
1608305929561:for(i in 1:length(continuousVars)){
1608305929561:varname <- continuousVars[i]
1608305929562:intervalValues.varname <- list()
1608305929562:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1608305929562:for(j in 1:length(intervals.varname)){
1608305929563:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1608305929563:intervals.fst <- intervals.t[1]
1608305929563:intervals.snd <- intervals.t[2]
1608305929563:nc.1 <- nchar(intervals.fst)
1608305929564:nc.2 <- nchar(intervals.snd)
1608305929564:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1608305929564:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1608305929565:}
1608305929565:intervalValues.varname <- unique(unlist(intervalValues.varname))
1608305929566:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1608305929566:intervalValues.varname[1] = intervalValues.varname[1]-1
1608305929567:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1608305929567:colname.D <-  paste(varname, ".discrete",sep="")
1608305929568:colname.N <- paste(varname, ".numeric", sep = "")
1608305929568:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1608305929568:prep[colname.N] <- as.numeric( prep[[colname.D]])
1608305929569:}
1608305929602:#### make target variable binary #####
1608305929602:## 0 --> 0 & 1,2,3 --> 1 #######
1608305929602:num.binary <- prep$num
1608305929603:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1608305929605:########################################################################################
1608305929606:female <- select((prep[prep$sex ==0 , ]), sex=0, age.numeric)
1608305929608:female$sex <- "female"
1608305929609:male <- select((prep[prep$sex ==1 , ]), sex=0, age.numeric)
1608305929611:male$sex <- "male"
1608305929611:bins <- rbind(female, male)
1608305929612:ggplot(bins, aes(age.numeric, fill = sex)) + geom_density(alpha = 0.2)
1608305930450:geom_histogram(fill="white", alpha=0.5, position="identity")
1608305930453:####################################################################
1608305930453:## Create training and test set ##
1608305930453:##################################
1608305930454:set.seed(13)
1608305930454:#Select only variables we need (numeric)
1608305930454:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1608305930458:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19,21)#, 22)
1608305930462:data.binary$num.binary <- as.double(prep[,22])
1608305930463:# split the data
1608305930463:smp_size = floor(0.75 *  nrow(data))
1608305930463:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1608305930463:train <-  data[train_ind,]
1608305930464:test <- data[-train_ind,]
1608305930464:train.binary <-  data.binary[train_ind,]
1608305930464:test.binary <- data.binary[-train_ind,]
1608305930465:train_neg = sum(train$num.binary==0)
1608305930465:train_pos = sum(train$num.binary==1)
1608305930465:test_neg = sum(test$num.binary==0)
1608305930465:test_pos = sum(test$num.binary==1)
1608305930465:train_ratio = train_pos/train_neg
1608305930465:test_ratio = test_pos/test_neg
1608306399922:library(bnlearn)
1608306400022:data(learning.test)
1608306400025:data(gaussian.test)
1608306423155:library(bnlearn)
1608306423156:data(learning.test)
1608306423159:data(gaussian.test)
1608306429495:force(learning.test)
1608306429506:force(learning.test)
1608306431624:View(learning.test)
1608306479253:#install.packages("pROC")
1608306479253:library(dplyr)
1608306479254:library(dagitty)
1608306479254:library(Hmisc)
1608306479254:library(caTools)
1608306479255:#Load data
1608306479255:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt")
1608306479255:# load csv
1608306479255:#all_df <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1608306479256:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1608306479285:head(d)
1608306479286:#sd <- select(d,"cigs")
1608306479286:#Select right variables
1608306479286:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1608306479286:#Filter out mising values
1608306479287:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1608306479296:nrow(prep)
1608306479296:nrow(subset)
1608306479297:#Plot data continous data
1608306479297:#hist(prep$age)
1608306479297:#hist(prep$chol)
1608306479297:#hist(prep$cigs)
1608306479297:#hist(prep$years)
1608306479298:#hist(prep$trestbps)
1608306479298:#Bin continous data into categorical data of 3 bins.
1608306479298:amountBins <- 3
1608306479298:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1608306479298:continuousVars <- unlist(continuousVars)
1608306479299:for(i in 1:length(continuousVars)){
1608306479299:varname <- continuousVars[i]
1608306479299:intervalValues.varname <- list()
1608306479299:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1608306479299:for(j in 1:length(intervals.varname)){
1608306479300:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1608306479300:intervals.fst <- intervals.t[1]
1608306479300:intervals.snd <- intervals.t[2]
1608306479300:nc.1 <- nchar(intervals.fst)
1608306479301:nc.2 <- nchar(intervals.snd)
1608306479301:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1608306479301:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1608306479302:}
1608306479302:intervalValues.varname <- unique(unlist(intervalValues.varname))
1608306479302:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1608306479303:intervalValues.varname[1] = intervalValues.varname[1]-1
1608306479303:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1608306479304:colname.D <-  paste(varname, ".discrete",sep="")
1608306479304:colname.N <- paste(varname, ".numeric", sep = "")
1608306479304:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1608306479305:prep[colname.N] <- as.numeric( prep[[colname.D]])
1608306479305:}
1608306479335:#### make target variable binary #####
1608306479336:## 0 --> 0 & 1,2,3 --> 1 #######
1608306479336:num.binary <- prep$num
1608306479336:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1608306479337:########################################################################################
1608306479337:female <- select((prep[prep$sex ==0 , ]), sex=0, age.numeric)
1608306479337:female$sex <- "female"
1608306479337:male <- select((prep[prep$sex ==1 , ]), sex=0, age.numeric)
1608306479338:male$sex <- "male"
1608306479338:####################################################################
1608306479338:## Create training and test set ##
1608306479338:##################################
1608306479339:set.seed(13)
1608306479339:#Select only variables we need (numeric)
1608306479339:data <- select(prep, 2,3,4,9,10,11,13,15,17,19,21)
1608306479339:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19,21)#, 22)
1608306479340:data.binary$num.binary <- as.double(prep[,22])
1608306479340:# split the data
1608306479340:smp_size = floor(0.75 *  nrow(data))
1608306479340:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1608306479341:train <-  data[train_ind,]
1608306479341:test <- data[-train_ind,]
1608306479341:train.binary <-  data.binary[train_ind,]
1608306479341:test.binary <- data.binary[-train_ind,]
1608306479342:train_neg = sum(train$num.binary==0)
1608306479342:train_pos = sum(train$num.binary==1)
1608306479342:test_neg = sum(test$num.binary==0)
1608306479342:test_pos = sum(test$num.binary==1)
1608306479342:train_ratio = train_pos/train_neg
1608306479343:test_ratio = test_pos/test_neg
1608306493231:#Load data
1608306493231:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt")
1608306493232:# load csv
1608306493232:#all_df <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1608306493232:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1608306493233:head(d)
1608306493234:#sd <- select(d,"cigs")
1608306493234:#Select right variables
1608306493234:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1608306493234:#Filter out mising values
1608306493235:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1608306493238:nrow(prep)
1608306493238:nrow(subset)
1608306493239:#Plot data continous data
1608306493239:#hist(prep$age)
1608306493239:#hist(prep$chol)
1608306493239:#hist(prep$cigs)
1608306493239:#hist(prep$years)
1608306493240:#hist(prep$trestbps)
1608306493240:#Bin continous data into categorical data of 3 bins.
1608306493240:amountBins <- 3
1608306493240:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1608306493240:continuousVars <- unlist(continuousVars)
1608306493241:for(i in 1:length(continuousVars)){
1608306493241:varname <- continuousVars[i]
1608306493241:intervalValues.varname <- list()
1608306493241:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1608306493242:for(j in 1:length(intervals.varname)){
1608306493242:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1608306493242:intervals.fst <- intervals.t[1]
1608306493243:intervals.snd <- intervals.t[2]
1608306493243:nc.1 <- nchar(intervals.fst)
1608306493243:nc.2 <- nchar(intervals.snd)
1608306493244:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1608306493244:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1608306493244:}
1608306493245:intervalValues.varname <- unique(unlist(intervalValues.varname))
1608306493245:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1608306493245:intervalValues.varname[1] = intervalValues.varname[1]-1
1608306493246:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1608306493246:colname.D <-  paste(varname, ".discrete",sep="")
1608306493247:colname.N <- paste(varname, ".numeric", sep = "")
1608306493247:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1608306493248:prep[colname.N] <- as.numeric( prep[[colname.D]])
1608306493248:}
1608306493270:#### make target variable binary #####
1608306493270:## 0 --> 0 & 1,2,3 --> 1 #######
1608306493271:num.binary <- prep$num
1608306493271:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1608306493271:########################################################################################
1608306493271:female <- select((prep[prep$sex ==0 , ]), sex=0, age.numeric)
1608306493272:female$sex <- "female"
1608306493272:male <- select((prep[prep$sex ==1 , ]), sex=0, age.numeric)
1608306493272:male$sex <- "male"
1608306510443:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1608306510444:head(d)
1608306523110:pwd
1608306527646:getwd
1608306530510:wd
1608306541455:#Load data
1608306541455:setwd("/Users/max/Google Drive/1 Uni/1.1 Kurse/Baysian Networks/Projekt")
1608306545359:d <- read.csv("data/dataCleveland.csv",header=TRUE,colClasses=rep("double",4),stringsAsFactors=FALSE)
1608306608650:---
1608306608650:title: "max_project_2"
1608306608651:output: html_document
1608306608651:---
1608306608651:library(dplyr)
1608306608652:library(dagitty)
1608306608652:library(Hmisc)
1608306608652:#library(caTools)
1608306608653:library(bnlearn)
1608306608653:library( pROC )
1608306608665:```
1608306608665:```{r}
1608306608665:#Change the work directory to your location of th data
1608306608665:setwd(getwd())
1608306608666:```
1608306608666:# Importing & Clean Data
1608306608666:Original data is available at https://archive.ics.uci.edu/ml/datasets/Heart+Disease.
1608306608666:## Import only cleveland data
1608306608667:The original data consist of data from 4 different hospitals in Hungarian, Switserland, Long Beach and Cleveland. In earlier research, the latter is used most research and contains the least missing values of the variables of interest. We thus use this data for our research.
1608306608667:```{r}
1608306608667:# load csv
1608306608667:a.all <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1608306608668:d <- read.csv("data/dataCleveland.csv",header=TRUE,stringsAsFactors=FALSE)
1608306608669:```
1608306608670:As missing values are present, we need to clear missing data & and subselect the variables of interest, based on own research. This results in 11 variables (including the target variable). The variables of interest are:
1608306608670:- Age (discrete)
1608306608670:- Sex (binary)
1608306608670:- Chest pain type (categorical)
1608306608671:- Fasting blood sugar > 120 mg/dl (binary)
1608306608671:- Resting blood pressure (discrete)
1608306608671:- Serum cholesterol in mg/dl (discrete)
1608306608671:- Amount cigarettes/day (discrete)
1608306608672:- Number of years as a smoker (discrete)
1608306608672:- Cardiac fluoroscopy (categorical)
1608306608672:- Thalium stress test (categorical)
1608306608672:- Presence heart disease (categorical)
1608306608673:```{r}
1608306608673:#Select right variables
1608306608673:subset <- select(d, 3,4,9,16,10,12,14,15,44,51,58)
1608306608673:#Filter out mising values
1608306608674:prep <- filter(subset, age != -9 &  sex != -9 & cp != -9 &fbs != -9 & trestbps!= -9 & chol != -9 &cigs != -9 &years!= -9 & ca != -9 &thal != -9 &num!= -9 )
1608306608677:nrow(prep)
1608306608677:nrow(subset)
1608306608677:```
1608306608677:## Process Data
1608306608678:We first take a look at the distribution of the continuous variables of interest
1608306608678:```{r}
1608306608678:hist(prep$age)
1608306608678:hist(prep$chol)
1608306608679:hist(prep$cigs)
1608306608679:hist(prep$years)
1608306608679:hist(prep$trestbps)
1608306608679:```
1608306608680:As we can see, the range of the continuous variables are quite large. As we will use the _localTests_ function to optimize the network, it will use the chi square test. With 272 samples, the chi square test - which treats data as categorical data - introduces sparseness into the data, which is visualized below. Here, the occurences of the combination of all values from age (continuous) and ca (categorical) are shown.
1608306608680:```{r}
1608306608680:#table( prep$age, prep$ca)
1608306608680:```
1608306608681:Thus, we have more table entries than we have data points, which is a problem for the chi square test. For this reason, we will bin the data of the continuous variables. As we see from the histograms, the variables do not follow a normal distribution. Because of this, we choose an equal amount of samples in each bin. We choose a bin size of 3.
1608306608681:```{r}
1608306608681:#Bin continuous data into categorical data of 3 bins.
1608306608681:amountBins <- 3
1608306608681:continuousVars <- list("age", "chol", "cigs", "years","trestbps")
1608306608682:continuousVars <- unlist(continuousVars)
1608306608682:for(i in 1:length(continuousVars)){
1608306608682:varname <- continuousVars[i]
1608306608682:intervalValues.varname <- list()
1608306608682:intervals.varname <-  names(split(prep, cut2(prep[[varname]], g=amountBins)))
1608306608683:for(j in 1:length(intervals.varname)){
1608306608683:intervals.t <-  unlist(strsplit(intervals.varname[j], ','))
1608306608683:intervals.fst <- intervals.t[1]
1608306608684:intervals.snd <- intervals.t[2]
1608306608684:nc.1 <- nchar(intervals.fst)
1608306608684:nc.2 <- nchar(intervals.snd)
1608306608685:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.fst,2,nc.1)))
1608306608685:intervalValues.varname <- append(intervalValues.varname, as.numeric(substr(intervals.snd,1,nc.2-1)))
1608306608685:}
1608306608686:intervalValues.varname <- unique(unlist(intervalValues.varname))
1608306608686:intervalValues.varname <- intervalValues.varname[!is.na(intervalValues.varname)]
1608306608686:intervalValues.varname[1] = intervalValues.varname[1]-1
1608306608687:intervalValues.varname[length(intervalValues.varname)] = intervalValues.varname[length(intervalValues.varname)]+1
1608306608687:colname.D <-  paste(varname, ".discrete",sep="")
1608306608688:colname.N <- paste(varname, ".numeric", sep = "")
1608306608688:prep[colname.D] <- cut( prep[[varname]], breaks=c(intervalValues.varname))
1608306608689:prep[colname.N] <- as.numeric( prep[[colname.D]])
1608306608689:}
1608306608710:#prep
1608306608711:```
1608306608711:As we want to do an inference task, we split our data into a test- and training dataset.
1608306608711:```{r}
1608306608711:set.seed(13)
1608306608712:#Select only variables we need (numeric)
1608306608712:data <- select(prep, 2,3,4,9,10, 11,13,15,17,19,21)
1608306608712:# split the data
1608306608712:smp_size = floor(0.75 *  nrow(data))
1608306608713:train_ind <- sample(seq_len(nrow(data)), size = smp_size)
1608306608713:train <-  data[train_ind,]
1608306608713:test <- data[-train_ind,]
1608306608714:#test
1608306608714:```
1608306608714:As the inferences task includes predicting the prevalence of a heart disease, it is important to look at the final label. In this case, it is a multi-classification problem with 4 unique labels. However, as denoted in the background information of the dataset, 0 indicates the absences of a heart disease and [1-4] denote levels of presence of a heart disease. To improve the performance of the inference task, we therefore make it a binary classification problem by merging [1-4] to just value 1. This means that we create a binary test & training dataset
1608306608714:```{r}
1608306608714:num.binary <- prep$num
1608306608715:prep$num.binary <- rapply(as.list(num.binary), function(x) ifelse(x!=0, 1,x), how = "replace")
1608306608715:#Select only variables we need (numeric)
1608306608715:data.binary <- select(prep, 2,3,4,9,10,13,15,17,19,21)
1608306608715:data.binary$num.binary <- as.double(prep[,22])
1608306608716:head(data.binary)
1608306608716:train.binary <-  data.binary[train_ind,]
1608306608716:test.binary <- data.binary[-train_ind,]
1608306608716:#test.binary
1608306608717:```
1608306608717:We then calculate parameters of test and training set.
1608306608717:```{r}
1608306608717:data.neg = sum(data.binary$num.binary==0)
1608306608717:data.pos = sum(data.binary$num.binary==1)
1608306608718:train_neg = sum(train.binary$num.binary==0)
1608306608718:train_pos = sum(train.binary$num.binary==1)
1608306608718:test_neg = sum(test.binary$num.binary==0)
1608306608718:test_pos = sum(test.binary$num.binary==1)
1608306608719:train_pos_perc = train_pos/(train_neg+train_pos)
1608306608719:test_pos_perc = test_pos/(test_neg+test_pos)
1608306608719:data_pos_perc = data.pos/(data.neg+data.pos)
1608306608719:print(train_pos_perc)
1608306608720:print(test_pos_perc)
1608306608720:print(data_pos_perc)
1608306608721:```
1608306620665:library(dplyr)
1608306620666:library(dagitty)
1608306620666:library(Hmisc)
1608306620666:#library(caTools)
1608306620666:library(bnlearn)
1608306620667:library( pROC )
1608306624322:#Change the work directory to your location of th data
1608306624322:setwd(getwd())
1608306629529:getwd()
1608306635777:a.all <- read.csv("data/all_processed.csv",header=TRUE,stringsAsFactors=FALSE) #colClasses=rep("double",4),
1608306635778:d <- read.csv("data/dataCleveland.csv",header=TRUE,stringsAsFactors=FALSE)
